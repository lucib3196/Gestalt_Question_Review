from langchain_core.prompts import ChatPromptTemplate
from typing import Optional, Annotated, List, Dict, Literal
from pydantic import BaseModel, Field
from langchain_openai import ChatOpenAI

# ────────────────────────────────────────────────────────────────────────────────
# Constants
# ────────────────────────────────────────────────────────────────────────────────
FASTLLM = "gpt-4o-mini"
LONGCONTEXTLLM = "o3-mini-2025-01-31"

fast_llm = ChatOpenAI(model=FASTLLM)
long_context = ChatOpenAI(model=LONGCONTEXTLLM)


class CodeOutput(BaseModel):
    code: str = Field(..., description="Return just the code")


class IndividualFileReview(BaseModel):
    file_name: str
    approach: str
    context: str


class CodeReview(BaseModel):
    analysis: str = Field(
        ...,
        description="An analysis of the code and wether it aligns with the goals given",
    )
    grade: Literal["yes", "no"] = Field(
        ...,
        description="A binary yes or no on wether further modification are needed to improve this code",
    )
    approach: str = Field(
        ..., description="The approach of what needs to be modified in the code"
    )
    files_to_modify: List[IndividualFileReview] = Field(
        ...,
        description="The name of the files you want to modify and the approach include all relevant context associated with the extraction",
    )


code_fix_prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            "You are an expert developer tasked with modifying the following code and improving on it.",
        ),
        ("human", "Code: {code}\nChanges to fix:{approach}\n"),
    ]
)


code_fix_llm = fast_llm.with_structured_output(CodeOutput)
code_fix = code_fix_prompt | code_fix_llm

# Grader prompt
code_grader_prompt = ChatPromptTemplate.from_messages(
    [
        (
            "system",
            """You are an expert coding assistant focused on educational content for engineering, physics, and science students. Your task is to review and ensure compatibility between the solution guide, frontend question display (question_html), and server files (Python or JavaScript), with special attention to dynamic placeholders such as double curly braces params.value or correct_answers.value.

Breakdown of requirements:

Server Files (server_js, server_py):
- Must output a dictionary with the top-level keys: 'params' and 'correct_answers', for example:
  "params": ...,
  "correct_answers": ...
- Place any intermediate values needed for computation or clarity inside 'params' as additional keys.
- All dynamic placeholders in the question, solution, and question_html must be defined and populated by the server files using this structure.
- Ensure all required imports and variables are present and correctly referenced.
- Identify and implement any necessary unit conversions for physics, math, or engineering problems, and provide clear instructions for these conversions in both the solution and server files.
- Suggest improvements to make the server files as dynamic and instructive as possible, including intermediate steps and conversions to aid student understanding.

Question File (question_html):
- All values shown in question_html must be dynamically generated by the server files and referenced using the [[params.value]] convention.
- Ensure that every parameter or value displayed in question_html is present in the 'params' output of the server files.
- Check that the placeholders in question_html match the keys in the server files' 'params' dictionary.
- Recommend changes to question_html to improve dynamic content and compatibility with the server files.
- This should include both numerical values and units if applicable
- Do not include any script tags these values will be generated by the server file

Solution File (solution_html):
- Must use the parameters generated from the server files, referencing them 
- Clearly show all intermediate steps and unit conversions using these dynamic placeholders.
- Provide explanations that help students understand how the parameters and answers are derived from the server files.
- Do not include any script tags these values will be generated by the server file
General:
- Recommend changes to the question view, solution, or server files to improve compatibility and educational value.

Example server file output structure:
"params": 
    "H": originalHeight,
    "v": velocity,
    "unitsDist": selectedUnitSystem.dist,
    "unitsSpeed": selectedUnitSystem.speed,
    "intermediate": 
        "originalHeight": originalHeight,
        "heightInMeters": heightInMeters
    ,
"correct_answers": 
    "t": timeToGround
,
"nDigits": 3,
"sigfigs": 3

If you need to modify any files, specify which: question_html, server_js, server_py, or solution_html.

Structure your answer as follows:
1. Brief description of the code solution and its dynamic aspects.
2. List of required imports and variables for compatibility.
3. Improved code block(s) for dynamic content, intermediate steps, and conversions, ensuring the server files maintain the 'params' and 'correct_answers' structure and all intermediate values are within 'params'.
4. For the question_html and solution_html files, ensure they use the parameters from the server files and demonstrate all steps using the [[params.value]] convention for dynamic placeholders.


Additionally for each code change for the file also include relevatn context for what you need to know to do the change. This can include extracting the datastructure params to ensure that 
you are making the adequete changes. Finally for files such as the solution guide and the question file do not mention anything about the backend
code ie the server.js or server.py files as this is purely for student views. 
""",
        ),
        ("human", "{input}"),
    ]
)
code_review = code_grader_prompt | long_context.with_structured_output(CodeReview)
