{
    "text": "A ball is traveling along a straight road at a constant speed of 10 m/s for 20 seconds. What is the total distance traveled? The correct answer is 200 m\n\nA car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled? The correct answer is 120 km",
    "questions": [
        {
            "question": "A ball is traveling along a straight road at a constant speed of $10\\ \\text{m/s}$ for $20\\ \\text{s}$. What is the total distance traveled? The correct answer is $200\\ \\text{m}$",
            "params": [
                {
                    "name": "speed",
                    "value": "10",
                    "units": "m/s"
                },
                {
                    "name": "time",
                    "value": "20",
                    "units": "seconds"
                }
            ],
            "correct_answers": [
                {
                    "name": "distance",
                    "value": "200",
                    "units": "m"
                }
            ],
            "source": null,
            "requires_external_data": false,
            "requires_image": false,
            "completeness": true,
            "additional_information": null,
            "solution": null
        },
        {
            "question": "A car moves at a constant speed of $60\\ \\text{km/h}$ for $2\\ \\text{hours}$. What is the total distance traveled? The correct answer is $120\\ \\text{km}$",
            "params": [
                {
                    "name": "speed",
                    "value": "60",
                    "units": "km/h"
                },
                {
                    "name": "time",
                    "value": "2",
                    "units": "hours"
                }
            ],
            "correct_answers": [
                {
                    "name": "distance",
                    "value": "120",
                    "units": "km"
                }
            ],
            "source": null,
            "requires_external_data": false,
            "requires_image": false,
            "completeness": true,
            "additional_information": null,
            "solution": null
        }
    ],
    "gestalt_code": [
        {
            "question_payload": {
                "question": "A ball is traveling along a straight road at a constant speed of $10\\ \\text{m/s}$ for $20\\ \\text{s}$. What is the total distance traveled? The correct answer is $200\\ \\text{m}$",
                "params": [
                    {
                        "name": "speed",
                        "value": "10",
                        "units": "m/s"
                    },
                    {
                        "name": "time",
                        "value": "20",
                        "units": "seconds"
                    }
                ],
                "correct_answers": [
                    {
                        "name": "distance",
                        "value": "200",
                        "units": "m"
                    }
                ],
                "source": null,
                "requires_external_data": false,
                "requires_image": false,
                "completeness": true,
                "additional_information": null,
                "solution": null
            },
            "files_data": {
                "question.html": "<pl-question-panel>\n  <p> A ball is traveling along a straight road at a constant speed of <strong>{params.speed} {params.unitsSpeed}</strong> for <strong>{params.time} {params.unitsTime}</strong>.</p>\n  <p> What is the total distance traveled?</p>\n</pl-question-panel>\n\n<pl-number-input answers-name=\"distance\" comparison=\"sigfig\" digits=\"3\" label=\"Distance ({params.unitsDist})\"></pl-number-input>",
                "server.js": "const math = require('mathjs');\n\nconst generate = (case_ = 0) => {\n  // Tolerances for test verification\n  const ABS_TOL = 1e-6;\n  const REL_TOL = 1e-6;\n\n  // Original question metadata (used to lock Case 2 units)\n  const ORIGINAL_QUESTION = 'A ball is traveling along a straight road at a constant speed of 10 m/s for 20 s. What is the total distance traveled?';\n  const ORIGINAL_UNITS_SPEED = 'm/s';\n  const ORIGINAL_UNITS_TIME = 's';\n  const ORIGINAL_UNITS_DISTANCE = 'm';\n\n  // Unit catalog for random generation (kept compatible with original code)\n  const unitCatalog = {\n    si: {\n      speed: ['m/s', 'km/h'],\n      time: ['s', 'min', 'h'],\n      distanceMap: { 'm/s': 'm', 'km/h': 'km' }\n    },\n    uscs: {\n      speed: ['ft/s', 'mph'],\n      time: ['s', 'min', 'h'],\n      distanceMap: { 'ft/s': 'ft', 'mph': 'mi' }\n    }\n  };\n\n  // PREDEFINED_VALUES for Case 1 (use exactly as written)\n  const PREDEFINED_VALUES = {\n    speed: 10, // numeric\n    time: 20, // numeric\n    unitsSpeed: 'm/s',\n    unitsTime: 's'\n  };\n\n  // TEST_VALUES and CORRECT_ANSWER for Case 2\n  const TEST_VALUES = {\n    speed: 10,\n    time: 20,\n    unitsSpeed: ORIGINAL_UNITS_SPEED,\n    unitsTime: ORIGINAL_UNITS_TIME\n  };\n  const CORRECT_ANSWER = 200; // meters\n\n  // Helper random functions\n  const randFloat = (min, max, decimals = 2) => {\n    const r = math.random() * (max - min) + min;\n    return Number(math.round(r, decimals));\n  };\n\n  // Prepare outputs\n  let speed, time, unitsSpeed, unitsTime, unitsDist;\n  let selectedSystem;\n  const test_results = { pass: null, message: '' };\n\n  if (case_ === 0) {\n    // Random case: choose a system randomly\n    selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';\n    const units = unitCatalog[selectedSystem];\n\n    // select units randomly\n    unitsSpeed = units.speed[math.randomInt(0, units.speed.length)];\n    unitsTime = units.time[math.randomInt(0, units.time.length)];\n    unitsDist = units.distanceMap[unitsSpeed];\n\n    // generate speed according to unit\n    if (unitsSpeed === 'm/s') {\n      speed = randFloat(1.0, 30.0, 2);\n    } else if (unitsSpeed === 'km/h') {\n      speed = randFloat(5.0, 120.0, 2);\n    } else if (unitsSpeed === 'ft/s') {\n      speed = randFloat(3.0, 120.0, 2);\n    } else if (unitsSpeed === 'mph') {\n      speed = randFloat(3.0, 80.0, 2);\n    } else {\n      speed = randFloat(1.0, 50.0, 2);\n    }\n\n    // generate time according to unit\n    if (unitsTime === 's') {\n      time = randFloat(1.0, 300.0, 2);\n    } else if (unitsTime === 'min') {\n      time = randFloat(0.5, 120.0, 2);\n    } else if (unitsTime === 'h') {\n      time = randFloat(0.01, 5.0, 3);\n    } else {\n      time = randFloat(1.0, 100.0, 2);\n    }\n  } else if (case_ === 1) {\n    // Use PREDEFINED_VALUES exactly\n    speed = PREDEFINED_VALUES.speed;\n    time = PREDEFINED_VALUES.time;\n    unitsSpeed = PREDEFINED_VALUES.unitsSpeed;\n    unitsTime = PREDEFINED_VALUES.unitsTime;\n    // determine distance unit from catalog (assume SI map if m/s present)\n    unitsDist = unitCatalog.si.distanceMap[unitsSpeed] || unitCatalog.uscs.distanceMap[unitsSpeed] || ORIGINAL_UNITS_DISTANCE;\n  } else if (case_ === 2) {\n    // Test case: must have CORRECT_ANSWER\n    if (typeof CORRECT_ANSWER === 'undefined') {\n      throw new Error('Test case unavailable: CORRECT_ANSWER not provided');\n    }\n    // Use TEST_VALUES exactly and lock units to original units for deterministic verification\n    speed = TEST_VALUES.speed;\n    time = TEST_VALUES.time;\n    unitsSpeed = TEST_VALUES.unitsSpeed; // should equal ORIGINAL_UNITS_SPEED\n    unitsTime = TEST_VALUES.unitsTime; // should equal ORIGINAL_UNITS_TIME\n    unitsDist = ORIGINAL_UNITS_DISTANCE;\n  } else {\n    throw new Error(`Unknown case_: ${case_}`);\n  }\n\n  // Compute distance according to units (keep behavior consistent with earlier code)\n  let distanceComputed; // in unitsDist\n\n  // SI cases\n  if (unitsSpeed === 'm/s') {\n    // convert time to seconds if needed\n    let time_s = time;\n    if (unitsTime === 'min') time_s = time * 60.0;\n    else if (unitsTime === 'h') time_s = time * 3600.0;\n    // distance in meters\n    distanceComputed = speed * time_s;\n  } else if (unitsSpeed === 'km/h') {\n    // convert time to hours\n    let time_h = time;\n    if (unitsTime === 'min') time_h = time / 60.0;\n    else if (unitsTime === 's') time_h = time / 3600.0;\n    distanceComputed = speed * time_h; // kilometers\n  }\n\n  // USCS cases\n  else if (unitsSpeed === 'ft/s') {\n    let time_s = time;\n    if (unitsTime === 'min') time_s = time * 60.0;\n    else if (unitsTime === 'h') time_s = time * 3600.0;\n    distanceComputed = speed * time_s; // feet\n  } else if (unitsSpeed === 'mph') {\n    let time_h = time;\n    if (unitsTime === 'min') time_h = time / 60.0;\n    else if (unitsTime === 's') time_h = time / 3600.0;\n    distanceComputed = speed * time_h; // miles\n  } else {\n    // fallback: assume speed in unit per second and time in seconds\n    distanceComputed = speed * time;\n  }\n\n  // If Case 2, verify against CORRECT_ANSWER using tolerances\n  if (case_ === 2) {\n    const expected = CORRECT_ANSWER;\n    const diff = Math.abs(distanceComputed - expected);\n    const tol = Math.max(ABS_TOL, REL_TOL * Math.abs(expected));\n    const passed = diff <= tol;\n    test_results.pass = passed ? 1 : 0;\n    test_results.message = passed\n      ? `PASS — computed=${distanceComputed} ${unitsDist}, expected=${expected} ${unitsDist}`\n      : `FAIL — computed=${distanceComputed} ${unitsDist}, expected=${expected} ${unitsDist}`;\n  }\n\n  // Prepare final returned objects (round numeric answer for presentation)\n  const distanceRounded = (typeof distanceComputed === 'number') ? Number(math.round(distanceComputed, 3)) : distanceComputed;\n\n  const params = {\n    speed: speed,\n    time: time,\n    unitsSpeed: unitsSpeed,\n    unitsTime: unitsTime,\n    unitsDist: unitsDist\n  };\n\n  const correct_answers = {\n    distance: distanceRounded\n  };\n\n  return {\n    params,\n    correct_answers,\n    test_results\n  };\n};\n\nmodule.exports = { generate };",
                "server.py": "from typing import Any, Dict, Optional\nimport math\n\n\ndef generate(case_: int = 0) -> Dict[str, Any]:\n    \"\"\"\n    Compute distance = speed * time with units. Three cases:\n      case_ == 0: random (deterministic LCG) values for parameters not fixed\n      case_ == 1: use PREDEFINED_VALUES exactly\n      case_ == 2: use TEST_VALUES and verify against CORRECT_ANSWER\n\n    Returns a flattened dictionary with keys: params, correct_answers, test_results.\n    \"\"\"\n\n    # Original question / units (must be used for Case 2 verification)\n    ORIGINAL_QUESTION = \"A ball is traveling at 10 m/s for 20 s. What is the distance?\"\n    ORIGINAL_UNITS_SPEED = \"m/s\"\n    ORIGINAL_UNITS_TIME = \"s\"\n    ORIGINAL_UNITS_DISTANCE = \"m\"\n\n    # Predefined values (Case 1) - use exactly as provided here\n    PREDEFINED_VALUES = {\n        \"speed\": 10.0,\n        \"unitsSpeed\": \"m/s\",\n        \"time\": 20.0,\n        \"unitsTime\": \"s\",\n        \"unitsDist\": \"m\",\n    }\n\n    # Test values and correct answer (Case 2) - locked to original units for deterministic test\n    TEST_VALUES = {\n        \"speed\": 10.0,\n        \"unitsSpeed\": \"m/s\",\n        \"time\": 20.0,\n        \"unitsTime\": \"s\",\n        \"unitsDist\": \"m\",\n    }\n    CORRECT_ANSWER: Optional[float] = 200.0\n\n    # Tolerances for numeric comparison\n    ABS_TOL = 1e-6\n    REL_TOL = 1e-6\n\n    # Unit conversion mappings (to SI base: meters and seconds)\n    speed_to_mps = {\n        'm/s': 1.0,\n        'km/h': 1000.0 / 3600.0,\n        'ft/s': 0.3048,\n        'mph': 1609.344 / 3600.0,\n    }\n    time_to_s = {\n        's': 1.0,\n        'min': 60.0,\n        'h': 3600.0,\n    }\n    m_to_unit = {\n        'm': 1.0,\n        'km': 1.0 / 1000.0,\n        'ft': 1.0 / 0.3048,\n        'mi': 1.0 / 1609.344,\n    }\n\n    # Deterministic pseudo-random generator (LCG)\n    class LCG:\n        def __init__(self, seed: int = 123456789):\n            self._state = seed & 0x7fffffff\n\n        def rand(self) -> int:\n            self._state = (1103515245 * self._state + 12345) & 0x7fffffff\n            return self._state\n\n        def randf(self) -> float:\n            return self.rand() / 2147483647.0\n\n    rng = LCG(seed=13579)\n\n    # Helper: validate units\n    def validate_units(us: str, ut: str, ud: str) -> None:\n        if us not in speed_to_mps:\n            raise ValueError(f\"Unsupported speed unit: {us}\")\n        if ut not in time_to_s:\n            raise ValueError(f\"Unsupported time unit: {ut}\")\n        if ud not in m_to_unit:\n            raise ValueError(f\"Unsupported distance unit: {ud}\")\n\n    # Initialize test_results\n    test_results: Dict[str, Any] = {\"pass\": None, \"message\": \"\"}\n\n    # Assign parameters depending on case\n    if case_ == 0:\n        # Generate pseudo-random (but deterministic) example\n        system_choice = int(rng.randf() * 2)\n        if system_choice == 0:\n            # SI\n            if rng.randf() < 0.5:\n                unitsSpeed = 'm/s'\n                speed = 1.0 + rng.randf() * 14.0  # 1 to 15 m/s\n            else:\n                unitsSpeed = 'km/h'\n                speed = 10.0 + rng.randf() * 110.0  # 10 to 120 km/h\n\n            tchoice = rng.randf()\n            if tchoice < 0.6:\n                unitsTime = 's'\n                time = 5.0 + rng.randf() * 355.0\n            elif tchoice < 0.95:\n                unitsTime = 'min'\n                time = 1.0 + rng.randf() * 59.0\n            else:\n                unitsTime = 'h'\n                time = 0.01 + rng.randf() * 5.0\n\n            unitsDist = 'm' if unitsSpeed == 'm/s' else 'km'\n        else:\n            # USCS\n            if rng.randf() < 0.5:\n                unitsSpeed = 'ft/s'\n                speed = 2.0 + rng.randf() * 60.0\n            else:\n                unitsSpeed = 'mph'\n                speed = 5.0 + rng.randf() * 95.0\n\n            tchoice = rng.randf()\n            if tchoice < 0.6:\n                unitsTime = 's'\n                time = 5.0 + rng.randf() * 355.0\n            elif tchoice < 0.95:\n                unitsTime = 'min'\n                time = 1.0 + rng.randf() * 59.0\n            else:\n                unitsTime = 'h'\n                time = 0.01 + rng.randf() * 5.0\n\n            unitsDist = 'ft' if unitsSpeed == 'ft/s' else 'mi'\n\n    elif case_ == 1:\n        # Use PREDEFINED_VALUES exactly\n        speed = float(PREDEFINED_VALUES['speed'])\n        unitsSpeed = PREDEFINED_VALUES['unitsSpeed']\n        time = float(PREDEFINED_VALUES['time'])\n        unitsTime = PREDEFINED_VALUES['unitsTime']\n        unitsDist = PREDEFINED_VALUES['unitsDist']\n\n    elif case_ == 2:\n        # Use TEST_VALUES and verify\n        if CORRECT_ANSWER is None:\n            raise ValueError(\"Test case unavailable: CORRECT_ANSWER not provided\")\n        speed = float(TEST_VALUES['speed'])\n        unitsSpeed = TEST_VALUES['unitsSpeed']\n        time = float(TEST_VALUES['time'])\n        unitsTime = TEST_VALUES['unitsTime']\n        unitsDist = TEST_VALUES['unitsDist']\n    else:\n        raise ValueError(f\"Unknown case_: {case_}\")\n\n    # Ensure units are supported\n    validate_units(unitsSpeed, unitsTime, unitsDist)\n\n    # Convert and compute\n    speed_mps = speed * speed_to_mps[unitsSpeed]\n    time_s = time * time_to_s[unitsTime]\n    distance_m = speed_mps * time_s\n    distance_out = distance_m * m_to_unit[unitsDist]\n\n    # Prepare the computed answer (unrounded float)\n    computed_distance = float(distance_out)\n\n    # If Case 2: verify against CORRECT_ANSWER using tolerances\n    if case_ == 2:\n        if isinstance(CORRECT_ANSWER, (int, float)):\n            expected = float(CORRECT_ANSWER)\n            diff = abs(computed_distance - expected)\n            tol = max(ABS_TOL, REL_TOL * abs(expected))\n            passed = diff <= tol\n        else:\n            # Non-numeric comparison\n            passed = str(computed_distance) == str(CORRECT_ANSWER)\n\n        test_results['pass'] = 1 if passed else 0\n        test_results['message'] = (\n            f\"PASS — computed={computed_distance} {unitsDist}, expected={CORRECT_ANSWER} {unitsDist}\"\n            if passed else\n            f\"FAIL — computed={computed_distance} {unitsDist}, expected={CORRECT_ANSWER} {unitsDist}\"\n        )\n\n    # Build params and correct_answers outputs (flattened keys for each parameter)\n    params = {\n        'speed_value': speed,\n        'speed_units': unitsSpeed,\n        'speed_symbol': 'v',\n        'time_value': time,\n        'time_units': unitsTime,\n        'time_symbol': 't',\n        # intermediate (useful but allowed inside params)\n        'speed_m_per_s': speed_mps,\n        'time_s': time_s,\n        'distance_m': distance_m,\n    }\n\n    correct_answers = {\n        'distance_value': computed_distance,\n        'distance_units': unitsDist,\n        'distance_symbol': 'd',\n    }\n\n    return {\n        'params': params,\n        'correct_answers': correct_answers,\n        'test_results': test_results,\n    }\n\n\n# Example quick local test (not executed here):\n# print(generate(1))\n# print(generate(2))\n",
                "solution.html": "<pl-solution-panel>\n  <pl-hint level=\"1\">Known variables (Data Level: Given): Speed = {{params.speed}} {{params.unitsSpeed}}; Time = {{params.time}} {{params.unitsTime}}. We are asked for the total distance traveled in {{params.unitsDist}}.</pl-hint>\n  <pl-hint level=\"2\">Governing equation (Data Level: Symbolic): $$d = v\\,t$$ where $d$ is distance, $v$ is constant speed, and $t$ is time.</pl-hint>\n  <pl-hint level=\"3\">With values substituted (Data Level: Substituted): $$d = {{params.speed}}\\,{{params.unitsSpeed}} \\times {{params.time}}\\,{{params.unitsTime}}$$</pl-hint>\n  <pl-hint level=\"4\">Simplify and compute (Data Level: Simplified): Multiply the numerical values for speed and time to get the distance: $$d = {{params.speed}} \\times {{params.time}} = {correct_answers.distance}\\,{{params.unitsDist}}$$</pl-hint>\n  <pl-hint level=\"5\">Final result (Data Level: Final): The total distance traveled is $d = {correct_answers.distance}\\,{{params.unitsDist}}$.</pl-hint>\n</pl-solution-panel>"
            },
            "metadata": {
                "question": "A ball is traveling along a straight road at a constant speed of $10\\ \\text{m/s}$ for $20\\ \\text{s}$. What is the total distance traveled? The correct answer is $200\\ \\text{m}$",
                "title": "DistanceFromConstantSpeed",
                "topics": [
                    "Kinematics",
                    "Time and Motion Analysis"
                ],
                "isAdaptive": "True"
            }
        },
        {
            "question_payload": {
                "question": "A car moves at a constant speed of $60\\ \\text{km/h}$ for $2\\ \\text{hours}$. What is the total distance traveled? The correct answer is $120\\ \\text{km}$",
                "params": [
                    {
                        "name": "speed",
                        "value": "60",
                        "units": "km/h"
                    },
                    {
                        "name": "time",
                        "value": "2",
                        "units": "hours"
                    }
                ],
                "correct_answers": [
                    {
                        "name": "distance",
                        "value": "120",
                        "units": "km"
                    }
                ],
                "source": null,
                "requires_external_data": false,
                "requires_image": false,
                "completeness": true,
                "additional_information": null,
                "solution": null
            },
            "files_data": {
                "question.html": "<pl-question-panel>\n  <p> A car moves at a constant speed of {params.v1} {params.unitsSpeed} for {params.t1} {params.unitsTime}. What is the total distance traveled?</p>\n</pl-question-panel>\n\n<pl-number-input answers-name=\"d\" comparison=\"sigfig\" digits=\"3\" label=\"Total distance ({params.unitsDist})\"></pl-number-input>",
                "server.js": "const math = require('mathjs');\n\n// Generates parameters and solution for: \"A car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled?\"\n// Supports three cases:\n// case_ === 0 : random generation (keeps random unit-system behavior)\n// case_ === 1 : use PREDEFINED_VALUES\n// case_ === 2 : use TEST_VALUES and verify against CORRECT_ANSWER\n\nfunction generate(case_ = 0) {\n    const ORIGINAL_QUESTION = \"A car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled?\";\n    const ORIGINAL_UNITS = { speed: 'km/h', time: 'h', distance: 'km' };\n\n    // Hardcoded sets\n    const PREDEFINED_VALUES = {\n        // Use exactly as written for case 1\n        v1: 60, // km/h\n        t1: 2,  // h\n        unitsSpeed: 'km/h',\n        unitsTime: 'h',\n        unitsDist: 'km'\n    };\n\n    const TEST_VALUES = {\n        // Use exactly as written for case 2 (locked to ORIGINAL_UNITS below)\n        v1: 60, // km/h\n        t1: 2,  // h\n        unitsSpeed: 'km/h',\n        unitsTime: 'h',\n        unitsDist: 'km'\n    };\n\n    const CORRECT_ANSWER = 120; // km\n\n    const ABS_TOL = 1e-6;\n    const REL_TOL = 1e-6;\n\n    // Unit systems available for random generation (case 0 may pick one)\n    const unitSystems = [\n        { name: 'SI-ms', speed: 'm/s', time: 's', distance: 'm' },\n        { name: 'SI-kmh', speed: 'km/h', time: 'h', distance: 'km' },\n        { name: 'USCS-mph', speed: 'mph', time: 'h', distance: 'mi' },\n        { name: 'USCS-fts', speed: 'ft/s', time: 's', distance: 'ft' }\n    ];\n\n    // Initialize outputs\n    let v1, t1, unitsSpeed, unitsTime, unitsDist;\n    const test_results = { pass: null, message: \"\" };\n\n    if (case_ === 0) {\n        // Random behavior: pick a random unit system and generate appropriate ranges\n        const idx = math.randomInt(0, unitSystems.length);\n        const selected = unitSystems[idx];\n        unitsSpeed = selected.speed;\n        unitsTime = selected.time;\n        unitsDist = selected.distance;\n\n        switch (selected.name) {\n            case 'SI-ms':\n                v1 = math.round(math.random() * (30 - 5) + 5, 2); // m/s\n                t1 = math.round(math.random() * (300 - 5) + 5, 2); // s\n                break;\n            case 'SI-kmh':\n                v1 = math.round(math.random() * (130 - 20) + 20, 2); // km/h\n                t1 = math.round(math.random() * (3.0 - 0.1) + 0.1, 3); // h\n                break;\n            case 'USCS-mph':\n                v1 = math.round(math.random() * (80 - 20) + 20, 2); // mph\n                t1 = math.round(math.random() * (2.5 - 0.05) + 0.05, 3); // h\n                break;\n            case 'USCS-fts':\n                v1 = math.round(math.random() * (120 - 10) + 10, 2); // ft/s\n                t1 = math.round(math.random() * (600 - 5) + 5, 2); // s\n                break;\n            default:\n                v1 = math.round(math.random() * (130 - 20) + 20, 2);\n                t1 = math.round(math.random() * (3.0 - 0.1) + 0.1, 3);\n                unitsSpeed = 'km/h';\n                unitsTime = 'h';\n                unitsDist = 'km';\n        }\n    } else if (case_ === 1) {\n        // Use PREDEFINED_VALUES exactly\n        v1 = PREDEFINED_VALUES.v1;\n        t1 = PREDEFINED_VALUES.t1;\n        unitsSpeed = PREDEFINED_VALUES.unitsSpeed;\n        unitsTime = PREDEFINED_VALUES.unitsTime;\n        unitsDist = PREDEFINED_VALUES.unitsDist;\n    } else if (case_ === 2) {\n        // Test case: must have CORRECT_ANSWER provided\n        if (typeof CORRECT_ANSWER === 'undefined') {\n            throw new Error('Test case unavailable: CORRECT_ANSWER not provided');\n        }\n        // Use TEST_VALUES exactly and lock to ORIGINAL_UNITS\n        v1 = TEST_VALUES.v1;\n        t1 = TEST_VALUES.t1;\n        // Ensure Case 2 uses the original units deterministically\n        unitsSpeed = ORIGINAL_UNITS.speed;\n        unitsTime = ORIGINAL_UNITS.time;\n        unitsDist = ORIGINAL_UNITS.distance;\n    } else {\n        throw new Error(`Unknown case_: ${case_}`);\n    }\n\n    // Compute distance d = v * t. For the chosen unit systems above we ensured time unit\n    // matches the speed's time basis (e.g., km/h with h, m/s with s). For case 2 we locked to ORIGINAL_UNITS.\n    const d_raw = math.multiply(v1, t1);\n    const d_rounded = math.round(d_raw, 3);\n\n    // If case 2, verify against CORRECT_ANSWER\n    if (case_ === 2) {\n        const expected = CORRECT_ANSWER;\n        if (typeof expected === 'number') {\n            const diff = Math.abs(d_raw - expected);\n            const tol = Math.max(ABS_TOL, REL_TOL * Math.abs(expected));\n            const passed = diff <= tol;\n            test_results.pass = passed ? 1 : 0;\n            test_results.message = passed\n                ? `PASS — computed=${d_raw} ${unitsDist}, expected=${expected} ${unitsDist}`\n                : `FAIL — computed=${d_raw} ${unitsDist}, expected=${expected} ${unitsDist}`;\n        } else {\n            // Non-numeric expected: strict string match\n            const computedStr = d_raw.toString();\n            const passed = computedStr === expected;\n            test_results.pass = passed ? 1 : 0;\n            test_results.message = passed\n                ? `PASS — computed=${computedStr} ${unitsDist}, expected=${expected} ${unitsDist}`\n                : `FAIL — computed=${computedStr} ${unitsDist}, expected=${expected} ${unitsDist}`;\n        }\n    }\n\n    // Build return objects exactly as required\n    const params = {\n        v1: v1,\n        t1: t1,\n        unitsSpeed: unitsSpeed,\n        unitsTime: unitsTime,\n        unitsDist: unitsDist\n    };\n\n    const correct_answers = {\n        d_value: d_rounded,\n        d_units: unitsDist,\n        d_symbol: 'd'\n    };\n\n    return {\n        params,\n        correct_answers,\n        test_results\n    };\n}\n\nmodule.exports = { generate };",
                "server.py": "from typing import Any, Dict, Optional\nimport random\n\n\ndef generate(case_: int = 0) -> Dict[str, Any]:\n    \"\"\"\n    Generate a simple kinematics problem: distance = speed * time.\n\n    Cases:\n      0 - random generation for parameters not otherwise fixed\n      1 - use PREDEFINED_VALUES exactly\n      2 - use TEST_VALUES and verify against CORRECT_ANSWER\n\n    Returns flattened dict with keys: \"params\", \"correct_answers\", \"test_results\"\n    \"\"\"\n\n    # Original question & units (used for Case 2 / test locking)\n    ORIGINAL_QUESTION = \"A car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled?\"\n    ORIGINAL_UNITS_SPEED = \"km/h\"\n    ORIGINAL_UNITS_TIME = \"hours\"\n    ORIGINAL_UNITS_DIST = \"km\"\n\n    # Hardcoded values\n    PREDEFINED_VALUES = {\"speed\": 60, \"time\": 2}   # use exactly these (types preserved)\n    TEST_VALUES = {\"speed\": 60, \"time\": 2}         # locked test values\n    CORRECT_ANSWER: Optional[float] = 120.0           # numeric correct answer for test\n\n    ABS_TOL = 1e-6\n    REL_TOL = 1e-6\n\n    test_results: Dict[str, Any] = {\"pass\": None, \"message\": \"\"}\n\n    # Unit option sets for random generation (Case 0)\n    unit_options = [\n        {\"speed\": \"m/s\", \"time\": \"s\", \"dist\": \"m\", \"v_range\": (5.0, 30.0), \"t_range\": (10.0, 3600.0)},\n        {\"speed\": \"km/h\", \"time\": \"hours\", \"dist\": \"km\", \"v_range\": (20.0, 130.0), \"t_range\": (0.1, 5.0)},\n        {\"speed\": \"ft/s\", \"time\": \"s\", \"dist\": \"ft\", \"v_range\": (16.0, 90.0), \"t_range\": (10.0, 3600.0)},\n        {\"speed\": \"mph\", \"time\": \"hours\", \"dist\": \"mi\", \"v_range\": (20.0, 80.0), \"t_range\": (0.1, 6.0)},\n    ]\n\n    # Assign values depending on case\n    if case_ == 0:\n        # Random selection\n        choice = random.choice(unit_options)\n        unitsSpeed = choice[\"speed\"]\n        unitsTime = choice[\"time\"]\n        unitsDist = choice[\"dist\"]\n\n        vmin, vmax = choice[\"v_range\"]\n        tmin, tmax = choice[\"t_range\"]\n\n        # generate random values within ranges\n        v1 = vmin + (vmax - vmin) * random.random()\n        t1 = tmin + (tmax - tmin) * random.random()\n\n        # round for nicer presentation depending on units\n        if unitsSpeed in (\"m/s\", \"ft/s\"):\n            v1 = round(v1, 1)\n        else:\n            v1 = round(v1, 2)\n\n        if unitsTime == \"s\":\n            t1 = round(t1, 1)\n        else:\n            t1 = round(t1, 3)\n\n        chosen_info = \"Randomly generated example\"\n\n    elif case_ == 1:\n        # Use PREDEFINED_VALUES exactly as provided\n        v1 = PREDEFINED_VALUES[\"speed\"]\n        t1 = PREDEFINED_VALUES[\"time\"]\n        unitsSpeed = ORIGINAL_UNITS_SPEED\n        unitsTime = ORIGINAL_UNITS_TIME\n        unitsDist = ORIGINAL_UNITS_DIST\n        chosen_info = \"Predefined values (from original question)\"\n\n    elif case_ == 2:\n        # Test case: must have CORRECT_ANSWER\n        if CORRECT_ANSWER is None:\n            raise ValueError(\"Test case unavailable: CORRECT_ANSWER not provided\")\n        # Use TEST_VALUES exactly and lock units to the original units for determinism\n        v1 = TEST_VALUES[\"speed\"]\n        t1 = TEST_VALUES[\"time\"]\n        unitsSpeed = ORIGINAL_UNITS_SPEED\n        unitsTime = ORIGINAL_UNITS_TIME\n        unitsDist = ORIGINAL_UNITS_DIST\n\n    else:\n        raise ValueError(f\"Unknown case_: {case_}\")\n\n    # Compute distance (units are chosen so direct multiplication is valid)\n    # Ensure numeric in float for computation\n    d_unrounded = float(v1) * float(t1)\n\n    # Prepare outputs\n    distance_value = d_unrounded\n\n    # Verification for case 2\n    if case_ == 2:\n        expected = float(CORRECT_ANSWER)\n        diff = abs(distance_value - expected)\n        tol = max(ABS_TOL, REL_TOL * abs(expected))\n        passed = diff <= tol\n        test_results[\"pass\"] = 1 if passed else 0\n        if passed:\n            test_results[\"message\"] = (\n                f\"PASS — computed={distance_value} {unitsDist}, expected={expected} {unitsDist}\"\n            )\n        else:\n            test_results[\"message\"] = (\n                f\"FAIL — computed={distance_value} {unitsDist}, expected={expected} {unitsDist}\"\n            )\n\n    # Build flattened return structure\n    params: Dict[str, Any] = {\n        \"speed_value\": v1,\n        \"speed_units\": unitsSpeed,\n        \"speed_symbol\": \"v\",\n\n        \"time_value\": t1,\n        \"time_units\": unitsTime,\n        \"time_symbol\": \"t\",\n\n        # include distance intermediate/unrounded in params as extra context\n        \"d_unrounded\": d_unrounded,\n        \"d_units\": unitsDist,\n        \"notes\": chosen_info,\n    }\n\n    correct_answers: Dict[str, Any] = {\n        \"distance_value\": distance_value,\n        \"distance_units\": unitsDist,\n        \"distance_symbol\": \"d\",\n    }\n\n    return {\"params\": params, \"correct_answers\": correct_answers, \"test_results\": test_results}\n\n\n# Quick demonstration when run as script (not required by the grader)\nif __name__ == '__main__':\n    print(generate(case_=1))\n    print(generate(case_=0))\n    print(generate(case_=2))",
                "solution.html": "<pl-question-panel>\n  <p> A car moves at a constant speed of {{params.v1}} {{params.unitsSpeed}} for {{params.t1}} {{params.unitsTime}}. What is the total distance traveled?</p>\n</pl-question-panel>\n\n<pl-solution-panel>\n  <pl-hint level=\"1\" data-type=\"text\">Known Variables (Data Level: Symbolic): The speed is $v = {{params.v1}}\\;{{params.unitsSpeed}}$ and the time is $t = {{params.t1}}\\;{{params.unitsTime}}$. We want the distance $d$ in {{params.unitsDist}}.</pl-hint>\n\n  <pl-hint level=\"2\" data-type=\"text\">Governing Equation (Data Level: Symbolic): For constant speed, the distance is given by the relation $d = v\\,t$.</pl-hint>\n\n  <pl-hint level=\"3\" data-type=\"text\">Substitute Values (Data Level: Substituted): Substitute $v = {{params.v1}}\\;{{params.unitsSpeed}}$ and $t = {{params.t1}}\\;{{params.unitsTime}}$ into $d = v\\,t$ to get\n  $d = {{params.v1}} \\times {{params.t1}}\\;({{params.unitsSpeed}}\\times {{params.unitsTime}})$.</pl-hint>\n\n  <pl-hint level=\"4\" data-type=\"text\">Simplify Units and Arithmetic (Data Level: Simplified): Multiplying the numeric values gives\n  $d = {{params.v1}} \\times {{params.t1}} = {correct_answers.d}\\;{{params.unitsDist}}$.</pl-hint>\n\n  <pl-hint level=\"5\" data-type=\"text\">Final Answer (Data Level: Final): The total distance traveled is $d = {correct_answers.d}\\;{{params.unitsDist}}$.</pl-hint>\n</pl-solution-panel>"
            },
            "metadata": {
                "question": "A car moves at a constant speed of $60\\ \\text{km/h}$ for $2\\ \\text{hours}$. What is the total distance traveled? The correct answer is $120\\ \\text{km}$",
                "title": "DistanceFromSpeedAndTime",
                "topics": [
                    "Basic Algebra",
                    "Kinematics",
                    "Time and Motion Analysis"
                ],
                "isAdaptive": "True"
            }
        }
    ]
}