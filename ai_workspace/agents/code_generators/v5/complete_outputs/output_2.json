{
    "question_payload": {
        "question": "A car moves at a constant speed of $60\\ \\text{km/h}$ for $2\\ \\text{hours}$. What is the total distance traveled? The correct answer is $120\\ \\text{km}$",
        "params": [
            {
                "name": "speed",
                "value": "60",
                "units": "km/h"
            },
            {
                "name": "time",
                "value": "2",
                "units": "hours"
            }
        ],
        "correct_answers": [
            {
                "name": "distance",
                "value": "120",
                "units": "km"
            }
        ],
        "source": null,
        "requires_external_data": false,
        "requires_image": false,
        "completeness": true,
        "additional_information": null,
        "solution": null
    },
    "files_data": {
        "question.html": "<pl-question-panel>\n  <p> A car moves at a constant speed of {params.v1} {params.unitsSpeed} for {params.t1} {params.unitsTime}. What is the total distance traveled?</p>\n</pl-question-panel>\n\n<pl-number-input answers-name=\"d\" comparison=\"sigfig\" digits=\"3\" label=\"Total distance ({params.unitsDist})\"></pl-number-input>",
        "server.js": "const math = require('mathjs');\n\n// Generates parameters and solution for: \"A car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled?\"\n// Supports three cases:\n// case_ === 0 : random generation (keeps random unit-system behavior)\n// case_ === 1 : use PREDEFINED_VALUES\n// case_ === 2 : use TEST_VALUES and verify against CORRECT_ANSWER\n\nfunction generate(case_ = 0) {\n    const ORIGINAL_QUESTION = \"A car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled?\";\n    const ORIGINAL_UNITS = { speed: 'km/h', time: 'h', distance: 'km' };\n\n    // Hardcoded sets\n    const PREDEFINED_VALUES = {\n        // Use exactly as written for case 1\n        v1: 60, // km/h\n        t1: 2,  // h\n        unitsSpeed: 'km/h',\n        unitsTime: 'h',\n        unitsDist: 'km'\n    };\n\n    const TEST_VALUES = {\n        // Use exactly as written for case 2 (locked to ORIGINAL_UNITS below)\n        v1: 60, // km/h\n        t1: 2,  // h\n        unitsSpeed: 'km/h',\n        unitsTime: 'h',\n        unitsDist: 'km'\n    };\n\n    const CORRECT_ANSWER = 120; // km\n\n    const ABS_TOL = 1e-6;\n    const REL_TOL = 1e-6;\n\n    // Unit systems available for random generation (case 0 may pick one)\n    const unitSystems = [\n        { name: 'SI-ms', speed: 'm/s', time: 's', distance: 'm' },\n        { name: 'SI-kmh', speed: 'km/h', time: 'h', distance: 'km' },\n        { name: 'USCS-mph', speed: 'mph', time: 'h', distance: 'mi' },\n        { name: 'USCS-fts', speed: 'ft/s', time: 's', distance: 'ft' }\n    ];\n\n    // Initialize outputs\n    let v1, t1, unitsSpeed, unitsTime, unitsDist;\n    const test_results = { pass: null, message: \"\" };\n\n    if (case_ === 0) {\n        // Random behavior: pick a random unit system and generate appropriate ranges\n        const idx = math.randomInt(0, unitSystems.length);\n        const selected = unitSystems[idx];\n        unitsSpeed = selected.speed;\n        unitsTime = selected.time;\n        unitsDist = selected.distance;\n\n        switch (selected.name) {\n            case 'SI-ms':\n                v1 = math.round(math.random() * (30 - 5) + 5, 2); // m/s\n                t1 = math.round(math.random() * (300 - 5) + 5, 2); // s\n                break;\n            case 'SI-kmh':\n                v1 = math.round(math.random() * (130 - 20) + 20, 2); // km/h\n                t1 = math.round(math.random() * (3.0 - 0.1) + 0.1, 3); // h\n                break;\n            case 'USCS-mph':\n                v1 = math.round(math.random() * (80 - 20) + 20, 2); // mph\n                t1 = math.round(math.random() * (2.5 - 0.05) + 0.05, 3); // h\n                break;\n            case 'USCS-fts':\n                v1 = math.round(math.random() * (120 - 10) + 10, 2); // ft/s\n                t1 = math.round(math.random() * (600 - 5) + 5, 2); // s\n                break;\n            default:\n                v1 = math.round(math.random() * (130 - 20) + 20, 2);\n                t1 = math.round(math.random() * (3.0 - 0.1) + 0.1, 3);\n                unitsSpeed = 'km/h';\n                unitsTime = 'h';\n                unitsDist = 'km';\n        }\n    } else if (case_ === 1) {\n        // Use PREDEFINED_VALUES exactly\n        v1 = PREDEFINED_VALUES.v1;\n        t1 = PREDEFINED_VALUES.t1;\n        unitsSpeed = PREDEFINED_VALUES.unitsSpeed;\n        unitsTime = PREDEFINED_VALUES.unitsTime;\n        unitsDist = PREDEFINED_VALUES.unitsDist;\n    } else if (case_ === 2) {\n        // Test case: must have CORRECT_ANSWER provided\n        if (typeof CORRECT_ANSWER === 'undefined') {\n            throw new Error('Test case unavailable: CORRECT_ANSWER not provided');\n        }\n        // Use TEST_VALUES exactly and lock to ORIGINAL_UNITS\n        v1 = TEST_VALUES.v1;\n        t1 = TEST_VALUES.t1;\n        // Ensure Case 2 uses the original units deterministically\n        unitsSpeed = ORIGINAL_UNITS.speed;\n        unitsTime = ORIGINAL_UNITS.time;\n        unitsDist = ORIGINAL_UNITS.distance;\n    } else {\n        throw new Error(`Unknown case_: ${case_}`);\n    }\n\n    // Compute distance d = v * t. For the chosen unit systems above we ensured time unit\n    // matches the speed's time basis (e.g., km/h with h, m/s with s). For case 2 we locked to ORIGINAL_UNITS.\n    const d_raw = math.multiply(v1, t1);\n    const d_rounded = math.round(d_raw, 3);\n\n    // If case 2, verify against CORRECT_ANSWER\n    if (case_ === 2) {\n        const expected = CORRECT_ANSWER;\n        if (typeof expected === 'number') {\n            const diff = Math.abs(d_raw - expected);\n            const tol = Math.max(ABS_TOL, REL_TOL * Math.abs(expected));\n            const passed = diff <= tol;\n            test_results.pass = passed ? 1 : 0;\n            test_results.message = passed\n                ? `PASS — computed=${d_raw} ${unitsDist}, expected=${expected} ${unitsDist}`\n                : `FAIL — computed=${d_raw} ${unitsDist}, expected=${expected} ${unitsDist}`;\n        } else {\n            // Non-numeric expected: strict string match\n            const computedStr = d_raw.toString();\n            const passed = computedStr === expected;\n            test_results.pass = passed ? 1 : 0;\n            test_results.message = passed\n                ? `PASS — computed=${computedStr} ${unitsDist}, expected=${expected} ${unitsDist}`\n                : `FAIL — computed=${computedStr} ${unitsDist}, expected=${expected} ${unitsDist}`;\n        }\n    }\n\n    // Build return objects exactly as required\n    const params = {\n        v1: v1,\n        t1: t1,\n        unitsSpeed: unitsSpeed,\n        unitsTime: unitsTime,\n        unitsDist: unitsDist\n    };\n\n    const correct_answers = {\n        d_value: d_rounded,\n        d_units: unitsDist,\n        d_symbol: 'd'\n    };\n\n    return {\n        params,\n        correct_answers,\n        test_results\n    };\n}\n\nmodule.exports = { generate };",
        "server.py": "from typing import Any, Dict, Optional\nimport random\n\n\ndef generate(case_: int = 0) -> Dict[str, Any]:\n    \"\"\"\n    Generate a simple kinematics problem: distance = speed * time.\n\n    Cases:\n      0 - random generation for parameters not otherwise fixed\n      1 - use PREDEFINED_VALUES exactly\n      2 - use TEST_VALUES and verify against CORRECT_ANSWER\n\n    Returns flattened dict with keys: \"params\", \"correct_answers\", \"test_results\"\n    \"\"\"\n\n    # Original question & units (used for Case 2 / test locking)\n    ORIGINAL_QUESTION = \"A car moves at a constant speed of 60 km/h for 2 hours. What is the total distance traveled?\"\n    ORIGINAL_UNITS_SPEED = \"km/h\"\n    ORIGINAL_UNITS_TIME = \"hours\"\n    ORIGINAL_UNITS_DIST = \"km\"\n\n    # Hardcoded values\n    PREDEFINED_VALUES = {\"speed\": 60, \"time\": 2}   # use exactly these (types preserved)\n    TEST_VALUES = {\"speed\": 60, \"time\": 2}         # locked test values\n    CORRECT_ANSWER: Optional[float] = 120.0           # numeric correct answer for test\n\n    ABS_TOL = 1e-6\n    REL_TOL = 1e-6\n\n    test_results: Dict[str, Any] = {\"pass\": None, \"message\": \"\"}\n\n    # Unit option sets for random generation (Case 0)\n    unit_options = [\n        {\"speed\": \"m/s\", \"time\": \"s\", \"dist\": \"m\", \"v_range\": (5.0, 30.0), \"t_range\": (10.0, 3600.0)},\n        {\"speed\": \"km/h\", \"time\": \"hours\", \"dist\": \"km\", \"v_range\": (20.0, 130.0), \"t_range\": (0.1, 5.0)},\n        {\"speed\": \"ft/s\", \"time\": \"s\", \"dist\": \"ft\", \"v_range\": (16.0, 90.0), \"t_range\": (10.0, 3600.0)},\n        {\"speed\": \"mph\", \"time\": \"hours\", \"dist\": \"mi\", \"v_range\": (20.0, 80.0), \"t_range\": (0.1, 6.0)},\n    ]\n\n    # Assign values depending on case\n    if case_ == 0:\n        # Random selection\n        choice = random.choice(unit_options)\n        unitsSpeed = choice[\"speed\"]\n        unitsTime = choice[\"time\"]\n        unitsDist = choice[\"dist\"]\n\n        vmin, vmax = choice[\"v_range\"]\n        tmin, tmax = choice[\"t_range\"]\n\n        # generate random values within ranges\n        v1 = vmin + (vmax - vmin) * random.random()\n        t1 = tmin + (tmax - tmin) * random.random()\n\n        # round for nicer presentation depending on units\n        if unitsSpeed in (\"m/s\", \"ft/s\"):\n            v1 = round(v1, 1)\n        else:\n            v1 = round(v1, 2)\n\n        if unitsTime == \"s\":\n            t1 = round(t1, 1)\n        else:\n            t1 = round(t1, 3)\n\n        chosen_info = \"Randomly generated example\"\n\n    elif case_ == 1:\n        # Use PREDEFINED_VALUES exactly as provided\n        v1 = PREDEFINED_VALUES[\"speed\"]\n        t1 = PREDEFINED_VALUES[\"time\"]\n        unitsSpeed = ORIGINAL_UNITS_SPEED\n        unitsTime = ORIGINAL_UNITS_TIME\n        unitsDist = ORIGINAL_UNITS_DIST\n        chosen_info = \"Predefined values (from original question)\"\n\n    elif case_ == 2:\n        # Test case: must have CORRECT_ANSWER\n        if CORRECT_ANSWER is None:\n            raise ValueError(\"Test case unavailable: CORRECT_ANSWER not provided\")\n        # Use TEST_VALUES exactly and lock units to the original units for determinism\n        v1 = TEST_VALUES[\"speed\"]\n        t1 = TEST_VALUES[\"time\"]\n        unitsSpeed = ORIGINAL_UNITS_SPEED\n        unitsTime = ORIGINAL_UNITS_TIME\n        unitsDist = ORIGINAL_UNITS_DIST\n\n    else:\n        raise ValueError(f\"Unknown case_: {case_}\")\n\n    # Compute distance (units are chosen so direct multiplication is valid)\n    # Ensure numeric in float for computation\n    d_unrounded = float(v1) * float(t1)\n\n    # Prepare outputs\n    distance_value = d_unrounded\n\n    # Verification for case 2\n    if case_ == 2:\n        expected = float(CORRECT_ANSWER)\n        diff = abs(distance_value - expected)\n        tol = max(ABS_TOL, REL_TOL * abs(expected))\n        passed = diff <= tol\n        test_results[\"pass\"] = 1 if passed else 0\n        if passed:\n            test_results[\"message\"] = (\n                f\"PASS — computed={distance_value} {unitsDist}, expected={expected} {unitsDist}\"\n            )\n        else:\n            test_results[\"message\"] = (\n                f\"FAIL — computed={distance_value} {unitsDist}, expected={expected} {unitsDist}\"\n            )\n\n    # Build flattened return structure\n    params: Dict[str, Any] = {\n        \"speed_value\": v1,\n        \"speed_units\": unitsSpeed,\n        \"speed_symbol\": \"v\",\n\n        \"time_value\": t1,\n        \"time_units\": unitsTime,\n        \"time_symbol\": \"t\",\n\n        # include distance intermediate/unrounded in params as extra context\n        \"d_unrounded\": d_unrounded,\n        \"d_units\": unitsDist,\n        \"notes\": chosen_info,\n    }\n\n    correct_answers: Dict[str, Any] = {\n        \"distance_value\": distance_value,\n        \"distance_units\": unitsDist,\n        \"distance_symbol\": \"d\",\n    }\n\n    return {\"params\": params, \"correct_answers\": correct_answers, \"test_results\": test_results}\n\n\n# Quick demonstration when run as script (not required by the grader)\nif __name__ == '__main__':\n    print(generate(case_=1))\n    print(generate(case_=0))\n    print(generate(case_=2))",
        "solution.html": "<pl-question-panel>\n  <p> A car moves at a constant speed of {{params.v1}} {{params.unitsSpeed}} for {{params.t1}} {{params.unitsTime}}. What is the total distance traveled?</p>\n</pl-question-panel>\n\n<pl-solution-panel>\n  <pl-hint level=\"1\" data-type=\"text\">Known Variables (Data Level: Symbolic): The speed is $v = {{params.v1}}\\;{{params.unitsSpeed}}$ and the time is $t = {{params.t1}}\\;{{params.unitsTime}}$. We want the distance $d$ in {{params.unitsDist}}.</pl-hint>\n\n  <pl-hint level=\"2\" data-type=\"text\">Governing Equation (Data Level: Symbolic): For constant speed, the distance is given by the relation $d = v\\,t$.</pl-hint>\n\n  <pl-hint level=\"3\" data-type=\"text\">Substitute Values (Data Level: Substituted): Substitute $v = {{params.v1}}\\;{{params.unitsSpeed}}$ and $t = {{params.t1}}\\;{{params.unitsTime}}$ into $d = v\\,t$ to get\n  $d = {{params.v1}} \\times {{params.t1}}\\;({{params.unitsSpeed}}\\times {{params.unitsTime}})$.</pl-hint>\n\n  <pl-hint level=\"4\" data-type=\"text\">Simplify Units and Arithmetic (Data Level: Simplified): Multiplying the numeric values gives\n  $d = {{params.v1}} \\times {{params.t1}} = {correct_answers.d}\\;{{params.unitsDist}}$.</pl-hint>\n\n  <pl-hint level=\"5\" data-type=\"text\">Final Answer (Data Level: Final): The total distance traveled is $d = {correct_answers.d}\\;{{params.unitsDist}}$.</pl-hint>\n</pl-solution-panel>"
    },
    "metadata": {
        "question": "A car moves at a constant speed of $60\\ \\text{km/h}$ for $2\\ \\text{hours}$. What is the total distance traveled? The correct answer is $120\\ \\text{km}$",
        "title": "DistanceFromSpeedAndTime",
        "topics": [
            "Basic Algebra",
            "Kinematics",
            "Time and Motion Analysis"
        ],
        "isAdaptive": "True"
    }
}