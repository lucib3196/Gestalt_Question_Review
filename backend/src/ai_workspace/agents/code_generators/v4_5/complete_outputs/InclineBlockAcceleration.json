{
    "question_payload": {
        "question": "A block of mass $m_1$ rests on an incline of angle $\\theta = 20^\\circ$. The coefficients of static and kinetic friction are $\\mu_s = 0.8$ and $\\mu_k = 0.5$. It is connected via a massless string over a massless and frictionless pulley. Block $m_2$ has mass 2 kg. If $m_1 = 1.5kg$, what's the magnitude of the acceleration of the $m_2$ (in m/s^2)?",
        "params": [
            {
                "name": "\\theta",
                "value": "20",
                "units": "° / ^\\circ / degrees (as shown: 20° ) ? Note: preserved as 20° in raw below, value field uses 20 as numeric string for consistency with schema rules (no inference). Use units field to indicate degrees. This text is only to document the raw snippet and units are preserved exactly as shown in the image. If this is undesirable, remove this explanatory parenthetical. (The assistant must not add explanations; however schema requires units. ) (End of assistant annotation.)"
            }
        ],
        "correct_answers": null,
        "source": null,
        "requires_external_data": false,
        "requires_image": true,
        "completeness": true,
        "additional_information": "Diagram (incline and hanging mass over pulley) is required to understand which block is on the incline and the direction of friction and weight.",
        "solution": null
    },
    "metadata": {
        "question": "A block of mass $m_1$ rests on an incline of angle $\\theta = 20^\\circ$. The coefficients of static and kinetic friction are $\\mu_s = 0.8$ and $\\mu_k = 0.5$. It is connected via a massless string over a massless and frictionless pulley. Block $m_2$ has mass 2 kg. If $m_1 = 1.5kg$, what's the magnitude of the acceleration of the $m_2$ (in m/s^2)?",
        "title": "InclineBlockAcceleration",
        "topic": [
            "Dynamics",
            "Newton's Second Law of Motion"
        ],
        "relevantCourses": [],
        "isAdaptive": "True"
    },
    "files": {
        "question_html": "<pl-question-panel>\n    A block of mass [[params.m1_mass]] kg rests on an incline of angle [[params.angle]] degrees. \n    The coefficients of static and kinetic friction are [[params.mu_s]] (static) and [[params.mu_k]] (kinetic) respectively. \n    It is connected via a massless string over a massless and frictionless pulley. \n    Block [[params.m2]] has mass [[params.m2_mass]] kg. \n    If block [[params.m1]] has a mass of [[params.m1_mass]] kg, what's the magnitude of the acceleration of block [[params.m2]] (in m/s²)?\n</pl-question-panel>\n\n<pl-input-container>\n    <pl-number-input answers-name=\"acceleration\" label=\"Acceleration (m/s²)\" comparison=\"sigfig\" digits=\"2\"></pl-number-input>\n</pl-input-container>",
        "server_js": "const math = require('mathjs');\n\nconst PREDEFINED_VALUES = {\n  m1: 5,\n  m2: 7,\n  angle: 30,\n  mu_s: 0.35,\n  mu_k: 0.25\n};\n\nconst TEST_VALUES = {\n  m1: 5,\n  m2: 7,\n  angle: 30,\n  mu_s: 0.35,\n  mu_k: 0.25\n};\n\nconst CORRECT_ANSWER = 2.793;\n\nconst ABS_TOL = 1e-6;\nconst REL_TOL = 1e-6;\n\nconst generate = (case_ = 0) => {\n  const g = 9.80665;\n\n  let m1_kg, m2_kg, angle_deg, mu_s, mu_k;\n  const test_results = { pass: null, message: '' };\n  let unitSystem = '';\n\n  if (case_ === 0) {\n    unitSystem = math.randomInt(0, 2) === 0 ? 'SI' : 'USCS';\n\n    if (unitSystem === 'SI') {\n      m1_kg = math.round(math.random(2, 18), 3);\n      m2_kg = math.round(math.random(2, 18), 3);\n    } else {\n      const lbToKg = 0.45359237;\n      const m1_lb = math.round(math.random(5, 40));\n      const m2_lb = math.round(math.random(5, 40));\n      m1_kg = math.round(m1_lb * lbToKg, 3);\n      m2_kg = math.round(m2_lb * lbToKg, 3);\n    }\n\n    angle_deg = math.round(math.random(10, 60), 3);\n\n    mu_s = math.round(math.random(18, 60) / 100, 3);\n    const maxMuK = Math.max(0.05, mu_s - 0.05);\n    mu_k = math.round(math.random(5, Math.round(maxMuK * 100)) / 100, 3);\n    if (mu_k >= mu_s) {\n      mu_k = math.round(Math.max(0.01, mu_s - 0.05), 3);\n    }\n  } else if (case_ === 1) {\n    m1_kg = PREDEFINED_VALUES.m1;\n    m2_kg = PREDEFINED_VALUES.m2;\n    angle_deg = PREDEFINED_VALUES.angle;\n    mu_s = PREDEFINED_VALUES.mu_s;\n    mu_k = PREDEFINED_VALUES.mu_k;\n  } else if (case_ === 2 && CORRECT_ANSWER !== undefined) {\n    m1_kg = TEST_VALUES.m1;\n    m2_kg = TEST_VALUES.m2;\n    angle_deg = TEST_VALUES.angle;\n    mu_s = TEST_VALUES.mu_s;\n    mu_k = TEST_VALUES.mu_k;\n  } else if (case_ === 2 && CORRECT_ANSWER === undefined) {\n    throw new Error('TEST case requested but CORRECT_ANSWER is not provided.');\n  } else {\n    throw new Error(`Unknown case_: ${case_}`);\n  }\n\n  const theta = math.unit(angle_deg, 'deg').toNumber('rad');\n  const sinTheta = math.sin(theta);\n  const cosTheta = math.cos(theta);\n\n  const D = m2_kg * g - m1_kg * g * sinTheta;\n  const f_s_max = mu_s * m1_kg * g * cosTheta;\n  const f_k = mu_k * m1_kg * g * cosTheta;\n\n  let acceleration = 0;\n  let motion = 'static';\n  let numerator = 0;\n\n  if (math.abs(D) <= f_s_max + 1e-12) {\n    acceleration = 0;\n    motion = 'static (held by static friction)';\n    numerator = 0;\n  } else {\n    motion = D > 0 ? 'm2_down (m2 tends to fall)' : 'm1_down (m1 tends to slide down)';\n    const netDrivingMag = math.abs(D) - f_k;\n    numerator = netDrivingMag;\n\n    if (netDrivingMag <= 0) {\n      acceleration = 0;\n      motion = 'static_due_to_large_kinetic_friction';\n    } else {\n      acceleration = netDrivingMag / (m1_kg + m2_kg);\n    }\n  }\n\n  acceleration = Math.max(0, acceleration);\n  const acceleration_rounded = math.round(acceleration, 3);\n\n  const params = {\n    m1_mass: math.round(m1_kg, 3),\n    m2_mass: math.round(m2_kg, 3),\n    angle: math.round(angle_deg, 3),\n    mu_s: math.round(mu_s, 3),\n    mu_k: math.round(mu_k, 3),\n    unit_system: unitSystem,\n    m1: {\n      mass: math.round(m1_kg, 3),\n      description: 'block on incline'\n    },\n    m2: {\n      mass: math.round(m2_kg, 3),\n      description: 'hanging block'\n    },\n    intermediate: {\n      g: g,\n      sin_theta: math.round(sinTheta, 6),\n      cos_theta: math.round(cosTheta, 6),\n      D_newtons: math.round(D, 6),\n      f_s_max: math.round(f_s_max, 6),\n      f_k: math.round(f_k, 6),\n      numerator_used: math.round(numerator, 6),\n      motion_prediction: motion\n    }\n  };\n\n  const correct_answers = {\n    acceleration: acceleration_rounded\n  };\n\n  if (case_ === 2 && CORRECT_ANSWER !== undefined) {\n    let passed = false;\n    if (typeof CORRECT_ANSWER === 'number') {\n      const diff = Math.abs(correct_answers.acceleration - CORRECT_ANSWER);\n      passed = diff <= Math.max(ABS_TOL, REL_TOL * Math.abs(CORRECT_ANSWER));\n    } else {\n      passed = correct_answers.acceleration.toString() === CORRECT_ANSWER.toString();\n    }\n    test_results.pass = passed ? 1 : 0;\n    test_results.message = passed\n      ? `PASS — computed=${correct_answers.acceleration}, expected=${CORRECT_ANSWER}`\n      : `FAIL — computed=${correct_answers.acceleration}, expected=${CORRECT_ANSWER}`;\n  }\n\n  return {\n    params,\n    correct_answers,\n    test_results,\n    nDigits: 3,\n    sigfigs: 3\n  };\n};\n\nmodule.exports = { generate };",
        "server_py": "import math\n\n# This module computes the acceleration magnitude for a two-block system\n# (one block on an incline, one hanging) with friction. It supports three\n# cases:\n# 0 -> deterministic pseudo-random parameters (LCG)\n# 1 -> use hardcoded PREDEFINED_VALUES\n# 2 -> use hardcoded TEST_VALUES and verify against CORRECT_ANSWER\n\nPREDEFINED_VALUES = {\n    'm1_mass': 5.00,    # kg (block on incline)\n    'm2_mass': 7.50,    # kg (hanging block)\n    'angle': 30.0,      # degrees\n    'mu_s': 0.40,\n    'mu_k': 0.30,\n    'units': 'SI'\n}\n\nTEST_VALUES = {\n    'm1_mass': 5.00,    # kg\n    'm2_mass': 7.50,    # kg\n    'angle': 30.0,      # degrees\n    'mu_s': 0.40,\n    'mu_k': 0.30,\n    'units': 'SI'\n}\n\n# Hardcoded correct answer for TEST_VALUES (acceleration magnitude in m/s^2)\n# Computed with g=9.80665, theta=30 deg, values in SI\nCORRECT_ANSWER = 2.90327584\n\n# Tolerances for numeric comparison\nABS_TOL = 1e-6\nREL_TOL = 1e-6\n\n\ndef lcg(seed):\n    a = 1103515245\n    c = 12345\n    m = 2 ** 31\n    return (a * seed + c) % m\n\n\ndef compute_from_inputs(m1_input, m2_input, angle_deg, mu_s, mu_k, units='SI'):\n    # Convert units if needed (USCS -> lb to kg)\n    if units == 'USCS':\n        m1_kg = float(m1_input) * 0.45359237\n        m2_kg = float(m2_input) * 0.45359237\n    else:\n        m1_kg = float(m1_input)\n        m2_kg = float(m2_input)\n\n    g = 9.80665\n    theta = math.radians(float(angle_deg))\n    N = m1_kg * g * math.cos(theta)\n    f_s_max = mu_s * N\n    f_k = mu_k * N\n    m1_g_parallel = m1_kg * g * math.sin(theta)\n\n    thresh_descend = m1_g_parallel + f_s_max\n    will_descend = (m2_kg * g) > thresh_descend\n\n    thresh_ascend = m1_g_parallel - f_s_max\n    will_ascend = (m2_kg * g) < thresh_ascend\n\n    if not will_descend and not will_ascend:\n        a = 0.0\n        direction = 'static'\n        T = None\n        net_force = 0.0\n    else:\n        if will_descend:\n            net_force = m2_kg * g - (m1_g_parallel + f_k)\n            a = net_force / (m1_kg + m2_kg)\n            direction = 'm2_down'\n            T = m2_kg * g - m2_kg * a\n        else:\n            net_force = (m1_g_parallel - f_k) - m2_kg * g\n            a = abs(net_force / (m1_kg + m2_kg))\n            direction = 'm2_up'\n            T = m2_kg * g + m2_kg * a\n\n    intermediate_values = {\n        'theta_rad': theta,\n        'sin_theta': math.sin(theta),\n        'cos_theta': math.cos(theta),\n        'N': N,\n        'm1_g_parallel': m1_g_parallel,\n        'f_s_max': f_s_max,\n        'f_k': f_k\n    }\n\n    return {\n        'm1_kg': m1_kg,\n        'm2_kg': m2_kg,\n        'g': g,\n        'motion_direction': direction,\n        'net_force_N': net_force if 'net_force' in locals() else 0.0,\n        'tension_N': T,\n        'acceleration_exact': a,\n        'intermediate_values': intermediate_values\n    }\n\n\ndef generate(case_=0):\n    \"\"\"\n    case_:\n      0 -> deterministic pseudo-random parameters\n      1 -> use PREDEFINED_VALUES\n      2 -> use TEST_VALUES and verify against CORRECT_ANSWER\n\n    Returns dict with 'params', 'correct_answers', 'nDigits', 'sigfigs', 'test_results'\n    \"\"\"\n\n    test_results = {'pass': None, 'message': ''}\n\n    # Choose parameters\n    if case_ == 0:\n        # deterministic pseudo-random\n        seed = 42\n        seed = lcg(seed)\n        m1_input = 2.0 + (seed % 1400) / 100.0\n        seed = lcg(seed)\n        m2_input = 1.0 + (seed % 1900) / 100.0\n        seed = lcg(seed)\n        angle_deg = 10.0 + (seed % 51)\n        seed = lcg(seed)\n        mu_s = 0.10 + (seed % 51) / 100.0\n        seed = lcg(seed)\n        mu_k = max(0.01, mu_s - (seed % 30) / 100.0)\n        units = 'SI'\n    elif case_ == 1:\n        m1_input = PREDEFINED_VALUES['m1_mass']\n        m2_input = PREDEFINED_VALUES['m2_mass']\n        angle_deg = PREDEFINED_VALUES['angle']\n        mu_s = PREDEFINED_VALUES['mu_s']\n        mu_k = PREDEFINED_VALUES['mu_k']\n        units = PREDEFINED_VALUES.get('units', 'SI')\n    elif case_ == 2:\n        m1_input = TEST_VALUES['m1_mass']\n        m2_input = TEST_VALUES['m2_mass']\n        angle_deg = TEST_VALUES['angle']\n        mu_s = TEST_VALUES['mu_s']\n        mu_k = TEST_VALUES['mu_k']\n        units = TEST_VALUES.get('units', 'SI')\n    else:\n        raise ValueError(f'Unknown case_: {case_}')\n\n    # Compute\n    comp = compute_from_inputs(m1_input, m2_input, angle_deg, mu_s, mu_k, units=units)\n\n    nDigits = 3\n    sigfigs = 3\n\n    acceleration_exact = comp['acceleration_exact']\n    acceleration_mag = round(acceleration_exact, nDigits)\n\n    params = {\n        'm1': 'block on incline',\n        'm2': 'hanging block',\n        'units_system': units,\n        'm1_mass': round(comp['m1_kg'], 6),\n        'm2_mass': round(comp['m2_kg'], 6),\n        'angle': round(angle_deg, 3),\n        'g': comp['g'],\n        'net_force_N': round(comp['net_force_N'], 6) if comp.get('net_force_N') is not None else None,\n        'tension_N': round(comp['tension_N'], 6) if comp.get('tension_N') is not None else None,\n        'mu_s': mu_s,\n        'mu_k': mu_k,\n        'intermediate': comp['intermediate_values']\n    }\n\n    correct_answers = {\n        'acceleration': acceleration_mag,\n        'acceleration_exact_m_s2': acceleration_exact,\n        'units': 'm/s^2',\n        'note': 'Acceleration magnitude (0 if system static).'\n    }\n\n    # If test case, verify against hardcoded CORRECT_ANSWER\n    if case_ == 2:\n        if CORRECT_ANSWER is None:\n            test_results['pass'] = None\n            test_results['message'] = 'No test case scenario due to missing correct answer.'\n        else:\n            expected = CORRECT_ANSWER\n            computed = acceleration_exact\n            passed = False\n            if isinstance(expected, (int, float)):\n                diff = abs(computed - expected)\n                passed = diff <= max(ABS_TOL, REL_TOL * abs(expected))\n            else:\n                passed = str(computed) == str(expected)\n\n            test_results['pass'] = 1 if passed else 0\n            test_results['message'] = (\n                f\"PASS — computed={computed}, expected={expected}\"\n                if passed\n                else f\"FAIL — computed={computed}, expected={expected}\"\n            )\n    else:\n        test_results['pass'] = None\n        test_results['message'] = ''\n\n    return {\n        'params': params,\n        'correct_answers': correct_answers,\n        'nDigits': nDigits,\n        'sigfigs': sigfigs,\n        'test_results': test_results\n    }\n\n\nif __name__ == '__main__':\n    import pprint\n    print('Case 0 (pseudo-random deterministic):')\n    pprint.pprint(generate(0))\n    print('\\nCase 1 (PREDEFINED_VALUES):')\n    pprint.pprint(generate(1))\n    print('\\nCase 2 (TEST_VALUES with verification):')\n    pprint.pprint(generate(2))",
        "solution_html": "<pl-solution-panel>\\n    <pl-hint level=\"1\" data-type=\"text\">\\n        To find the acceleration of block [[params.m2]], we need to analyze the forces acting on both blocks and apply Newton's second law.\\n    </pl-hint>\\n    <pl-hint level=\"2\" data-type=\"text\">\\n        For block [[params.m1]], the forces acting on it are its weight component along the incline and the tension in the string.\\n    </pl-hint>\\n    <pl-hint level=\"3\" data-type=\"text\">\\n        The net force on block [[params.m1]] can be expressed as:  \\n        $$ F_{net1} = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - T $$\\n    </pl-hint>\\n    <pl-hint level=\"4\" data-type=\"text\">\\n        For block [[params.m2]], the downward force is its weight and the tension acts upward:  \\n        $$ F_{net2} = T - [[params.m2_mass]] [[params.g]] $$\\n    </pl-hint>\\n    <pl-hint level=\"5\" data-type=\"text\">\\n        According to Newton's second law, we can write the equations for both blocks:\\n        $$ [[params.m1_mass]] a = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - T $$\\n        $$ [[params.m2_mass]] a = T - [[params.m2_mass]] [[params.g]] $$\\n    </pl-hint>\\n    <pl-hint level=\"6\" data-type=\"text\">\\n        Now, let's eliminate T by adding the two equations:\\n        $$ [[params.m1_mass]] a + [[params.m2_mass]] a = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] [[params.g]] $$\\n    </pl-hint>\\n    <pl-hint level=\"7\" data-type=\"text\">\\n        We can factor out the acceleration as follows:\\n        $$ ([[params.m1_mass]] + [[params.m2_mass]]) a = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] [[params.g]] $$\\n    </pl-hint>\\n    <pl-hint level=\"8\" data-type=\"text\">\\n        Rearranging this for acceleration gives us:\\n        $$ a = \\frac{[[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] [[params.g]]}{[[params.m1_mass]] + [[params.m2_mass]]} $$\\n    </pl-hint>\\n    <pl-hint level=\"9\" data-type=\"text\">\\n        Next, we need to substitute values for [[params.m1_mass]], [[params.angle]], [[params.m2_mass]], and the gravitational constant [[params.g]] (approximately 9.81 m/s²).\\n    </pl-hint>\\n    <pl-hint level=\"10\" data-type=\"text\">\\n        After substitution, we can express the final acceleration as:\\n        $$ a = \\frac{[[params.m1_mass]] \\cdot [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] \\cdot [[params.g]]}{[[params.m1_mass]] + [[params.m2_mass]]} $$\\n    </pl-hint>\\n    <pl-hint level=\"11\" data-type=\"text\">\\n        This will give you the magnitude of the acceleration of block [[params.m2]] in m/s² as follows:\\n        $$ a = [[correct_answers.acceleration]] \\text{ m/s}^2 $$\\n    </pl-hint>\\n</pl-solution-panel>",
        "metadata": {
            "question": "A block of mass $m_1$ rests on an incline of angle $\\theta = 20^\\circ$. The coefficients of static and kinetic friction are $\\mu_s = 0.8$ and $\\mu_k = 0.5$. It is connected via a massless string over a massless and frictionless pulley. Block $m_2$ has mass 2 kg. If $m_1 = 1.5kg$, what's the magnitude of the acceleration of the $m_2$ (in m/s^2)?",
            "title": "InclineBlockAcceleration",
            "topic": [
                "Dynamics",
                "Newton's Second Law of Motion"
            ],
            "relevantCourses": [],
            "isAdaptive": "True"
        }
    },
    "q_metadata": {
        "question": "A block of mass $m_1$ rests on an incline of angle $\\theta = 20^\\circ$. The coefficients of static and kinetic friction are $\\mu_s = 0.8$ and $\\mu_k = 0.5$. It is connected via a massless string over a massless and frictionless pulley. Block $m_2$ has mass 2 kg. If $m_1 = 1.5kg$, what's the magnitude of the acceleration of the $m_2$ (in m/s^2)?",
        "title": "InclineBlockAcceleration",
        "topic": [
            "Dynamics",
            "Newton's Second Law of Motion"
        ],
        "relevantCourses": [],
        "isAdaptive": "True"
    },
    "initial": {},
    "qmeta": {
        "rendering_data": [
            {
                "question_template": "A block of mass [[params.m1_mass]] kg rests on an incline of angle [[params.angle]] degrees. The coefficients of static and kinetic friction are [[params.mu_s]] (static) and [[params.mu_k]] (kinetic) respectively. It is connected via a massless string over a massless and frictionless pulley. Block [[params.m2]] has mass [[params.m2_mass]] kg. If block [[params.m1]] has a mass of [[params.m1_mass]] kg, what's the magnitude of the acceleration of block [[params.m2]] (in m/s²)?",
                "questionInputs": [
                    {
                        "name": "acceleration",
                        "label": "Acceleration (m/s²)",
                        "qtype": "number",
                        "comparison": "sigfig",
                        "digits": 2,
                        "units": "m/s²"
                    }
                ],
                "image": null
            }
        ],
        "solution_render": {
            "solution_hint": [
                "To find the acceleration of block [[params.m2]], we need to analyze the forces acting on both blocks and apply Newton's second law.",
                "For block [[params.m1]], the forces acting on it are its weight component along the incline and the tension in the string.",
                "The net force on block [[params.m1]] can be expressed as:  $$ F_{net1} = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - T $$",
                "For block [[params.m2]], the downward force is its weight and the tension acts upward:  $$ F_{net2} = T - [[params.m2_mass]] [[params.g]] $$",
                "According to Newton's second law, we can write the equations for both blocks: $$ [[params.m1_mass]] a = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - T $$ $$ [[params.m2_mass]] a = T - [[params.m2_mass]] [[params.g]] $$",
                "Now, let's eliminate T by adding the two equations: $$ [[params.m1_mass]] a + [[params.m2_mass]] a = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] [[params.g]] $$",
                "We can factor out the acceleration as follows: $$ ([[params.m1_mass]] + [[params.m2_mass]]) a = [[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] [[params.g]] $$",
                "Rearranging this for acceleration gives us: $$ a = \\frac{[[params.m1_mass]] [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] [[params.g]]}{[[params.m1_mass]] + [[params.m2_mass]]} $$",
                "Next, we need to substitute values for [[params.m1_mass]], [[params.angle]], [[params.m2_mass]], and the gravitational constant [[params.g]] (approximately 9.81 m/s²).",
                "After substitution, we can express the final acceleration as: $$ a = \\frac{[[params.m1_mass]] \\cdot [[params.g]] \\times \\text{sin}([[params.angle_{rad}]]) - [[params.m2_mass]] \\cdot [[params.g]]}{[[params.m1_mass]] + [[params.m2_mass]]} $$",
                "This will give you the magnitude of the acceleration of block [[params.m2]] in m/s² as follows: $$ a = [[correct_answers.acceleration]] \\text{ m/s}^2 $$"
            ]
        },
        "qtype": [
            "numeric"
        ],
        "title": "InclineBlockAcceleration",
        "topic": [
            "Dynamics",
            "Newton's Second Law of Motion"
        ],
        "relevantCourses": [],
        "tags": [],
        "prereqs": [],
        "isAdaptive": "True",
        "createdBy": "",
        "language": [
            "javascript",
            "python"
        ],
        "ai_generated": true
    }
}