Unnamed: 0,Question Title,info.json,question.html,server.js,solution.html,server.py,properties.js,question,uuid,title,stem,topic,tags,prereqs,isAdaptive,createdBy,qType,nSteps,updatedBy,difficulty,codelang,resources,stepType,dificulty,relevant_courses,topics
0,3dMoment1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D moments"",
    ""stem"":""Statics"",
    ""topic"": ""3D moments"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dMoment1.png""></pl-figure>
   <p>Determine the moment about point O in (${{params.unitsForce}} {{params.unitsDist}}$) caused by the force $ \mathbf{F} = {{params.force}}$ $ {{params.unitsForce}}$ acting on the beam.</p>
   <p>Let the lengths $\mathbf{L}_1 = {{params.l1}}$ $ {{params.unitsDist}} $, $\mathbf{L}_2 = {{params.l2}}$ $ {{params.unitsDist}} $, $\mathbf{L}_3 = {{params.l3}}$ $ {{params.unitsDist}} $</p>
   <p>and $\mathbf{V}_1 = {{params.v1}}$ $ {{params.unitsDist}} $, $\mathbf{V}_2 = {{params.v2}}$ $ {{params.unitsDist}} $, $\mathbf{V}_3 = {{params.v3}}$ $ {{params.unitsDist}} $</p>
</pl-question-panel>

<pl-number-input answers-name=""momenti"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{i}$ =""></pl-number-input>
<pl-number-input answers-name=""momentj"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{j}$ =""></pl-number-input>
<pl-number-input answers-name=""momentk"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{k}$ =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 force = math.randomInt(5,50);
 l1= math.randomInt(5,20);
 l2= math.round(l1*.5 *100) /100;
 l3= math.round(l1*.7*100)/100;
 v1= math.round(l1*1.3*100)/100;
 v2= math.round(v1*1.3*100)/100;
 v3= math.round(l3*.7*100)/100;


// force = 5
// l1= 10
// l2= 5
// l3 = 7

// v1 = 13
// v2 = 15
// v3 = 5


  //R= [l2,l1,l3];

  //F= [v1-l1,v2-v2,v3-l3]
  Fx = force * ((v2-l2)/math.sqrt((v1-l1)**2+(v2-l2)**2+(v3-l3)**2));
  Fy = force * ((v1-l1)/math.sqrt((v1-l1)**2+(v2-l2)**2+(v3-l3)**2));
  Fz = force * ((v3-l3)/math.sqrt((v1-l1)**2+(v2-l2)**2+(v3-l3)**2));

 momenti= (l1*Fz-l3*Fy);
momentj = -(l2*Fz - l3*Fx);
 momentk = (l2*Fy-l1*Fx);

 
    
    


data = {
    params: {
       force:force,
       l1:l1,
       l2:l2,
       l3:l3,
       v1:v1,
       v2:v2,
       v3:v3,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
       
},

    correct_answers: { 
    momenti:momenti,
    momentj:momentj,
    momentk:momentk,

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dMoment1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First, you must identify the force vector. The red vector in the picture is just there to show the location and direction of the force, but it is not the actual force vector. In order to obtain the force vector you must multiply the force $\mathbf{F} = {{params.force}} $ to the unit vector of the red vector. </pl-hint>
    <pl-hint level=""2"" data-type=""text"">To obtain the unit vector of the red vector, you must identify the location of the head and tail of the red vector. In our case, the tail of the red vector is equal to $ L_2 \hat{i} + L_1 \hat{j} + L_3 \hat{k}$ and the head of the red vector is equal to $ V_2 \hat{i} + V_1 \hat{j} + V_3 \hat{k}$. Now we can find the direction of the red vector by moving from the tail to the head. 
        Moving from the tail to the head $ \implies (V_2 - L_2 ) \hat{i} + (V_1 - L_1 ) \hat{j} + (V_3 - L_3) \hat{k} $. Now that we have the direction we can divide the length of the vector by itself to obtain the unit vector. $ \frac {(V_2 - L_2 ) \hat{i} + (V_1 - L_1 ) \hat{j} + (V_3 - L_3) \hat{k}}{\sqrt{(V_2 - L_2 )^2 + (V_1 - L_1 )^2 + (V_3 - L_3)^2}} $
        </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        <ul> 
            Now all we have to do is multiply the force by the unit vetcor.
        <li> $\mathbf{\vec{F}} =   \mathbf(F) \frac {(V_2 - L_2 ) \hat{i} + (V_1 - L_1 ) \hat{j} + (V_3 - L_3) \hat{k}}{\sqrt{(V_2 - L_2 )^2 + (V_1 - L_1 )^2 + (V_3 - L_3)^2}} $ </li>
        Now that we have the true force vector we can now take the moment about point O using the cross product $M_o = \vec{d} X \vec{F} $
        </ul>
    </pl-hint>



    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            When computing the moment about point O using the cross product we must chose any distance ($\vec{d}$) starting from the point O and ending anywhere along the line of action of the force vector.
            In our case we can just use the blue beam since it starts at point o and ends at the tail of the force vector.  
        <li>$\vec{d} = L_2 \hat{i} +L_1 \hat{j} + L_3 \hat{k}$</li>
        <li>$M_o = \vec{d} X \vec{F} $ $\implies $ $M_o = (L_2, L_1,L_3) X (F_x,F_y,F_z)$ $\implies $  $M_o = ({{correct_answers.momenti}}) \hat{i} + ({{correct_answers.momentj}}) \hat{j} + ({{correct_answers.momentk}}) \hat{k} $   </li>
        
        </ul>
    </pl-hint>


",,,"determine the moment about point o in ($n \cdot m$) caused by the force $ \mathbf{f} = 50$ $n$ acting on the beam.
let the lengths $\mathbf{l}_1 = 2$ $m$, $\mathbf{l}_2 = 3$ $m$, $\mathbf{l}_3 = 4$ $m$
and $\mathbf{v}_1 = 5$ $m$, $\mathbf{v}_2 = 6$ $m$, $\mathbf{v}_3 = 7$ $m$",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d moments,Statics,3d moments,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 103","Static Equilibrium, Distributed Forces"
1,3dMoment2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D moments"",
    ""stem"":""Statics"",
    ""topic"": ""3D moments"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dMoment2.png""></pl-figure>
    <p> Compute the moment about the point O in (${{params.unitsForce}} {{params.unitsDist}}$) as result of the force $ \mathbf{F} = {{params.force}}$ $ {{params.unitsForce}}$ acting at the end of the beam.</p>
    <p> Let the lengths $ \mathbf{L}_1 = {{params.l1}}$ ${{params.unitsDist}} $,  $ \mathbf{L}_2 = {{params.l2}}$ ${{params.unitsDist}} $, and $ \mathbf{L}_3 = {{params.l3}}$ ${{params.unitsDist}} $ </p>
</pl-question-panel>

<pl-number-input answers-name=""momenti"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{i}$ =""></pl-number-input>
<pl-number-input answers-name=""momentj"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{j}$ =""></pl-number-input>
<pl-number-input answers-name=""momentk"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{k}$ =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 force = math.randomInt(10,100);
 l1 = math.randomInt(5,50);
 l2 = math.round(l1*.2*100)/100;
 l3 = math.round(l1*.8*100)/100;



 Fx = force* (l2/Math.sqrt(l1**2+l2**2+l3**2));
 Fy = force* (-l1/Math.sqrt(l1**2+l2**2+l3**2));
 Fz = force* (-l3/Math.sqrt(l1**2+l2**2+l3**2));

 momenti = (l3*Fy);
 momentj = -((Fz*(l2+l1))+Fx*l3);
 momentk = Fy*(l1+l2);




 
    
    


data = {
    params: {
       force:force,
       l1:l1,
       l2:l2,
       l3:l3,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
       
},

    correct_answers: { 
    momenti:momenti,
    momentj:momentj,
    momentk:momentk,

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dMoment2.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First, you must identify the force vector. The red vector in the picture is just there to show the location and direction of the force, but it is not the actual force vector. In order to obtain the force vector you must multiply the force $\mathbf{F} = {{params.force}} $ to the unit vector of the red vector. </pl-hint>
    <pl-hint level=""2"" data-type=""text"">To obtain the unit vector of the red vector, you must identify two locations along the line of action of the red vector. In our case, the first point can be the tail of the red vector, which is equal to $ L_1 \hat{i} + L_1 \hat{j} + 0 \hat{k}$, lets call this $\vec{T}$ and for our second point we can use a point along the line of action which is equal to $ (L_1+L_2) \hat{i} + 0 \hat{j} - L_3 \hat{k}$, lets call this $\vec{R}$. Now we can find the direction of the red vector by moving from the tail to our second point. 
            Moving from the tail $\vec{T}$ to our second point $\vec{R}$  $ \implies \vec{R}-\vec{T} = ((L_2 + L_1)-L_1 ) \hat{i} + (0-L_1) \hat{j} + (-L_3-0 )\hat{k} = L_2 \hat{i} - L_1 \hat{j} - L_3\hat{k} $. Now that we have the direction we can divide the length of the vector by itself to obtain the unit vector. $ \frac {L_2 \hat{i} - L_1 \hat{j} - L_3\hat{k}}{\sqrt{(L_2)^2 + (L_1)^2 + (L_3)^2}} $</pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul> 
                    Now all we have to do is multiply the force by the unit vector.
                    <li>$\mathbf{\vec{F}} =   \mathbf(F) \frac {L_2 \hat{i} - L_1 \hat{j} - L_3\hat{k}}{\sqrt{(L_2)^2 + (L_1)^2 + (L_3)^2}} $ </li>
                    Now that we have the true force vector we can now take the moment about point O using the cross product $M_o = \vec{R} X \vec{F} $</li>
                    <li>Note: This statement is also true $M_o = \vec{T} X \vec{F} $</li>
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
           <li>It is important to note that when computing the moment about o we chose a vector that starts at o and ends somewhere along the line of action 
           of the force vector ($\vec{F}$). Take a look at the picture and notice the black dotted line, that line represents the line of action of the force vector.
           Any vector that starts at o and ends at the line will for computing the moment about point o. 
           That is why both of these statements are true $ \implies M_o = \vec{T} X \vec{F} =  \vec{R} X \vec{F}$.
          
           </li>
        </ul>
    </pl-hint>


",,,"Refer to the diagram labeled ""3dMoment2.png"".  Compute the moment about the point O in specific units (e.g., N.m) as a result of the force F = specific value N (for example) acting at the end of the beam.  Given:  Force: F = specific value N (for example) Lengths: L1 = specific value m (for example) L2 = specific value m (for example) L3 = specific value m (for example) Determine:  Moment about point O in the i direction Moment about point O in the j direction Moment about point O in the k direction",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d moments,Statics,3d moments,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 103, ME 110",3D Rigid Body Mechanics
2,3dMoment3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D moments"",
    ""stem"":""Statics"",
    ""topic"": ""3D moments"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dMoment3.png""></pl-figure>
<p> Determine the resultant moment produced by the forces $\mathbf{F}_R = {{params.forceR}}$ ${{params.unitsForce}} $ and $\mathbf{F}_G = {{params.forceG}}$ ${{params.unitsForce}} $ about point O in (${{params.unitsForce}} {{params.unitsDist}}$).</p>
<p> Let the lengths $ \mathbf{L}_1 = {{params.l1}}$ ${{params.unitsDist}} $,  $ \mathbf{L}_2 = {{params.l2}}$ ${{params.unitsDist}} $, and $ \mathbf{L}_3 = {{params.l3}}$ ${{params.unitsDist}} $ </p>

</pl-question-panel>

<pl-number-input answers-name=""momenti"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{i}$ =""></pl-number-input>
<pl-number-input answers-name=""momentj"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{j}$ =""></pl-number-input>
<pl-number-input answers-name=""momentk"" comparison=""sigfig"" digits=""3"" label=""Moment about point O $\hat{k}$ =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 forceG = math.randomInt(100,900);
 forceR = forceG*0.5
 l1 = math.randomInt(5,10);
 l2 = math.round(l1*0.4*100)/100
 l3 = math.round(l1*0.7*100)/100



FRx= forceR*(l2/Math.sqrt(l2**2+l3**2+l1**2))
FRy= forceR*(-l3/Math.sqrt(l2**2+l3**2+l1**2))
FRz= forceR*(-l1/Math.sqrt(l2**2+l3**2+l1**2))

FGx= 0
FGy= forceG*(l3/Math.sqrt(l3**2+l1**2))
FGz= forceG*(-l1/Math.sqrt(l3**2+l1**2))








 momentiR = (-l1*FRy);
 momentjR = -(-l1*FRx);
 momentkR = (0);

 momentiG = (-l1*FGy);
 momentjG = -(-l1*FGx);
 momentkG = (0);

 momenti = momentiG+ momentiR
 momentj = momentjG+ momentjR
 momentk = momentkG+ momentkR





 
    
    


data = {
    params: {
       forceG:forceG,
       forceR:forceR,
       l1:l1,
       l2:l2,
       l3:l3,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
     



       
},

    correct_answers: { 
    momenti:momenti,
    momentj:momentj,
    momentk:momentk,

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dMoment3.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> First identify the unit vectors of both the red and green force vectors.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> To find the unit vectors of both the green and red force vectors first you must find the direction of the vector.
        You can find the direction of the vectors by identifying two points along the line of action of each vector.
        Lable the point where the two forces are coming out of (C). And lable the ends of the ropes that are on the ground points R and G. R for the red force and G for the green force. 
        Now to find the direction you can do R-C and G-C</pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul> 
                    finding direction of green and red force vectors.
                <li> Red vector: R-C = $(L_2,-L_3,0) - (0,0,L_1)$ = $(L_2,-L_3,-L_1)$ </li>
                <li> Green vector: G-C =  $ (0,L_3,0) - (0,0,L_1)$ = $(0,L_3,-L_1) $</li>
                    Now that we have the direction of both of the vectors we can find the unit vectors by dividing the lengths of the vectors by its self.
                <li> Unit vector R:  $\vec{U}_R  $ = $\frac{(L_2,-L_3,-L_1) }{\sqrt{(L_2)^2+(L_3)^2+(L_1)^2}}$</li>
                <li> Unit vector G:  $\vec{U}_G  $ = $\frac{(0,L_3,-L_1)}{\sqrt{(L_3)^2+ (L_1)^2}}$</li>
                   Now that we have the unit vectors we can finally find the force vectors $\vec{F}_R$ and $\vec{F}_G$
                <li> $\vec{F}_R$ = $(\mathbf{F}_R)(\vec{U}_R )$ = $(\mathbf{F}_R) \frac{(L_2,-L_3,-L_1) }{\sqrt{(L_2)^2+(L_3)^2+(L_1)^2}}$</li>
                <li> $\vec{F}_G$ = $(\mathbf{F}_G)(\vec{U}_G )$ = $(\mathbf{F}_G) \frac{(0,L_3,-L_1)}{\sqrt{(L_3)^2+ (L_1)^2}}$</li>
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
           <li>It is important to note that when computing the moment about o we chose a vector that starts at o and ends somewhere along the line of action 
           of the force vectors. In our case the vector that starts at o and ends along the line of action of the force vectors is $\vec{d} = 0\hat{i}+0\hat{j}+L_1\hat{k}$</li>
           <li>$M_o = M_R + M_G$ = $ [\vec{d} X \vec{F}_R] + [\vec{d} X \vec{F}_G] $</li>
          
          
        </ul>
    </pl-hint>

",,,"determine the resultant moment produced by the forces $\mathbf{f}_r = 10$ n and $\mathbf{f}_g = -5$ n about point o in (n-m).
let the lengths $ \mathbf{l}_1 = 2$ m,  $ \mathbf{l}_2 = 3$ m, and $ \mathbf{l}_3 = 4$ m.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d moments,Statics,3d moments,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,,"Static Equilibrium, Distributed Forces"
3,3dMoment4,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D moments"",
    ""stem"":""Statics"",
    ""topic"": ""3D moments"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dMoment4.png""></pl-figure>
<p> Determine the resultant moments produced by the forces $\mathbf{F}_R = {{params.forceR}}$ ${{params.unitsForce}} $, $\mathbf{F}_G = {{params.forceG}}$ ${{params.unitsForce}} $,and $\mathbf{F}_P = {{params.forceP}}$ ${{params.unitsForce}} $ about each axis in (${{params.unitsForce}} {{params.unitsDist}}$).</p>
<p> Let the lengths $ \mathbf{L}_1 = {{params.l1}}$ ${{params.unitsDist}} $ and $ \mathbf{L}_2 = {{params.l2}}$ ${{params.unitsDist}} $ </p>
<p> Note: Be sure to make clockwise rotation negitive (-) and counter clockwise rotation as positive (+)</p>

</pl-question-panel>

<pl-number-input answers-name=""momentx"" comparison=""sigfig"" digits=""3"" label=""Moment about x-axis =""></pl-number-input>
<pl-number-input answers-name=""momenty"" comparison=""sigfig"" digits=""3"" label=""Moment about y-axis =""></pl-number-input>
<pl-number-input answers-name=""momentz"" comparison=""sigfig"" digits=""3"" label=""Moment about z-axis =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

forceP =math.randomInt(10,50);
forceG =math.randomInt(10,50);
forceR =math.randomInt(10,50);

l1 = math.randomInt(5,20);
l2 = math.round(l1*1.3*100)/100;

momentx = l1*forceR+l1*forceP+l1*forceG-l1*forceP
momenty = -forceG*l2-forceG*l1;
momentz = forceP*l2-forceG*l1-forceR*l1;

data = {
    params: {
       forceG:forceG,
       forceR:forceR,
       forceP:forceP,
       l1:l1,
       l2:l2,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
     



       
},

    correct_answers: { 
    momentx:momentx,
    momenty:momenty,
    momentz:momentz,

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dMoment4.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">Identify which forces will have an effect along each of the axis</pl-hint>
    <pl-hint level=""2"" data-type=""text"">Any force that is parallel to the axises will not induce a moment about that axis.  </pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                Forces that have a moment about each axis:
                <li>X-axis: $F_R,F_P,F_P,$ and $F_G$</li>
                <li>Y-axis: $ F_G$ and $F_G  $</li>
                <li>Z-axis: $F_P,F_G,$ and $F_R$</li>

                Now that you have the forces that can cause a moment about each axis, you can multiply them by their distance away from the axis to fidn the moment. 
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            Find Moment about eahc axis.
           <Li>Moment X-axis: $\Sigma{M}_x=(L_1)(F_R) + (L_1)(F_P)+(L_1)(F_G)-(L_1)(F_P)$</Li>
           <li>Moment Y-axis: $\Sigma{M}_y = -(L_2)(F_G)-(L_1)(F_G)$</li>
           <li>Moment Z-axis: $\Sigma{M}_z = (L_2)(F_P)-(L_1)(F_G)-(L_1)(F_R)$</li>
           Note: counter clockwise rotation is denoted as positve(+) while clockwise rotation is negative (-)

        </ul>
    </pl-hint>

",,,"determine the resultant moments produced by the forces $\mathbf{f}_r = 10$ n, $\mathbf{f}_g = -5$ n, and $\mathbf{f}_p = 8$ n about each axis in (n-m).
let the lengths $ \mathbf{l}_1 = 2$ m and $ \mathbf{l}_2 = 3$ m.
note: be sure to make clockwise rotation negative (-) and counterclockwise rotation as positive (+).",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d moments,Statics,3d moments,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 103","Statics and Mechanics, Static Equilibrium, Vector Analysis"
4,Equilibrium1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D particle Equilibrium"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
} ","<pl-question-panel>
<pl-figure file-name=""3dParticleEquilibrium1.png""></pl-figure>

<p>Compute the missing force vector that will allow for static equilibrium.</p>
<p>Provide the Magnitude of the force and the unit vector of the missing force vector.</p>
<p>Let the known forces be $\mathbf{F}_R = {{params.fr}} {{params.unitsForce}}$, $\mathbf{F}_O = {{params.fo}} {{params.unitsForce}}$, $\mathbf{F}_P = {{params.fp}} {{params.unitsForce}}$, and $\mathbf{F}_B = {{params.fb}} {{params.unitsForce}}$. </p>
<p>And let the lengths be $\mathbf{L}_1 = {{params.l1}} {{params.unitsDist}}$, $\mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$, and $\mathbf{L}_3 = {{params.l3}} {{params.unitsDist}}$. </p>
</pl-question-panel>

<pl-number-input answers-name=""F"" comparison=""sigfig"" digits=""3"" label=""Magnitude of force =""></pl-number-input>
<pl-number-input answers-name=""Ufx"" comparison=""sigfig"" digits=""3"" label=""$\hat{i}$ component of unit vector =""></pl-number-input>
<pl-number-input answers-name=""Ufy"" comparison=""sigfig"" digits=""3"" label=""$\hat{j}$ component of unit vector =""></pl-number-input>
<pl-number-input answers-name=""Ufz"" comparison=""sigfig"" digits=""3"" label=""$\hat{k}$ component of unit vector =""></pl-number-input>




","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

    fp = math.randomInt(10,200);
    fb = math.round(fp*(math.randomInt(115,130)/100));
    fo = math.round(fb*(math.randomInt(140,160)/100));
    fr = math.round(fo*(math.randomInt(130,150)/100));



    l2 = math.randomInt(5,25);
    l1 = math.round(l2*(math.randomInt(180,200)/100));
    l3 = math.round(l1*(math.randomInt(120,140)/100));





    //vect Fo
//(-l3,-l1,l1)
lengtho = math.sqrt(l3**2+l1**2+l1**2);
xo = fo*(-l3/lengtho);
yo = fo*(-l1/lengtho);
zo = fo*( l1/lengtho);

    //vec Fp
//(-l2,l2,0)
lengthp = math.sqrt(l2**2+l2**2);
xp = fp*(-l2/lengthp);
yp = fp*(l2/lengthp);
zp = 0;

    //vec FB
//(l2,l1,l2)
lengthb = math.sqrt(l2**2+l2**2+l1**2);
xb = fb*(l2/lengthb);
yb = fb*(l1/lengthb);
zb = fb*(l2/lengthb);

    //vec FR
//(l2,-l2,-l3)
lengthr = math.sqrt(l2**2+l2**2+l3**2);
xr = fr*(l2/lengthr);
yr = fr*(-l2/lengthr);
zr = fr*(-l3/lengthr);

Fx = -(xo+xp+xb+xr);
Fy = -(yo+yr+yp+yb);
Fz = -(zr+zo+zb);
    
F = math.sqrt(Fx**2+Fy**2+Fz**2);
Ufx = Fx/F;
Ufy = Fy/F;
Ufz = Fz/F;



data = {
    params: {
       
       l1:l1,
       l2:l2,
       l3:l3,
       fr:fr,
       fo:fo,
       fp:fp,
       fb:fb,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
     



       
},

    correct_answers: { 
   F:F,
   Ufx:Ufx,
   Ufy:Ufy,
   Ufz:Ufz,

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dParticleEquilibrium1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">The first step is to set convert all of the forces into forces vectors.This can be done by multiplying the force magnitude by the unit vector that follows the path of the force.</pl-hint>
    <pl-hint level=""2"" data-type=""text"">To compute the unit vector all you have to due is divide the length of the vector by its self.</pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                Computing the Force vectors:
                <li>$\vec{F}_O = (F_O)(\vec{U}_O)$. let the unit vector $\vec{U}_O = \frac{-L_3\hat{i}-L_1\hat{j}+L_1\hat{k}}{\sqrt{(L_3)^2+(L_1)^2+(L_1)^2}}$ </li>
                <p>So the force vector $\vec{F}_O = (F_O)\frac{-L_3\hat{i}-L_1\hat{j}+L_1\hat{k}}{\sqrt{(L_3)^2+(L_1)^2+(L_1)^2}}$.</p>
              
                <li>$\vec{F}_P = (F_P)(\vec{U}_P)$. let the unit vector $\vec{U}_P = \frac{-L_2\hat{i}+L_2\hat{j}+0\hat{k}}{\sqrt{(L_2)^2+(L_2)^2}}$ .</li>
                <p>So the force vector $\vec{F}_P = (F_P) \frac{-L_2\hat{i}+L_2\hat{j}+0\hat{k}}{\sqrt{(L_2)^2+(L_2)^2}}$.</p>
              
                <li>$\vec{F}_B = (F_B)(\vec{U}_B)$. let the unit vector $\vec{U}_B = \frac{L_2\hat{i}+L_1\hat{j}+L_2\hat{k}}{\sqrt{(L_2)^2+(L_2)^2+(L_1)^2}}$ .</li>
                <p>So the force vector $\vec{F}_B = (F_B) \frac{L_2\hat{i}+L_1\hat{j}+L_2\hat{k}}{\sqrt{(L_2)^2+(L_2)^2+(L_1)^2}}$</p>

                <li>$\vec{F}_R = (F_R)(\vec{U}_R)$. let the unit vector $\vec{U}_R = \frac{L_2\hat{i}-L_2\hat{j}-L_3\hat{k}}{\sqrt{(L_2)^2+(L_2)^2+(L_3)^2}}$ .</li>
                <p>So the force vector $\vec{F}_R = (F_R) \frac{L_2\hat{i}-L_2\hat{j}-L_3\hat{k}}{\sqrt{(L_2)^2+(L_2)^2+(L_3)^2}}$</p>
                    

                <li>Now that you have all of the force vectors, set up the static equilibrium force equations.</li>
                
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            Setting up static equilibrium force equations:
           <Li>$\Sigma{F}_x= 0 \implies -\vec{F}_O\hat{i}-\vec{F}_P\hat{i}+\vec{F}_B\hat{i}+\vec{F}_R\hat{i}+\vec{F}\hat{i} = 0$</Li>
           <Li>$\Sigma{F}_y= 0 \implies -\vec{F}_O\hat{j}+\vec{F}_P\hat{j}+\vec{F}_B\hat{j}-\vec{F}_R\hat{j}+\vec{F}\hat{j} = 0$</Li>
           <Li>$\Sigma{F}_z= 0 \implies \vec{F}_O\hat{z}+\vec{F}_B\hat{z}-\vec{F}_R\hat{z}+\vec{F}\hat{z} = 0$</Li>
            <p>Where $\vec{F}$ is the messing vector we want to find. </p>

           <p>Solving each equation for $\vec{F}\hat{i}$,$\vec{F}\hat{j}$, and $\vec{F}\hat{k}$ </p>
           <li>$\vec{F}\hat{i} = \vec{F}_O\hat{i}+\vec{F}_P\hat{i}-\vec{F}_B\hat{i}-\vec{F}_R\hat{i}$</li>
           <li>$\vec{F}\hat{j} = \vec{F}_O\hat{j}+\vec{F}_R-\vec{F}_P\hat{j}\hat{j}-\vec{F}_B\hat{j}$</li>
           <li>$\vec{F}\hat{k} = -\vec{F}_O\hat{k}-\vec{F}_B\hat{k}+\vec{F}_F\hat{k}$</li>

            Now that you have the missing vector, compute the magnitude and the unit vector.
        </ul>
    </pl-hint>


    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            
        Computing magnitude:
        <li>$F = \sqrt{\vec{F}\hat{i}^2+\vec{F}\hat{j}^2+\vec{F}\hat{k}^2} = {{correct_answers.F}} {{params.unitsForce}}$.</li>
   
        Computing unit vector:
        <li>$\vec{U}_F = \frac{\vec{F}\hat{i}+\vec{F}\hat{j}+\vec{F}\hat{k}}{\sqrt{(\vec{F}\hat{i})^2+(\vec{F}\hat{j})^2+(\vec{F}\hat{k})^2}}$</li>
        <li>$\vec{U}_F \hat{i} = {{correct_answers.Ufx}}$</li>
        <li>$\vec{U}_F \hat{j} = {{correct_answers.Ufy}}$</li>
        <li>$\vec{U}_F \hat{k} = {{correct_answers.Ufz}}$</li>

        </ul>
    </pl-hint>

",,,"compute the missing force vector that will allow for static equilibrium.
provide the magnitude of the force and the unit vector of the missing force vector.
let the known forces be $\mathbf{f}_r = 10 n$, $\mathbf{f}_o = 5 n$, $\mathbf{f}_p = 8 n$, and $\mathbf{f}_b = 12 n$. 
and let the lengths be $\mathbf{l}_1 = 2 m$, $\mathbf{l}_2 = 3 m$, and $\mathbf{l}_3 = 4 m$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d particle equilibrium,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Vector Analysis"
5,Equilibrium2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D particle Equilibrium"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
} ","<pl-question-panel>
    <pl-figure file-name=""3dParticleEquilibrium2.png""></pl-figure>

    <p>Determine the tension in each cable in order to support the weight $\mathbf{W} = {{params.weight}} {{params.unitsForce}}$.</p>
    <p>Let the lengths be $\mathbf{L}_1 = {{params.l1}} {{params.unitsDist}}$, $\mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$, and $\mathbf{L}_3 = {{params.l3}} {{params.unitsDist}}$.</p>
</pl-question-panel>
    
    <pl-number-input answers-name=""TAB"" comparison=""sigfig"" digits=""3"" label=""Tensions in cable AB =""></pl-number-input>
    <pl-number-input answers-name=""TAC"" comparison=""sigfig"" digits=""3"" label=""Tensions in cable AC =""></pl-number-input>
    <pl-number-input answers-name=""TAD"" comparison=""sigfig"" digits=""3"" label=""Tensions in cable AD =""></pl-number-input>

    
    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

   weight = math.randomInt(50,200);
   l3 = math.randomInt(5,20);
   l1 = math.round(l3*math.randomInt(125,135)/100);
   l2 = math.round(l3*math.randomInt(200,220)/100);

//vec Tab
//(0,-l3,l2)
lengthb = math.sqrt(l3**2+l2**2);
xb=0
yb = -l3/lengthb;
zb = l2/lengthb;

// vec Tad
//(-l1/2,l1,0)'
lengthd = math.sqrt((l1/2)**2+l1**2);
xd = (-l1/2)/lengthd;
yd = l1/lengthd;
zd=0;

//vec Tac
//(l1/2,l1,-)
lengthc = lengthd;
xc = (l1/2)/lengthc;
yc = l1/lengthc;
zc = 0;

TAB = weight/zb;
TAD = -(TAB*yb)/(yd+yc);
TAC=TAD;






data = {
    params: {
       
       l1:l1,
       l2:l2,
       l3:l3,
     weight:weight,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
     



       
},

    correct_answers: { 
        TAB:TAB,
        TAD:TAD,
        TAC:TAC,
  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dParticleEquilibrium2.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First you have to compute the vector expressions for the tensions $T_B$ , $T_C$ and $T_D$. This can be done by multiplying the tension magnitude by the unit vector that follows the path of the tension.</pl-hint>
    <pl-hint level=""2"" data-type=""text"">To compute the unit vector all you have to due is divide the length of the vector by its self.</pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                    Computing the tension vectors:
                    <li>$\vec{T}_B = (T_B)(\vec{U}_B)$. let the unit vector $\vec{U}_B = \frac{0\hat{i}-L_3\hat{j}+L_2\hat{k}}{\sqrt{(L_3)^2+(L_2)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_B = (T_B)\frac{0\hat{i}-L_3\hat{j}+L_2\hat{k}}{\sqrt{(L_3)^2+(L_2)^2}}$</p>

                    <li>$\vec{T}_C = (T_C)(\vec{U}_C)$. let the unit vector $\vec{U}_C = \frac{\frac{L_1}{2}\hat{i}+L_1\hat{j}+0\hat{k}}{\sqrt{(\frac{L_1}{2})^2+(L_1)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_C = (T_C)\frac{\frac{L_1}{2}\hat{i}+L_1\hat{j}+0\hat{k}}{\sqrt{(\frac{L_1}{2})^2+(L_1)^2}}$</p>
                  
                       
                    <li>$\vec{T}_D = (T_D)(\vec{U}_D)$. let the unit vector $\vec{U}_D = \frac{-\frac{L_1}{2}\hat{i}+L_1\hat{j}+0\hat{k}}{\sqrt{(\frac{L_1}{2})^2+(L_1)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_D = (T_D)\frac{-\frac{L_1}{2}\hat{i}+L_1\hat{j}+0\hat{k}}{\sqrt{(\frac{L_1}{2})^2+(L_1)^2}}$</p>
                  
                       
    
                    <li>Now that you have all of the force vectors, set up the static equilibrium force equations.</li>
                    



                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            Setting up static equilibrium force equations:
            <Li>$\Sigma{F}_x= 0 \implies  \vec{T}_D\hat{i}-\vec{T}_C\hat{i}=0$</Li>
            <Li>$\Sigma{F}_y= 0 \implies  \vec{T}_D\hat{j}+\vec{T}_C\hat{j}+\vec{T}_B\hat{j}=0$</Li>
            <Li>$\Sigma{F}_z= 0 \implies  \vec{T}_B\hat{k} - W=0$</Li>

            <p>Now you can solve for the tension in each cable. </p>

    
        
        
        </ul>
    </pl-hint>


    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <p>Solving each equation for $T_B$,$T_C$, and $T_D$ you should get: </p>
              <li>${T}_B = {{correct_answers.TAB}} {{params.unitsForce}}$</li>
              <li>${T}_C = {{correct_answers.TAC}} {{params.unitsForce}}$</li>
              <li>${T}_D = {{correct_answers.TAD}} {{params.unitsForce}tension$</li>
        
        
        </ul>
    </pl-hint>

",,,"determine the tension in each cable in order to support the weight $\mathbf{w} = 500 \, \text{n}$.
let the lengths be $\mathbf{l}_1 = 2 \, \text{m}$, $\mathbf{l}_2 = 3 \, \text{m}$, and $\mathbf{l}_3 = 4 \, \text{m}$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d particle equilibrium,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Reaction Forces, Analytical Geometry"
6,Equilibrium3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D particle Equilibrium"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
} ","<pl-question-panel>
    <pl-figure file-name=""3dParticleEquilibrium3.png""></pl-figure>

    <p>The three cables have a maximum tesnion of ${{params.tmax}} {{params.unitsForce}}$.</p>
    <p>Determine the maximum weight the yellow plate can be without breaking any cables.</p>
    <p>Let the lengths be $\mathbf{L}_1 = {{params.l1}} {{params.unitsDist}}$, $\mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$, and $\mathbf{L}_3 = {{params.l3}} {{params.unitsDist}}$.</p>
</pl-question-panel>
    
<pl-number-input answers-name=""weight"" comparison=""sigfig"" digits=""3"" label=""Maximum weight of plate =""></pl-number-input>
 
    
    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

   l1 = math.randomInt(4,20);
   l2 = 2*l1;
   l3 = l1/2;

   tmax = math.randomInt(10,500);





   length = math.sqrt((l1-l3)**2+l1**2+l2**2);

// vec BA
xb = (l3-l1)/length;
yb = l1/length;
zb = l2/length;

// vec ca
xc = l1/length;
yc = (l1-l3)/length;
zc = l2/length;

//vec da
xd = (l1)/length;
yd = (l3-l1)/length;
zd = l2/length;

TB = tmax;
TD = TB;
TC = 0;
weight = tmax*(zb+zd)







data = {
    params: {
       
       l1:l1,
       l2:l2,
       l3:l3,
     tmax:tmax,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
     



       
},

    correct_answers: { 
       
        weight:weight,
  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dParticleEquilibrium3.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First you have to compute the vector expressions for the tensions $T_B$ , $T_C$ and $T_D$. This can be done by multiplying the tension magnitude by the unit vector that follows the path of the tension.</pl-hint>
    <pl-hint level=""2"" data-type=""text"">To compute the unit vector all you have to due is divide the length of the vector by its self.</pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                    Computing the tension vectors:
                    <li>$\vec{T}_B = (T_B)(\vec{U}_B)$. let the unit vector $\vec{U}_B = \frac{(L_3-L_1)\hat{i}+L_1\hat{j}+2L_1\hat{k}}{\sqrt{(L_3-L_1)^2+(L_1)^2+(2L_1)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_B = (T_B)\frac{(L_3-L_1)\hat{i}+L_1\hat{j}+2L_1\hat{k}}{\sqrt{(L_3-L_1)^2+(L_1)^2+(2L_1)^2}}$</p>

                    <li>$\vec{T}_C = (T_C)(\vec{U}_C)$. let the unit vector $\vec{U}_C = \frac{L_1\hat{i}+(L_1-L_3)\hat{j}+2L_1\hat{k}}{\sqrt{(L_1)^2+(L_1-L_3)^2+(2L_1)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_C = (T_C)\frac{L_1\hat{i}+(L_1-L_3)\hat{j}+2L_1\hat{k}}{\sqrt{(L_1)^2+(L_1-L_3)^2+(2L_1)^2}}$</p>
                  
                       
                    <li>$\vec{T}_D = (T_D)(\vec{U}_D)$. let the unit vector $\vec{U}_D = \frac{L_1\hat{i}+(L_3-L_1)\hat{j}+2L_1\hat{k}}{\sqrt{(L_1)^2+(L_3-L_1)^2+(2L_1)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_D = (T_D)\frac{L_1\hat{i}+(L_3-L_1)\hat{j}+2L_1\hat{k}}{\sqrt{(L_1)^2+(L_3-L_1)^2+(2L_1)^2}}$</p>
                  
                       
    
                    <li>Now that you have all of the force vectors, set up the static equilibrium force equations.</li>
                    


                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            Setting up static equilibrium force equations:
            <Li>$\Sigma{F}_x= 0 \implies  -\vec{T}_B\hat{i}+\vec{T}_D\hat{i}+\vec{T}_C\hat{i}=0$</Li>
            <Li>$\Sigma{F}_y= 0 \implies  \vec{T}_B\hat{j}+\vec{T}_C\hat{j}-\vec{T}_D\hat{j}=0$</Li>
            <Li>$\Sigma{F}_z= 0 \implies  \vec{T}_B\hat{k}+\vec{T}_D\hat{k}+\vec{T}_C\hat{k}-weight = 0$</Li>

            <p>Now you can solve for the tension in each cable with the assumption that one of the cables is going to holding the maximum tesnion just before it breaks.</p>

    
        
        
        </ul>
    </pl-hint>


    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <p> Lets assume that $T_B$ will holding the max tension, that is ${{params.tmax}} {{params.unitsForce}}  $</p>
            <p>With this assumption we can set $T_B = {{params.tmax}} {{params.unitsForce}}$. This leaves us with three equations and three unkowns.</p>
            <p> Solving equations using our assumption we get:</p>
              <li>${T}_B = {{params.tmax}} {{params.unitsForce}}$</li>
              <li>${T}_D = {{params.tmax}} {{params.unitsForce}}$</li>
              <li> ${T}_C = 0 $ </li>
              <li>$Max Weight ={{params.weight}} {{params.unitsForce}}$</li>
        
        
        </ul>
    </pl-hint>

",,,"the three cables have a maximum tension of $500 n$.
determine the maximum weight the yellow plate can be without breaking any cables.
let the lengths be $\mathbf{l}_1 = 2 m$, $\mathbf{l}_2 = 3 m$, and $\mathbf{l}_3 = 4 m$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d particle equilibrium,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,Analytical Geometry
7,Equilibrium4,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D particle Equilibrium"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
} ","<pl-question-panel>
    <pl-figure file-name=""3dParticleEquilibrium4.png""></pl-figure>

<p>There are three cables holding up the weight at point O.</p>
<p>Cables A and B have springs hooked up to them with a spring constant $\mathbf{K} = {{params.k}}$ $ {{params.unitsForcee}}$.</p>
<p>Determine the stretch in the spings while they hold up the weight $\mathbf{W} = {{params.weight}} {{params.unitsForce}}$.</p>
<p>let the lengths be $\mathbf{L}_1 = {{params.l1}} {{params.unitsDist}}$ and $\mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$ </p>
<p>Note: cables A and B travel along the x and y axis.</p>
</pl-question-panel>
    
<pl-number-input answers-name=""Xa"" comparison=""sigfig"" digits=""3"" label=""The stretch in the spring OA in (${{params.unitsDist}}$) =""></pl-number-input>
<pl-number-input answers-name=""Xb"" comparison=""sigfig"" digits=""3"" label=""The stretch in the spring OB in (${{params.unitsDist}}$) =""></pl-number-input>
    
    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m"",

        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

   

k = math.randomInt(100,500);
weight = math.randomInt(100,500);

l1 = math.randomInt(5,25);
l2 = math.round(l1*(4/6)*10)/10;
l3 = l1*2




//vec oc
//(l1,l2,l3)
length = math.sqrt(l1**2+l2**2+l3**2);
xc = l1/length;
yc = l2/length;
zc = l3/length;

TC = weight/zc;
TB = TC*xc;
TA = TC*yc;

Xa = TA/k;
Xb = TB/k;




data = {
    params: {
       weight:weight,
       l1:l1,
       l2:l2,
       l3:l3,
       k:k,
       unitsForce:unitsForce,
       unitsDist:unitsDist,
       unitsForcee:unitsForcee,
     



       
},

    correct_answers: { 
       
        Xa:Xa,
        Xb:Xb,
  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dParticleEquilibrium4.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First you have to compute the vector expressions for the tensions $T_A$ , $T_B$ and $T_C$. This can be done by multiplying the tension magnitude by the unit vector that follows the path of the tension.</pl-hint>
    <pl-hint level=""2"" data-type=""text"">To compute the unit vector all you have to due is divide the length of the vector by its self.</pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                    Computing the tension vectors:
                    <li>$\vec{T}_A = (T_A)(\vec{U}_A)$. let the unit vector $\vec{U}_A = \frac{0\hat{i}-L\hat{j}+0\hat{k}}{\sqrt{(L)^2}} = 0\hat{i}-1\hat{j}+0\hat{k}$ </li>
                    <p>So the tension vector $\vec{T}_A = (T_A)(0\hat{i}-1\hat{j}+0\hat{k})$</p>

                    <li>$\vec{T}_B = (T_B)(\vec{U}_B)$. let the unit vector $\vec{U}_B = \frac{-L\hat{i}+0\hat{j}+0\hat{k}}{\sqrt{(L)^2}} = -1\hat{i}+0\hat{j}+0\hat{k}$ </li>
                    <p>So the tension vector $\vec{T}_B = (T_B)(-1\hat{i}+0\hat{j}+0\hat{k})$</p>

                    <li>$\vec{T}_C = (T_C)(\vec{U}_C)$. let the unit vector $\vec{U}_C = \frac{L_1\hat{i}+L_2\hat{j}+L_3\hat{k}}{\sqrt{(L_1)^2+(L_2)^2+(L_3)^2}}$ </li>
                    <p>So the tension vector $\vec{T}_D = (T_D)\frac{L_1\hat{i}+L_2\hat{j}+L_3\hat{k}}{\sqrt{(L_1)^2+(L_2)^2+(L_3)^2}}$</p>
                  
                       
    
                    <li>Now that you have all of the force vectors, set up the static equilibrium force equations.</li>
                    



                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            Setting up static equilibrium force equations:
            <Li>$\Sigma{F}_x= 0 \implies  -\vec{T}_B\hat{i}+\vec{T}_C\hat{i}=0$</Li>
            <Li>$\Sigma{F}_y= 0 \implies  -\vec{T}_A\hat{j}+\vec{T}_C\hat{j}=0$</Li>
            <Li>$\Sigma{F}_z= 0 \implies  \vec{T}_C\hat{k} - W = 0$</Li>

            <p>Now you can solve for the tension in each cable.</p>

    
        
        
        </ul>
    </pl-hint>


    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            
            <p> Solving force equations:</p>
            <li> ${T}_C = \frac{W}{\hat{k}} $ </li>
            Where $\hat{k}$ is the k component of $\vec{U}_C$
            <p>Now we can solve for tension A and B:</p>

              <li>$T_B = \vec{T}_C\hat{i} $</li>
              <li>$T_A =\vec{T}_C\hat{j} $</li>
             
              Now that we have tension A and B, we can find the stretch in the springs.
      
        
        
        </ul>
    </pl-hint>


    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            
            <p> Finding stretch in springs using $F = (k)(\Delta x)$</p>
            <li>$(\Delta x)$ for spring A $= \frac{T_A}{k} = {{params.Xa}} {{params.unitsDist}}  $</li>
            <li>$(\Delta x)$ for spring B $= \frac{T_B}{k} = {{params.Xb}} {{params.unitsDist}}  $</li>

         
      
        
        
        </ul>
    </pl-hint>



",,,"there are three cables holding up the weight at point o.
cables a and b have springs hooked up to them with a spring constant $\mathbf{k} = 200 \, \text{n/m}$.
determine the stretch in the spings while they hold up the weight $\mathbf{w} = 500 \, \text{n}$.
let the lengths be $\mathbf{l}_1 = 2 \, \text{m}$ and $\mathbf{l}_2 = 3 \, \text{m}$ 
note: cables a and b travel along the x and y axis.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d particle equilibrium,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 018B","Static Equilibrium, Analytical Geometry"
8,Frame1,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines"",
	""stem"": ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment"",""reaction forces""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""reaction.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at points B,D,and F caused by the weight (W).</p>
    <p>Let $ \mathbf{W} = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf {L}_1 = {{params.length1}} {{params.unitsDist}}$ , $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$ , $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$</p>
</pl-question-panel>
  <pl-number-input answers-name=""reactionB"" comparison=""sigfig"" digits=""3"" label=""Reaction at pin B =""></pl-number-input>
  <pl-number-input answers-name=""reactionD"" comparison=""sigfig"" digits=""3"" label=""Reaction at Pin D =""></pl-number-input>
  <pl-number-input answers-name=""reactionF"" comparison=""sigfig"" digits=""3"" label=""Reaction at roller F =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight = (math.randomInt(100,500));//the force
	length1= (math.randomInt(400,700))/1000; //length of l1 in m or ft

	length2= length1*((math.randomInt(550,650))/1000);
    length3= length1*((math.randomInt(350,450))/1000);

    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    
if(unitSel>0){
    
    length1=length1*3;
    length2=length2*3;
    length3=length3*3;
   
}
// Using FBD A-C
//moment about point A
reactionB=(weight*(length1+length2))/(length1*0.866025404);

//using FBD B-D
//sum force in x direction
reactionD=reactionB;

//FBD D-E
//moment about E
reactionF=(reactionD*0.866025404*(length3+length3))/(length3);

data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
        length3: length3,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    reactionB:reactionB,
    reactionD:reactionD,
    reactionF:reactionF
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""reaction.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Break up the system into 3 parts and write the appropriate reaction forces at each point. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Use member AB to solve for the reaction force at point B.</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            Solving for the reaction force $B_r$:Using FBD of AB
            <li>$\Sigma M_A = 0 \implies B_r$ Sin(60) $L_1$ - W($L_1+L_2$)= 0, $\implies B_r = \frac {W(L_1+L_2)}{Sin(\theta) L_1}$</li>
            <li>$B_r = {{correct_answers.reactionB}}$ ${{params.unitsForce}}$</li>

          
            Now that you have the reaction force at point B try and find the reaction force at D.
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
      <ul>
            Reaction force at D: Using member BD
            <li>$\Sigma F_x = 0 \implies -B_r +D_r = 0 \implies D_r = B_r$</li>
            <li>$D_r = {{correct_answers.reactionD}}$ ${{params.unitsForce}}$</li>

            Using $D_r$ find the reaction forces at F.
            
        </ul>
    </pl-hint>
</pl-solution-panel>
<pl-hint level=""5"" data-type=""text"">
    <ul>
        Reaction forces at F: using memeber DC
        <li>$\Sigma M_C = 0 \implies D_r$ Sin(60)($L_3+L_3$) - $F_r(L_3) = 0 \implies F_r = \frac {D_r Sin(60)(L_3+L_3)}{L_3}$</li>
     <li>$F_r = {{correct_answers.reactionF}}$ ${{params.unitsForce}}$</li>
    </ul>
</pl-hint>
</pl-solution-panel>
",,,"Refer to the diagram labeled ""reaction.png"".  Compute the magnitude of the reaction forces at points B, D, and F due to the weight  � W.  Given:  Weight,  � = 500 W=500 N Lengths: � 1 = 2 L  1 ​  =2 m � 2 = 3 L  2 ​  =3 m � 3 = 1.5 L  3 ​  =1.5 m Determine:  Reaction at pin B. Reaction at Pin D. Reaction at roller F.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines,Force anylisis,Statics,"Frames,Vector,Force,Moment,Reaction forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Reaction Forces, Static Equilibrium"
9,Frame3,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines"",
	""stem"": ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","


<pl-question-panel>
    <pl-figure file-name=""frame1.png""></pl-figure>
    <p> The Frame supports the load $ \mathbf{W} = {{params.W}} {{params.unitsForce}}$. </p>
    <p> Neglecting the weights of the members and compute the magnitude of the horizontal and verticle components of all forces acting at points A,B,C,D,E,and F. </p>
    <p> Let the lengths $ \mathbf{L}_1 = {{params.l1}} {{params.unitsDist}} $, $ \mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.l3}} {{params.unitsDist}}, $ \mathbf{L}_4 = {{params.l4}} {{params.unitsDist}},and radious $ \mathbf{R} = {{params.radious}} {{params.unitsDist}} </p>
  </pl-question-panel>
    
  <pl-number-input answers-name=""AX"" comparison=""sigfig"" digits=""3"" label=""Ax=""></pl-number-input>
  <pl-number-input answers-name=""AY"" comparison=""sigfig"" digits=""3"" label=""Ay=""></pl-number-input>
  <pl-number-input answers-name=""BX"" comparison=""sigfig"" digits=""3"" label=""Bx=""></pl-number-input>
  <pl-number-input answers-name=""BY"" comparison=""sigfig"" digits=""3"" label=""By=""></pl-number-input>
  <pl-number-input answers-name=""CX"" comparison=""sigfig"" digits=""3"" label=""Cx=""></pl-number-input>
  <pl-number-input answers-name=""CY"" comparison=""sigfig"" digits=""3"" label=""Cy=""></pl-number-input>
  <pl-number-input answers-name=""DX"" comparison=""sigfig"" digits=""3"" label=""Dx=""></pl-number-input>
  <pl-number-input answers-name=""DY"" comparison=""sigfig"" digits=""3"" label=""Dy=""></pl-number-input>
  <pl-number-input answers-name=""EX"" comparison=""sigfig"" digits=""3"" label=""Ex=""></pl-number-input>
  <pl-number-input answers-name=""EY"" comparison=""sigfig"" digits=""3"" label=""Ey=""></pl-number-input>
  <pl-number-input answers-name=""FX"" comparison=""sigfig"" digits=""3"" label=""Fx=""></pl-number-input>
  <pl-number-input answers-name=""FY"" comparison=""sigfig"" digits=""3"" label=""Fy=""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	W = (math.randomInt(100,500));//the force
	l1= (math.randomInt(150,250))/100; //length of l1 in m or ft
	l2= (math.randomInt(300,400))/100;
    l3= (math.randomInt(150,250))/100;
    l4=(math.randomInt(40,60))/100;
	radious=l4;
if(unitSel>1){
    
    l1=l1*3;
    l2=l2*3;
    l3=l3*3;
    l4=l4*3;
    radious=radious*3;
}






//------- solving for reactions forces Dx,Ax,Ay
DX=((l2+l3+radious)*(W))/(l1+l1+l1+l4);
DY=0;
AX=DX;
AY=W;

// -------solving for the forces on member B-F
EY=((l2+l3)*(W))/(l2);
EX=EY*2;
//by semitry 
CY=EY;
CX=EX;

BY=EY-W;
BX=EX-W;
// point F
FX=W;
FY=W;

data = {
    params: {
         W: W,
        l1: l1,
        l2: l2,
        l3: l3,
        l4: l4,
   radious: radious,
   unitsForce:unitsForce,
   unitsDist:unitsDist
},

    correct_answers: { 
    AX:AX,
    AY:AY,
    BX:BX,
    BY:BY,
    CX:CX,
    CY:CY,
    DX:DX,
    DY:DY,
    EX:EX,
    EY:EY,
    FX:FY,
    FY:FY
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First compute the reaction forces at points A and D by $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ and $ \Sigma M_A = 0 $ of the whole system.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> Break up the system into 4 seprate parts. Beam AD,BF,CE, and pully F, and right the X and Y reaction forces acting at each point on all 4 parts.  </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        <ul>
        Solving reaction forces:
        <li>$ \Sigma F_x = 0, \implies A_x + D_x = 0, \implies A_x = -D_x$</li>
        <li>$ \Sigma F_y = 0, \implies A_y - W = 0, \implies A_y = W, \implies A_y = {{params.W}} {{params.unitsForce}}$</li>
        <li>$ \Sigma M_A = 0, \implies (D_x)(L_1+L_2+L_3+L_4) - (W)(L_1+L_2+r) = 0.$ Solving for $D_x = (W)(L_1+L_2+r) / (L_1+L_2+L_3+L_4) = {{correct_answers.DX}}$ ${{params.unitsForce}}$</li>
        </ul>
    </pl-hint>



    <pl-hint level=""3"" data-type=""text""> 
        <ul>
        Reminder: If 2 parts share 1 point then the reactions on each parts must be equal oppisite to each other.
            <li> Example: when writing the reaction forces on beam AD. </li>
            <li> Point A $\implies$ 2 reaction forces pointing right and up, (positve x direction) and (positive y direction).</li>
            <li> Point B $\implies$ 2 reaction forces pointing right and up, (positve x direction) and (positive y direction).</li>
            <li> Point C $\implies$ 2 reaction forces pointing right and up, (positve x direction) and (positive y direction).</li>
            <li> Point D $\implies$ 1 reaction forces pointing right and up, (positve x direction).</li>
            <li> There will also be a tension force pointing to the  right, (positive x direction)</li>
         -
            <li> Example: when writing the reaction forces on beam CE. </li>
            <li> Point C $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
            <li> Point E $\implies$ 2 reaction forces pointing right and up, (positive x direction) and (positive y direction).</li>
        -
            <li> Example: when writing the reaction forces on beam BF. </li>
            <li> Point B $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
            <li> Point E $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
            <li> Point F $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
        -
            <li> Example: when writing the reaction forces on pully F. </li>
            <li> Point F $\implies$ 2 reaction forces pointing right and up, (positive x direction) and (positive y direction).</li>
            <li> There will also be a 2 tension forces pointing left and down.</li>
        -
            <li> Now that everything is set up you can now start solving each part by doing $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ and $ \Sigma M_A = 0. $</li>

        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
        Solving reaction forces:
        <li> Beam BF: $ \Sigma M_B = 0 \implies -(E_y)(L_2) - (W)(L_2+L_3+r)=0 \implies |E_y| = (W)(L_2+L_3+r)/-l_2 = {{correct_answers.DX}}$ ${{params.unitsForce}}$</li>
        -
        <li> Beam CE: tan($\theta$) = (opp/adj) $\implies$ tan($\theta$) =$ (L_1/L_2) \implies \theta = $atan$(L_1/L_2)$
        <li> Now we can solve for $E_x$: tan($\theta$) = $ E_y/E_x \implies |E_x| = E_y /$ tan($\theta$) = ${{correct_answers.EY}}$ ${{params.unitsForce}}$ </li>
        <li> By $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ we can come to the conclusion that $C_x = E_x$ and $C_y = E_y$</li>
        -
        <li> Pully F: $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ we can come to the conclusion that $F_y = W $ and $ F_x = W $</li>
        -
        <li>Beam BF: Now that we have $F_x,F_y,E_x,E_y$ we can solve for the reactions at point B.</li>
        <li>$ \Sigma F_x = 0 $, $ \Sigma F_y = 0 \implies B_x = E_x - F_x,$ and $ B_y = E_y - F_y$</li>
        <li>$B_x = {{correct_answers.BX}}$ {{params.unitsForce}}</li>
        <li>$B_y = {{correct_answers.BY}}$ {{params.unitsForce}}</li>

        -
        <li>Note: The solutions want the magnitude of the forces which is why they all come out positve.</li>
        <li>When you get negative solutions for reaction forces, that indactes that you have to switch the force direction.</li>
        <li>For example: This is why when solving for $B_x$ it NOT $B_x = E_x + F_x$ even though that is technically correct with the way we initially drew the forces.</li>
        <li>It is beacuse the true direction of $E_x$ on beam BF is to the right (positive x direction) regardless of the direction of our initial guess. </li>
        </ul>
    </pl-hint>
</pl-solution-panel>
",,,"the frame supports the load $ \mathbf{w} = 500 n$. 
 neglecting the weights of the members and compute the magnitude of the horizontal and verticle components of all forces acting at points a,b,c,d,e,and f. 
 let the lengths $ \mathbf{l}_1 = 2 m $, $ \mathbf{l}_2 = 3 m$, $ \mathbf{l}_3 = 4 m$, $ \mathbf{l}_4 = 5 m$,and radious $ \mathbf{r} = 1 m$",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines,Force anylisis,Statics,"Frames,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Distributed Forces"
10,Squeezer,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines Squeezer"",
    ""stem"" : ""Force analysis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment""],
    ""prereqs"": """",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
    ""codelang"": ""javascript""
    }","<pl-question-panel>
    <pl-figure file-name=""squeezer.png""></pl-figure>
    <p>A pair of forces (F) is applied to the eyelet squeezer. The green block at A is able to slide back and forth with negligible friction.</p>
    <p>Compute the compressive force acting on the orange eyelet as a result of the two forces in {{params.unitsForce}}</p>
    <p>let the force $ \mathbf(F) = {{params.force}} {{params.unitsForce}}$ and lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$ and $ \mathbf{L}_4 = {{params.length4}} {{params.unitsDist}}$</p>
</pl-question-panel>
    

  <pl-number-input answers-name=""forceP"" comparison=""sigfig"" digits=""3"" label="" Compressive force =""></pl-number-input>
  
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""mm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""in"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	force= (math.randomInt(10,100));//the force
	length1= (math.randomInt(40,100)); //length of l1 in m or ft
    
    

	length2= length1*((math.randomInt(780,820))/1000);
    length3= length1*((math.randomInt(220,260))/1000);
    length4= length1*((math.randomInt(80,120))/1000);


    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    length4=(Math.round(length4*100))/100;
    if(unitSel>0){
    
        length1=length1/25;
        length2=length2/25;
        length3=length3/25;
        length4=length4/25;

    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    length4=(Math.round(length4*100))/100;
        
    }

    //testvals
    //length1=62.5
    //force=80
    //length2=50
    //length3=15
    //length4=6.25
    

theta=(Math.atan(length3/length1))+(Math.atan((length3+length4)/length2));
distab=Math.sqrt((length1**2)+(length3)**2);
reactionB=(force*(length1+length2))/(distab*Math.sin(theta));
forceP=reactionB*Math.cos(Math.atan((length3+length4)/length2));







data = {
    params: {
        force:force,
        length1: length1,
        length2: length2,
        length3: length3,
        length4: length4,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

 forceP:forceP


},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""squeezer.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Break up the system into 4 parts and draw the reaction forces acting on each part.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> Try to solve for the reaction forece acting on point B</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            Solving for the reaction forec at B: Using the free body diagram on member AC
            <li>$\Sigma M_A = 0, \implies B_r$ Sin($\theta$) $\sqrt{L_1^{2}+L_3^{2}}$ - $F(L_1+L_2)$ = 0</li>
            <li> solving for $B_r$ we get $B_r = \frac{F(L_1+L_2)}  {Sin(\theta)\sqrt{L_1^{2}+L_3^{2}} }$</li>
            <li> Where $\theta$ = atan($\frac{L_3}{L_1}$) + atan($\frac{L_3+L_4}{L_2}$)</li>
            Now that we have the reaction froce at B, try and find the compressive force.
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
          Solving for the compressive force: Using the free body diagram on member AC
            <li>$\Sigma F_x = 0 \implies -A_x + B_r$ Cos($\phi$) = 0 </li>
            <li>$A_x$ =$ B_r$ Cos($\phi$)
            <li> Where $\phi$ = atan($\frac{L_3+L_4}{L_2}$)</li>
            <li>Drawing the free body diagram for the dark green part and doing $\Sigma F_x = 0 \implies A_x -$CompressiveForce = 0</li>
            <li>Compressive force = $A_x$ </li>
    </ul>
    </pl-hint>
    ",,,"Refer to the diagram labeled ""squeezer.png"".  A pair of forces (F) is applied to the eyelet squeezer. The green block at point A is able to slide back and forth with negligible friction.  Compute the compressive force acting on the orange eyelet as a result of the two forces.  Given:  Force,  � = 100 F=100 N (for example) Lengths: � 1 = 2 L  1 ​  =2 m (for example) � 2 = 1.5 L  2 ​  =1.5 m (for example) � 3 = 3 L  3 ​  =3 m (for example) � 4 = 2.5 L  4 ​  =2.5 m (for example) Determine:  Compressive force on the orange eyelet.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines squeezer,Force analysis,Statics,"Frames,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110, ME 018B, ME 103","Distributed Forces, Statics and Mechanics"
11,distributedForces1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Distributed forces"",
    ""stem"":""Statics"",
    ""topic"": ""force anylisis"",
    ""tags"": [""moments"", ""reaction forces"",""distributed forces""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <p> Determine the reaction forces at points A and B under the force $ \mathbf{P} = {{params.forceP}} {{params.unitsForce}} $and distributed force $ \mathbf{F}_D = {{params.forceD}} {{params.unitsForcee}}$. </p>
    <p>Let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$ and $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$</p>
</pl-question-panel>

<pl-number-input answers-name=""reactionAx"" comparison=""sigfig"" digits=""3"" label=""Reaction force Ax =""></pl-number-input>
<pl-number-input answers-name=""reactionAy"" comparison=""sigfig"" digits=""3"" label=""Reaction force Ay =""></pl-number-input>
<pl-number-input answers-name=""reactionBx"" comparison=""sigfig"" digits=""3"" label=""Reaction force Bx =""></pl-number-input>
<pl-number-input answers-name=""reactionBy"" comparison=""sigfig"" digits=""3"" label=""Reaction force By =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 
	forceP = (math.randomInt(500,2000));
    forceD = forceP*((math.randomInt(150,175)/1000));//the force


	length1= (math.randomInt(5,25)); //length of l1 in m or ft
	length2= length1*((math.randomInt(450,550))/1000);

    forceD=(Math.round(forceD*10))/10;
    length1=(Math.round(length1*10))/10;
    length2=(Math.round(length2*10))/10;
    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length1=(Math.round(length1*10))/10;
        length2=(Math.round(length2*10))/10;
    }

//math
reactionAx=0
reactionBx=0

reactionBy=((forceP*length1)+(forceD*length1)*(length1+length2+(length1/2)))/(length1+length2+length1);
reactionAy=forceP+forceD*length1-reactionBy;
    
data = {
    params: {
         forceD: forceD,
         forceP:forceP,
        length1: length1,
        length2: length2,
       
        unitsForce:unitsForce,
        unitsDist:unitsDist,
        unitsForcee:unitsForcee
},

    correct_answers: { 
    reactionAx:reactionAx,
    reactionAy:reactionAy,
    reactionBx:reactionBx,
    reactionBy:reactionBy
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Draw the freebody diagram. Then write out the equations for $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ and $ \Sigma M_A = 0 $. You could also take sum of moments about point B. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Replace the distributed force by a concentrated force acting at the centroid of the distributed force</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> $ \Sigma F_x = 0 \implies A_x = 0 $</li>
            <li> Replace the distributed force by a concentrated force. </li>
            <li> $ \Sigma F_y = 0 \implies A_y + B_y - {{params.forceP}} - ({{params.forceD}})({{params.length1}}) = 0 $ </li>
            <li> $ \Sigma M_A = 0 \implies B_y ({{params.length1}}+ {{params.length2}}) - ({{params.forceP}})({{params.length1}}) - ({{params.forceD}})({{params.length1}})({{params.length1}} + {{params.length2}} + {{params.length1}}/2) = 0 $ </li>
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
            <li> Solve the moment equation for $ B_y $ to obtain $ B_y = {{correct_answers.reactionBy}} {{params.unitsForce}} $</li>
            <li> Substitute in the equation for the vertical force balance to obtain $ A_y = {{correct_answers.reactionAy}} {{params.unitsForce}} $ </li>
        </ul>
    </pl-hint>
</pl-solution-panel>
",,,"determine the reaction forces at points a and b under the force $ \mathbf{p} = 500 n $ and distributed force $ \mathbf{f}_d = 1000 n/m$. 
let the lengths $ \mathbf{l}_1 = 2 meters$ and $ \mathbf{l}_2 = 3 meters$",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Distributed forces,Statics,Force anylisis,"Moments,Reaction forces,Distributed forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Reaction Forces, Distributed Forces, Static Equilibrium"
12,distributedForces2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Distributed forces"",
    ""stem"":""Statics"",
    ""topic"": ""force anylisis"",
    ""tags"": [""moments"", ""reaction forces"",""distributed forces""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""distributedForces2.png""></pl-figure>
    <p> Determine the reaction forces at points A and B under the force $ \mathbf{F} = {{params.force}} {{params.unitsForce}}$ and the distributed forces $ \mathbf{P}_D = {{params.forceP}} {{params.unitsForcee}}$ and $ \mathbf{F}_D = {{params.forceD}} {{params.unitsForcee}}$ . </p>
    <p> Let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$ and $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$.</p>
</pl-question-panel>

<pl-number-input answers-name=""reactionAx"" comparison=""sigfig"" digits=""3"" label=""Reaction force Ax =""></pl-number-input>
<pl-number-input answers-name=""reactionAy"" comparison=""sigfig"" digits=""3"" label=""Reaction force Ay =""></pl-number-input>
<pl-number-input answers-name=""reactionBx"" comparison=""sigfig"" digits=""3"" label=""Reaction force Bx =""></pl-number-input>
<pl-number-input answers-name=""reactionBy"" comparison=""sigfig"" digits=""3"" label=""Reaction force By =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee


    force  = (math.randomInt(20,100));
	forceD = force*(math.randomInt(175,185)/1000);
    forceP = forceD*((math.randomInt(490,510)/1000));//the force

	length1= (math.randomInt(3,7)); //length of l1 in m or ft
	length2= length1*((math.randomInt(660,670))/1000);
    length3= length1*((math.randomInt(330,340))/1000);

    forceD=(Math.round(forceD*100))/100;
    forceP=(Math.round(forceP*100))/100;
    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
 

//math
reactionAx=0
reactionBx=0
reactionBy=((-forceP*length2*(length3+(length2/2))+(forceD*length1*(length3+(length1/2)))-(force*(length1+length3+length3)))/(length3+length1));
reactionAy=-reactionBy+(forceD*length1)+(forceP*length2)-force;
reactionBy=Math.abs(reactionBy)

data = {
    params: {
         forceD: forceD,
         forceP:forceP,
          force:force,
        length1: length1,
        length2: length2,
        length3:length3,
        unitsForcee:unitsForcee,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    reactionAx:reactionAx,
    reactionAy:reactionAy,
    reactionBx:reactionBx,
    reactionBy:reactionBy
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Draw the freebody diagram. Then write out the equations for $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ and $ \Sigma M_A = 0 $. You could also take sum of moments about point A. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Replace the distributed force by a single concentrated force acting at the centroid of the distributed force</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> By doing $ \Sigma F_x = 0 \implies A_x = 0 $</li>
            <li> Replace the distributed force by a single concentrated force. </li>
            <li> $ \Sigma M_A = 0 \implies B_y ({{params.length3}}+ {{params.length1}}) - ({{params.forceD}})({{params.length1}})({{params.length3}}+ {{params.length1}}/2) + ({{params.forceP}})({{params.length2}})({{params.length3}}+ {{params.length2}}/2)+ ({{params.force}})({{params.length3}}+ {{params.length1}}+ {{params.length3}})= 0 $</li>
            <li> By doing $ \Sigma F_y = 0 \implies A_y + B_y + {{params.force}} - ({{params.forceD}})({{params.length1}}) - ({{params.forceP}})({{params.length2}}) = 0 $ </li>
           
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
            <li> Solve the moment equation for $ B_y $ to obtain $ B_y = {{correct_answers.reactionBy}} {{params.unitsForce}} $</li>
            <li> Substitute $ B_y $ and solve for $ A_y $ in the $ \Sigma F_y = 0 $ equation to obtain $ A_y = {{correct_answers.reactionAy}} {{params.unitsForce}} $ </li>
        </ul>
    </pl-hint>
</pl-solution-panel>
",,,"determine the reaction forces at points a and b under the force $ \mathbf{f} = 100 n$ and the distributed forces $ \mathbf{p}_d = 50 n/m$ and $ \mathbf{f}_d = 20 n/m$ . 
let the lengths $ \mathbf{l}_1 = 2 m$, $ \mathbf{l}_2 = 3 m$ and $ \mathbf{l}_3 = 4 m$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Distributed forces,Statics,Force anylisis,"Moments,Reaction forces,Distributed forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Reaction Forces, Distributed Forces, Static Equilibrium"
13,distributedForces3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Distributed forces"",
    ""stem"":""Statics"",
    ""topic"": ""force anylisis"",
    ""tags"": [""moments"", ""reaction forces"",""distributed forces""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""distributedForces3.png""></pl-figure>
    <p>Determine the magnitude of the resultant forces and there distance from point A. Then compute the moment about point A in ${{params.unitsForce}}$-${{params.unitsDist}}$</p>
    <p>Let the distributed forces $ \mathbf{F}_D = {{params.forceF}} {{params.unitsForcee}}$ and $ \mathbf{P}_D = {{params.forceP}} {{params.unitsForcee}}$</p>
    <P>Let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$ and $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$</P>
</pl-question-panel>

<pl-number-input answers-name=""F"" comparison=""sigfig"" digits=""3"" label=""Resultant force F =""></pl-number-input>
<pl-number-input answers-name=""P"" comparison=""sigfig"" digits=""3"" label=""Resultant force P =""></pl-number-input>
<pl-number-input answers-name=""Fxx"" comparison=""sigfig"" digits=""3"" label=""Distance F from A =""></pl-number-input>
<pl-number-input answers-name=""Pxx"" comparison=""sigfig"" digits=""3"" label=""Distance P from A =""></pl-number-input>
<pl-number-input answers-name=""momentA"" comparison=""sigfig"" digits=""3"" label=""Moment about A =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee


    
	forceF = math.randomInt(50,95);
    forceP = math.randomInt(100,150);//the force

	length1= (math.randomInt(10,30)); //length of l1 in m or ft
	length2= length1*((math.randomInt(660,670))/1000);
   
    length1=(Math.round(length1*10))/10;
    length2=(Math.round(length2*10))/10;
  
    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length1=(Math.round(length1*10))/10;
        length2=(Math.round(length2*10))/10;
    }

F=(forceF*length1)/2;
Fxx=length1*(2/3);
P=(forceP*length2)/2;
Pxx=length2*(1/3)+length1
momentA=P*Pxx-F*Fxx;

data = {
    params: {
         forceF: forceF,
         forceP:forceP,
        length1: length1,
        length2: length2,
        unitsForcee:unitsForcee,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    momentA:momentA,
    F:F,
    P:P,
    Fxx:Fxx,
    Pxx:Pxx,
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Break both of the distributed forces down and create two single concentrated forces acting at there centroids.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> By creating to concentrated forces as a result of the two distributed forces, you should have force F pointing down and force P pointing up.</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> To find the magnitude of the forces compute the area of the triangular shape by using the height: $ F_D $ and $ P_D $ and lengths: $ L_1 $ and $ L_2 $ </li>
            <li> Concentrated force $ F = ({{params.forceF}})({{params.length1}})/2$ and concentrated force $ P = ({{params.forceP}})({{params.length2}})/2 $.</li>
            <li> To find the location of the concentrated forces you must find the centroid of the distributed forces and compute there distances from point A. 
                Since both of the distributed forces are triangular shaped we know the centroid of a triangle is 1/3 the base with an orgin at the right angle.</li>
            <li> Position of concentrated forces relative to point A: $ F_x = ({{params.length1}})(2/3) $ and $P_x = ({{params.length2}})(1/3) + {{params.length1}}$</li>
            <li> With the the two concentrated forces and the positions, you can now calculate the moment about point A. </li>
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
            <li> To calculate the moment about point A we must multiply the forces acting on the beam by the distances it is from point A.</li>
            <li> Moment about point A = -(F)($F_x$)+(P)($P_x$), Which will come out to ${{correct_answers.momentA}}\ {{params.unitsForce}}{{params.unitsDist}}$ </li>
        </ul>
    </pl-hint>
</pl-solution-panel>",,,"Refer to the diagram labeled ""distributedForces3.png"".  Determine the magnitude of the resultant forces and their distance from point A. Then compute the moment about point A in N-m.  Given:  Distributed forces: FD = 200 N PD = 150 N Lengths: L1 = 3 m L2 = 2 m Determine:  Resultant force F Resultant force P Distance F from point A Distance P from point A Moment about point A",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Distributed forces,Statics,Force anylisis,"Moments,Reaction forces,Distributed forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,Distributed Forces
14,distributedForces4,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Distributed forces"",
    ""stem"":""Statics"",
    ""topic"": ""force anylisis"",
    ""tags"": [""moments"", ""reaction forces"",""distributed forces""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""distributedForces4.png""></pl-figure>
    <p>Compute the moment about point A in ${{params.unitsForce}}$-${{params.unitsDist}}$</p>
    <p>Let the path of the distributed force be modeled as the function w(x), $ \mathbf{F}_D = {{params.forceF}} {{params.unitsForcee}}$</p>
    <P>Let the length $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$ and Let $ \mathbf{k} = {{params.constant}}$.</P>
</pl-question-panel>

<pl-number-input answers-name=""momentA"" comparison=""sigfig"" digits=""3"" label=""Moment about point A =""></pl-number-input>



","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee


    
	
    constant=math.randomInt(300,800)/1000;
   
	length1= ((math.randomInt(3,6))/constant)-1;
	length1=math.round(length1*10)/10;
    forceF=constant*(length1**3);
    forceF=math.round(forceF*10)/10;

   
F=(constant*(length1)**4)/4;
Fxx=(4*length1)/5;
momentA=F*Fxx;

data = {
    params: {
         forceF: forceF,
         constant:constant,
        length1: length1,
      
        unitsForcee:unitsForcee,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    momentA:momentA,
  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Break down the distributed force to one single concentrated force.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> Place The concentrated force at the centroid of the function.</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> To compute the concentrated force you must take the integral of the function modeling the distributed force. </li>
            <li> when computing the integral from 0 to ${{params.length1}}$ of w(x) you should get F= $({{params.constant}})({{params.length1}})^4/4$</li>
            <li> To compute the centroid of the function it is simply the integral of (x)(w(x)) divided by the force or the integral of w(x).</li>
            <li> when computing the integral from 0 to ${{params.length1}}$ of (x)(w(x)) you should get $({{params.constant}})({{params.length1}})^5/5$. Dividing this by the force you should get $ 4/5({{params.length1}})$.  </li>
            
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
            <li> To calculate the moment about point A we must multiply the force acting on the beam by the distance it is from point A.</li>
            <li> When computing the moment about A you should get, $M_A= (F)(Distance) = ((({{params.constant}})({{params.length1}})^4)/4)( 4/5({{params.length1}})) = {{correct_answers.momentA}}\ {{params.unitsForce}}{{params.unitsDist}}$</li>
        </ul>
    </pl-hint>
</pl-solution-panel>",,,"Refer to the diagram labeled ""distributedForces4.png"".  Compute the moment about point A in N-m.  Given:  Path of the distributed force modeled as the function w(x): FD = 300 N Length: L1 = 4 m Constant: k = 5 (for example) Determine:  Moment about point A",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Distributed forces,Statics,Force anylisis,"Moments,Reaction forces,Distributed forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Distributed Forces, Static Equilibrium"
15,distributedForces5,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Distributed forces"",
    ""stem"":""Statics"",
    ""topic"": ""force anylisis"",
    ""tags"": [""moments"", ""reaction forces"",""distributed forces""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""distributedForces5.png""></pl-figure>
    <p>Determine the reaction force at point B so that the moment about A is balanced out to zero.</p>
    <p>Let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$ and let the distributed force $ \mathbf{F}_D={{params.forceD}} {{params.unitsForcee}}$ </p>
    <p>Note: The Green distributed force is modeled by the function w(x), where (w= weight and x= distance) and the red distribted force is a quarter cirlce.</p>
</pl-question-panel>
<pl-number-input answers-name=""reactionB"" comparison=""sigfig"" digits=""3"" label=""Reaction force at B =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee


    
	
    constant=math.randomInt(200,300)/1000;
   
	length1= (math.randomInt(15,20));
	length2= length1*(math.randomInt(600,620))/1000;
    length3=.5*length2;

    length2=math.round(length2*100)/100;
    length3=math.round(length3*100)/100;
    counstant=math.round(constant*100)/100;

forceD=(constant*(length2**2))/(math.randomInt(130,140)/100);
forceD=math.round(forceD*100)/100;
//Green
   FG=(constant*(length2)**3)/(3);
   FGX=(3/4)*length1;
//RED
FR=((Math.PI)*(constant*(length1**2))**2)/4;
FRX=(4*(length3+length3))/((Math.PI)*3);
//purple
FP=(forceD*length1)/(2);
FPX=(1/3)*length1;
//Orange
FO=forceD*length3;
FOX=length3/2;
//solution
reactionB=(-(length3+length2-FGX)*(FG)-(length3-FRX)*(FR)+(length1+length3-FPX)*(FP)+(length1+length1+length3-FOX)*(FO))/(length1+length3);

reactionB=Math.abs(reactionB);

data = {
    params: {
         forceD: forceD,
         constant:constant,
        length1: length1,
        length2:length2,
        length3:length3,
      
        unitsForcee:unitsForcee,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    reactionB:reactionB,
  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Break down the 4 distributed forces to 4 single concentrated forces.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> Place the 4 concentrated forces at there centroids.</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> To convert the distributed force in green into a concentrated force you must take the intagrel of the function w(x).</li>
            <li> To convert the other 3 distributed forces to 3 concentrated forces you must compute the areas of the shapes by using the given lengths and the (distributed force per unit length) as the heights. </li>
            <li> To compute the centroid of the distributed force in green we must simply take the integral of (x)(w(x)) divided by the force or the integral of w(x).</li>
            <li> To compute the centroids of the other 3 shapes we must know the following information: centroid of a quarter circle = (4)(r)/(3$\pi$), Triangle = 1/3(Base) , Square= (Base)/2 </li>
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
        <li> Green distributed load into a concentrated force: $F_G$ = integral from 0 to ${{params.length1}}$ of w(x) = $(({{params.constant}})({{params.length2}})^3)/3.$ </li>
        <li> Red distributed load into concentrated force: $F_R$ = $\pi(w({{params.length1}})^2)/4$. </li>
        <li> Purple distributed load into a concentrated force: $F_P$ = $ ({{params.forceD}})({{params.length1}})/2$ </li>
        <li> Orange distributed load into a concentrated force: $F_O$ = $({{params.forceD}})({{params.length1}})$</li>

        <li> Green centroid position: $G_x$ = integral from 0 to ${{params.length1}}$ of w(x)(x) devided by the $F_G$ = $(({{params.constant}})({{params.length2}})^4/4) / (({{params.constant}})({{params.length2}})^3/3) = (3/4)({{params.length1}})$</li>
        <li> Red centroid position: $R_x = (4)(2)({{params.length3}})/3\pi$</li>
        <li> Purple centroid position: $P_x = (1/3)({{params.length1}})$</li>
        <li> Orange centroid position: $O_x = {{params.length3}}/2$</li>
        </ul>
    </pl-hint>
    <pl-hint level=""5"" data-type=""text"">
    <ul>
    <pl> Now that we have all 4 of the concentrated forces and there centroid positions, we can now take the moment about point A to solve for reaction force at point B ($B_y$).</pl>
    <pl>$ \Sigma M_A = 0 \implies B_y(L_1+L_2) + F_G(L_3+L_2-G_x) + F_R(L_3-R_x) - F_P(L_3+L_1-P_x) - F_O(L_1+L_3+L_3-O_x) = 0 .$</pl>
    <pl> Now you can solve for $B_y$ to obtain a solution of $B_y = {{correct_answers.reactionB}}\ {{params.unitsForce}}$<pl>
    </ul>
    </pl-hint>
</pl-solution-panel>",,,"determine the reaction force at point b so that the moment about a is balanced out to zero.
let the lengths $ \mathbf{l}_1 = 2.5 \, \text{m}$, $ \mathbf{l}_2 = 1.8 \, \text{m}$, $ \mathbf{l}_3 = 3.2 \, \text{m}$ and let the distributed force $ \mathbf{f}_d= 500 \, \text{n}$ 
note: the green distributed force is modeled by the function w(x), where (w= weight and x= distance) and the red distribted force is a quarter cirlce.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Distributed forces,Statics,Force anylisis,"Moments,Reaction forces,Distributed forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium, Distributed Forces"
16,FramesAndMachines,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines"",
	""stem"": ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","


<pl-question-panel>
    <pl-figure file-name=""frame1.png""></pl-figure>
    <p> The Frame supports the load $ \mathbf{W} = {{params.W}} {{params.unitsForce}}$. </p>
    <p> Neglecting the weights of the members and compute the magnitude of the horizontal and verticle components of all forces acting at points A,B,C,D,E,and F. </p>
    <p> Let the lengths $ \mathbf{L}_1 = {{params.l1}} {{params.unitsDist}} $, $ \mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.l3}} {{params.unitsDist}}, $ \mathbf{L}_4 = {{params.l4}} {{params.unitsDist}},and radious $ \mathbf{R} = {{params.radious}} {{params.unitsDist}} </p>
  </pl-question-panel>
    
  <pl-number-input answers-name=""AX"" comparison=""sigfig"" digits=""3"" label=""Ax=""></pl-number-input>
  <pl-number-input answers-name=""AY"" comparison=""sigfig"" digits=""3"" label=""Ay=""></pl-number-input>
  <pl-number-input answers-name=""BX"" comparison=""sigfig"" digits=""3"" label=""Bx=""></pl-number-input>
  <pl-number-input answers-name=""BY"" comparison=""sigfig"" digits=""3"" label=""By=""></pl-number-input>
  <pl-number-input answers-name=""CX"" comparison=""sigfig"" digits=""3"" label=""Cx=""></pl-number-input>
  <pl-number-input answers-name=""CY"" comparison=""sigfig"" digits=""3"" label=""Cy=""></pl-number-input>
  <pl-number-input answers-name=""DX"" comparison=""sigfig"" digits=""3"" label=""Dx=""></pl-number-input>
  <pl-number-input answers-name=""DY"" comparison=""sigfig"" digits=""3"" label=""Dy=""></pl-number-input>
  <pl-number-input answers-name=""EX"" comparison=""sigfig"" digits=""3"" label=""Ex=""></pl-number-input>
  <pl-number-input answers-name=""EY"" comparison=""sigfig"" digits=""3"" label=""Ey=""></pl-number-input>
  <pl-number-input answers-name=""FX"" comparison=""sigfig"" digits=""3"" label=""Fx=""></pl-number-input>
  <pl-number-input answers-name=""FY"" comparison=""sigfig"" digits=""3"" label=""Fy=""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	W = (math.randomInt(100,500));//the force
	l1= (math.randomInt(150,250))/100; //length of l1 in m or ft
	l2= (math.randomInt(300,400))/100;
    l3= (math.randomInt(150,250))/100;
    l4=(math.randomInt(40,60))/100;
	radious=l4;
if(unitSel>1){
    
    l1=l1*3;
    l2=l2*3;
    l3=l3*3;
    l4=l4*3;
    radious=radious*3;
}






//------- solving for reactions forces Dx,Ax,Ay
DX=((l2+l3+radious)*(W))/(l1+l1+l1+l4);
DY=0;
AX=DX;
AY=W;

// -------solving for the forces on member B-F
EY=((l2+l3)*(W))/(l2);
EX=EY*2;
//by semitry 
CY=EY;
CX=EX;

BY=EY-W;
BX=EX-W;
// point F
FX=W;
FY=W;

data = {
    params: {
         W: W,
        l1: l1,
        l2: l2,
        l3: l3,
        l4: l4,
   radious: radious,
   unitsForce:unitsForce,
   unitsDist:unitsDist
},

    correct_answers: { 
    AX:AX,
    AY:AY,
    BX:BX,
    BY:BY,
    CX:CX,
    CY:CY,
    DX:DX,
    DY:DY,
    EX:EX,
    EY:EY,
    FX:FY,
    FY:FY
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""distributedForces1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First compute the reaction forces at points A and D by $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ and $ \Sigma M_A = 0 $ of the whole system.</pl-hint>
    <pl-hint level=""2"" data-type=""text""> Break up the system into 4 seprate parts. Beam AD,BF,CE, and pully F, and right the X and Y reaction forces acting at each point on all 4 parts.  </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        <ul>
        Solving reaction forces:
        <li>$ \Sigma F_x = 0, \implies A_x + D_x = 0, \implies A_x = -D_x$</li>
        <li>$ \Sigma F_y = 0, \implies A_y - W = 0, \implies A_y = W, \implies A_y = {{params.W}} {{params.unitsForce}}$</li>
        <li>$ \Sigma M_A = 0, \implies (D_x)(L_1+L_2+L_3+L_4) - (W)(L_1+L_2+r) = 0.$ Solving for $D_x = (W)(L_1+L_2+r) / (L_1+L_2+L_3+L_4) = {{correct_answers.DX}}$ ${{params.unitsForce}}$</li>
        </ul>
    </pl-hint>



    <pl-hint level=""3"" data-type=""text""> 
        <ul>
        Reminder: If 2 parts share 1 point then the reactions on each parts must be equal oppisite to each other.
            <li> Example: when writing the reaction forces on beam AD. </li>
            <li> Point A $\implies$ 2 reaction forces pointing right and up, (positve x direction) and (positive y direction).</li>
            <li> Point B $\implies$ 2 reaction forces pointing right and up, (positve x direction) and (positive y direction).</li>
            <li> Point C $\implies$ 2 reaction forces pointing right and up, (positve x direction) and (positive y direction).</li>
            <li> Point D $\implies$ 1 reaction forces pointing right and up, (positve x direction).</li>
            <li> There will also be a tension force pointing to the  right, (positive x direction)</li>
         -
            <li> Example: when writing the reaction forces on beam CE. </li>
            <li> Point C $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
            <li> Point E $\implies$ 2 reaction forces pointing right and up, (positive x direction) and (positive y direction).</li>
        -
            <li> Example: when writing the reaction forces on beam BF. </li>
            <li> Point B $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
            <li> Point E $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
            <li> Point F $\implies$ 2 reaction forces pointing left and down, (negative x direction) and (negative y direction).</li>
        -
            <li> Example: when writing the reaction forces on pully F. </li>
            <li> Point F $\implies$ 2 reaction forces pointing right and up, (positive x direction) and (positive y direction).</li>
            <li> There will also be a 2 tension forces pointing left and down.</li>
        -
            <li> Now that everything is set up you can now start solving each part by doing $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ and $ \Sigma M_A = 0. $</li>

        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        <ul>
        Solving reaction forces:
        <li> Beam BF: $ \Sigma M_B = 0 \implies -(E_y)(L_2) - (W)(L_2+L_3+r)=0 \implies |E_y| = (W)(L_2+L_3+r)/-l_2 = {{correct_answers.DX}}$ ${{params.unitsForce}}$</li>
        -
        <li> Beam CE: tan($\theta$) = (opp/adj) $\implies$ tan($\theta$) =$ (L_1/L_2) \implies \theta = $atan$(L_1/L_2)$
        <li> Now we can solve for $E_x$: tan($\theta$) = $ E_y/E_x \implies |E_x| = E_y /$ tan($\theta$) = ${{correct_answers.EY}}$ ${{params.unitsForce}}$ </li>
        <li> By $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ we can come to the conclusion that $C_x = E_x$ and $C_y = E_y$</li>
        -
        <li> Pully F: $ \Sigma F_x = 0 $, $ \Sigma F_y = 0 $ we can come to the conclusion that $F_y = W $ and $ F_x = W $</li>
        -
        <li>Beam BF: Now that we have $F_x,F_y,E_x,E_y$ we can solve for the reactions at point B.</li>
        <li>$ \Sigma F_x = 0 $, $ \Sigma F_y = 0 \implies B_x = E_x - F_x,$ and $ B_y = E_y - F_y$</li>
        <li>$B_x = {{correct_answers.BX}}$ {{params.unitsForce}}</li>
        <li>$B_y = {{correct_answers.BY}}$ {{params.unitsForce}}</li>

        -
        <li>Note: The solutions want the magnitude of the forces which is why they all come out positve.</li>
        <li>When you get negative solutions for reaction forces, that indactes that you have to switch the force direction.</li>
        <li>For example: This is why when solving for $B_x$ it NOT $B_x = E_x + F_x$ even though that is technically correct with the way we initially drew the forces.</li>
        <li>It is beacuse the true direction of $E_x$ on beam BF is to the right (positive x direction) regardless of the direction of our initial guess. </li>
        </ul>
    </pl-hint>
</pl-solution-panel>
",,,"the frame supports the load $ \mathbf{w} = 500 n$. 
neglecting the weights of the members, compute the magnitude of the horizontal and vertical components of all forces acting at points a, b, c, d, e, and f. 
let the lengths $ \mathbf{l}_1 = 2 m $, $ \mathbf{l}_2 = 3 m $, $ \mathbf{l}_3 = 4 m $, $ \mathbf{l}_4 = 5 m $, and radius $ \mathbf{r} = 1 m $.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines,Force anylisis,Statics,"Frames,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Reaction Forces, Distributed Forces"
17,joints1,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Method of joints"",
	""stem"" : ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment"",""trusses""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
    <pl-figure file-name=""truss1.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at joints A and E.</p>
    <p>Using method of joints, also compute the force in each member as a result of the load (W), and determine whether the member is in compression or tension. </p>
    <p>Let the weight $ \mathbf(W) = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$ and $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$</p>
    <p>Note: denote tension as positve, and compression as negative (-).</p>
  </pl-question-panel>
    

  <pl-number-input answers-name=""reactionEx"" comparison=""sigfig"" digits=""3"" label="" reaction Ex =""></pl-number-input>
  <pl-number-input answers-name=""reactionEy"" comparison=""sigfig"" digits=""3"" label="" reaction Ey =""></pl-number-input>
  <pl-number-input answers-name=""reactionAx"" comparison=""sigfig"" digits=""3"" label="" reaction Ax =""></pl-number-input>
  <pl-number-input answers-name=""reactionAy"" comparison=""sigfig"" digits=""3"" label="" reaction Ay =""></pl-number-input>

  <pl-number-input answers-name=""AB"" comparison=""sigfig"" digits=""3"" label=""Member AB =""></pl-number-input>
  <pl-number-input answers-name=""BC"" comparison=""sigfig"" digits=""3"" label=""Member BC =""></pl-number-input>
  <pl-number-input answers-name=""CD"" comparison=""sigfig"" digits=""3"" label=""Member CD =""></pl-number-input>
  <pl-number-input answers-name=""DE"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""AD"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""AE"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""DB"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight= (math.randomInt(100,500));//the force
	length2= (math.randomInt(3,20)); //length of l1 in m or ft

	length1= length2*((math.randomInt(420,750))/1000);
    length1=(Math.round(length1*10))/10;

    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length1=(Math.round(length1*10))/10;
    }
//testing values
//length1=2.3094;
//length2=4;
//weight=1;

  thetaRAD=Math.atan(length1/length2);



    //from joint C
    BC=weight/(Math.sin(thetaRAD));//Tension
    CD=-weight*((Math.cos(thetaRAD))/(Math.sin(thetaRAD)));//compression

    //from joint B
    AB=CD*-1;//tension
    BD=-weight;//compression

    //from joint D
    DE=CD+CD;
    AD=BC
    
    //from joint E
    AE=0


//Reaction forces

reactionEx=DE*-1
reactionEy=0
reactionAx=DE*-1
reactionAy=weight


data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
       
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

reactionEx:reactionEx,
reactionEy:reactionEy,
reactionAx:reactionAx,
reactionAy:reactionAy,
    AB:AB,
    BC:BC,
    CD:CD,
    DE:DE,
    AD:AD,
    AE:AE,
    BD:BD,

},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"Refer to the diagram labeled ""truss1.png"".  Compute the magnitude of the reaction forces at joints A and E. Using the method of joints, also compute the force in each member as a result of the load W, and determine whether the member is in compression or tension.  Given:  Weight: W = 600 N (for example) Lengths: L1 = 3 m (for example) L2 = 4 m (for example) Note: Denote tension as positive, and compression as negative.  Determine:  Reaction Ex Reaction Ey Reaction Ax Reaction Ay Force in member AB (State if it's in tension or compression) Force in member BC (State if it's in tension or compression) Force in member CD (State if it's in tension or compression) Force in member DE (State if it's in tension or compression) Force in member AD (State if it's in tension or compression) Force in member AE (State if it's in tension or compression) Force in member BD (State if it's in tension or compression)",1f435c36-1126-43b0-aba5-627eeb2e10f9,Method of joints,Force anylisis,Statics,"Frames,Vector,Force,Moment,Trusses",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Statics and Mechanics, Reaction Forces"
18,joints2,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Method of joints"",
	""stem"" : ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""joints"",""trusses""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""truss2.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at joints A and F.</p>
    <p>Using method of joints, also compute the force in each member as a result of the load (W), and determine whether the member is in compression or tension. </p>
    <p>Let the weight $ \mathbf(W) = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$ and $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$</p>
    <p>Note: denote tension as positve, and compression as negative (-), all triangles are 45-45-90.</p>
</pl-question-panel>

    

  <pl-number-input answers-name=""reactionFx"" comparison=""sigfig"" digits=""3"" label="" reaction Fx =""></pl-number-input>
  <pl-number-input answers-name=""reactionFy"" comparison=""sigfig"" digits=""3"" label="" reaction Fy =""></pl-number-input>
  <pl-number-input answers-name=""reactionAx"" comparison=""sigfig"" digits=""3"" label="" reaction Ax =""></pl-number-input>
  <pl-number-input answers-name=""reactionAy"" comparison=""sigfig"" digits=""3"" label="" reaction Ay =""></pl-number-input>

  <pl-number-input answers-name=""AB"" comparison=""sigfig"" digits=""3"" label=""Member AB =""></pl-number-input>
  <pl-number-input answers-name=""BC"" comparison=""sigfig"" digits=""3"" label=""Member BC =""></pl-number-input>
  <pl-number-input answers-name=""CD"" comparison=""sigfig"" digits=""3"" label=""Member CD =""></pl-number-input>
  <pl-number-input answers-name=""DE"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""EF"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""FG"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""GH"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""HI"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""IJ"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""AJ"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""BJ"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""BI"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""CI"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""CH"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""DH"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""DG"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""EG"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight= (math.randomInt(100,500));//the force
	length1= (math.randomInt(15,30)); //length of l1 in m or ft

	length2= length1*((math.randomInt(650,680))/1000);
    length3= length1*((math.randomInt(300,350)))/1000;
    length1=(Math.round(length1*10))/10;
    length2=(Math.round(length2*10))/10;
    length3=(Math.round(length3*10))/10;
    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length3=length3*3;
        length1=(Math.round(length1*10))/10;
        length2=(Math.round(length2*10))/10;
        length3=(Math.round(length3*10))/10;
    }




//reactions
reactionFy=(length1*weight)/(length1+length2);
reactionFx=0;
reactionAx=0;
reactionAy=weight-reactionFy;

trig=1/Math.sqrt(2);

AB=-reactionAy/trig;
AJ=-AB*trig;
BJ=0;
IJ=reactionAy;
BI=-AB;
BC=(-BI*trig)+(AB*trig);
HI=IJ+(BI*trig);
CI=-BI*trig;
CH=-CI/(trig);
CD=BC-(CH*trig);
EF=-reactionFy/trig;
FG=-EF*trig;
DE=FG;
EG=FG;
DG=EF;
DH=-DG*trig;
GH=HI+(CH*trig);



data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
        length3: length3,
       
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

reactionEx:reactionFx,
reactionEy:reactionFy,
reactionAx:reactionAx,
reactionAy:reactionAy,
    AB:AB,
    BC:BC,
    CD:CD,
    DE:DE,
    DE:DE,
    EF:EF,
    FG:FG,
    GH:GH,
    HI:HI,
    IJ:IJ,
    AJ:AJ,
    BJ:BJ,
    BI:BI,
    CI:CI,
    CH:CH,
    DH:DH,
    DG:DG,
    EG:EG,

},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"Refer to the diagram labeled ""truss2.png"".  Compute the magnitude of the reaction forces at joints A and F. Using the method of joints, also compute the force in each member as a result of the load W, and determine whether the member is in compression or tension.  Given:  Weight: W = 500 N (for example) Lengths: L1 = 2 m (for example) L2 = 3 m (for example) L3 = 4 m (for example) All triangles are 45-45-90. Note: Denote tension as positive, and compression as negative.  Determine:  Reaction Fx Reaction Fy Reaction Ax Reaction Ay Force in member AB (State if it's in tension or compression) Force in member BC (State if it's in tension or compression) Force in member CD (State if it's in tension or compression) Force in member DE (State if it's in tension or compression) Force in member EF (State if it's in tension or compression) Force in member FG (State if it's in tension or compression) Force in member GH (State if it's in tension or compression) Force in member HI (State if it's in tension or compression) Force in member IJ (State if it's in tension or compression) Force in member AJ (State if it's in tension or compression) Force in member BJ (State if it's in tension or compression) Force in member BI (State if it's in tension or compression) Force in member CI (State if it's in tension or compression) Force in member CH (State if it's in tension or compression) Force in member DH (State if it's in tension or compression) Force in member DG (State if it's in tension or compression) Force in member EG (State if it's in tension or compression)",1f435c36-1126-43b0-aba5-627eeb2e10f9,Method of joints,Force anylisis,Statics,"Frames,Vector,Force,Joints,Trusses",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,Reaction Forces
19,myForceVector,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Add two numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
A force of magnitude {{params.Fmag}} {{params.unitsForce}} has its origin at ({{params.x1}}, {{params.y1}}) and ends at ({{params.x2}},{{params.y2}}). 
<p>
What are the components (in {{params.unitsForce}}) of the force?
</pl-question-panel>

<pl-number-input answers-name=""Fx"" comparison=""sigfig"" digits=""3"" label=""X-component""></pl-number-input>
<pl-number-input answers-name=""Fy"" comparison=""sigfig"" digits=""3"" label=""Y-component""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {
    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""cm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""inch"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;

let x1 = 0;
let x2 = 0;
let y1 = 0;
let y2 = 0;

Fmag = 5*math.randomInt(10,50);


while (x1 === 0 && x2 === 0 && y1 === 0 && y2 === 0) {
    x1 = math.randomInt(-10,10);
    y1 = math.randomInt(-10,10);
    x2 = math.randomInt(-10,10);
    y2 = math.randomInt(-10,10);
}

x = x2 - x1;
y = y2 - y1;

len = math.sqrt(x*x + y*y);

ux = x/len;
uy = y/len;

unitVec = [ux,uy];
F = math.multiply(Fmag, unitVec);

console.log(`x1 = ${x1}, y1 = ${y1}, x2 = ${x2}, y2 = ${y2}`);

data = {
    params: { 
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        Fmag: Fmag,
        unitsForce: unitsForce
    },
    correct_answers: {
        Fx: F[0],
        Fy: F[1]
    },
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"a force of magnitude 50 n has its origin at (2, 3) and ends at (6, 8).

what are the components (in n) of the force?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Add two numbers,Add two numbers,Algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 018B,Vector Analysis
20,myMoment,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""simple moment"",
	""stem"": ""moment about point"", 
    ""topic"": ""statics"",
    ""tags"": [""basic"", ""vector"", ""force"", ""moment""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel>
    <pl-figure file-name=""Picture2.png""></pl-figure>
    <p> Consider the force $ \mathbf {F}= {{params.F}} {{params.unitsForce}}$ acting at point B. </p>
    <p>If the distance from point A to point B is $ \mathbf {d}={{params.d}} {{params.unitsDist}}$ and if the angle between the force and the negative y-axis is $ \theta={{params.ang}}$ (degrees).</p>
    <p> Compute the moment about point A in {{params.unitsForce}}-{{params.unitsDist}}</p>
  
  </pl-question-panel>
  
  <pl-number-input answers-name=""moment"" comparison=""sigfig"" digits=""3"" label=""Moment about point A=""></pl-number-input>
  ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;


	F = math.randomInt(50,500);//the force
	d = math.randomInt(10,50);//distance between a-b
	ang = math.randomInt(20,40);//angle theta
    
	angRad=ang*(Math.PI/180)

    moment=d*F*math.cos(angRad)

data = {
    params: {F: F, d: d,ang: ang,unitsForce:unitsForce,unitsDist:unitsDist},
    correct_answers: { moment: moment},
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"consider the force $ \mathbf {f}= 50 n$ acting at point b. 
if the distance from point a to point b is $ \mathbf {d}= 2 m$ and if the angle between the force and the negative y-axis is $ \theta= 45$ degrees.
 compute the moment about point a in n-m.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Simple moment,Moment about point,Statics,"Basic,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 103,Distributed Forces
21,reactionForce,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines"",
	""stem"": ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment"",""reaction forces""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""frame5.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at points B,D,and F caused by the weight (W).</p>
    <p>Let $ \mathbf{W} = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf {L}_1 = {{params.length1}} {{params.unitsDist}}$ , $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$ , $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$</p>
</pl-question-panel>
  <pl-number-input answers-name=""reactionB"" comparison=""sigfig"" digits=""3"" label=""Reaction at pin B =""></pl-number-input>
  <pl-number-input answers-name=""reactionD"" comparison=""sigfig"" digits=""3"" label=""Reaction at Pin D =""></pl-number-input>
  <pl-number-input answers-name=""reactionF"" comparison=""sigfig"" digits=""3"" label=""Reaction at roller F =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight = (math.randomInt(100,500));//the force
	length1= (math.randomInt(400,700))/1000; //length of l1 in m or ft

	length2= length1*((math.randomInt(550,650))/1000);
    length3= length1*((math.randomInt(350,450))/1000);

    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    
if(unitSel>0){
    
    length1=length1*3;
    length2=length2*3;
    length3=length3*3;
   
}
// Using FBD A-C
//moment about point A
reactionB=(weight*(length1+length2))/(length1*0.866025404);

//using FBD B-D
//sum force in x direction
reactionD=reactionB;

//FBD D-E
//moment about E
reactionF=(reactionD*0.866025404*(length3+length3))/(length3);

data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
        length3: length3,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    reactionB:reactionB,
    reactionD:reactionD,
    reactionF:reactionF
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"Refer to the diagram labeled ""frame5.png"".  Compute the magnitude of the reaction forces at points B, D, and F caused by the weight W.  Given:  Weight: W = 750 N (for example) Lengths: L1 = 2.5 m (for example) L2 = 3.5 m (for example) L3 = 4 m (for example) Determine:  Reaction at pin B Reaction at Pin D Reaction at roller F",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines,Force anylisis,Statics,"Frames,Vector,Force,Moment,Reaction forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110",Reaction Forces
22,sqeezer,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Mechines"",
    ""stem"" : ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment""],
    ""prereqs"": """",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
    ""codelang"": ""javascript""
    }","<pl-question-panel>
    <pl-figure file-name=""frame4.png""></pl-figure>
    <p>A pair of forces (F) is applied to the eyelet squeezer. The green block at A is able to slide back and forth with negligible friction.</p>
    <p>Compute the compressive force acting on the orange eyelet as a result of the two forces in {{params.unitsForce}}</p>
    <p>let the force $ \mathbf(F) = {{params.force}} {{params.unitsForce}}$ and lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$ and $ \mathbf{L}_4 = {{params.length4}} {{params.unitsDist}}$</p>
</pl-question-panel>
    

  <pl-number-input answers-name=""forceP"" comparison=""sigfig"" digits=""3"" label="" Compressive force =""></pl-number-input>
  
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""mm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""in"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	force= (math.randomInt(10,100));//the force
	length1= (math.randomInt(40,100)); //length of l1 in m or ft
    
    

	length2= length1*((math.randomInt(780,820))/1000);
    length3= length1*((math.randomInt(220,260))/1000);
    length4= length1*((math.randomInt(80,120))/1000);


    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    length4=(Math.round(length4*100))/100;
    if(unitSel>0){
    
        length1=length1/25;
        length2=length2/25;
        length3=length3/25;
        length4=length4/25;

    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    length4=(Math.round(length4*100))/100;
        
    }

    //testvals
    //length1=62.5
    //force=80
    //length2=50
    //length3=15
    //length4=6.25
    

theta=(Math.atan(length3/length1))+(Math.atan((length3+length4)/length2));
distab=Math.sqrt((length1**2)+(length3)**2);
reactionB=(force*(length1+length2))/(distab*Math.sin(theta));
forceP=reactionB*Math.cos(Math.atan((length3+length4)/length2));







data = {
    params: {
        force:force,
        length1: length1,
        length2: length2,
        length3: length3,
        length4: length4,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

 forceP:forceP


},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"Refer to the diagram labeled ""frame4.png"".  A pair of forces (F) is applied to the eyelet squeezer. The green block at point A is able to slide back and forth with negligible friction.  Compute the compressive force acting on the orange eyelet as a result of the two forces.  Given:  Force: F = 450 N (for example) Lengths: L1 = 2 m (for example) L2 = 2.5 m (for example) L3 = 3 m (for example) L4 = 1.5 m (for example) Determine:  Compressive force on the orange eyelet.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and mechines,Force anylisis,Statics,"Frames,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Distributed Forces, Reaction Forces"
23,RigidBodies1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D rigid bodies"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dRigidBodies1.png""></pl-figure>
      <p>The two ropes hold up the orange sign of weight ${{params.w}}$ ${{params.unitsForce}}$</p>
      <P> Neglect the weight of the blue beam that connects points A and B. Let the length $\mathbf{L}_1 = {{params.L}}$ $ {{params.unitsDist}}$. </P>
      
      <p>Compute the tension in ropes BD and BC, also compute the reaction forces action on the ball joint A.</p>    
</pl-question-panel>


<pl-number-input answers-name=""T1"" comparison=""sigfig"" digits=""3"" label=""Tension in rope BD =""></pl-number-input>
<pl-number-input answers-name=""T2"" comparison=""sigfig"" digits=""3"" label=""Tension in rope BC =""></pl-number-input>

<pl-number-input answers-name=""Ax"" comparison=""sigfig"" digits=""3"" label=""Reaction force acting on A: x direction =""></pl-number-input>
<pl-number-input answers-name=""Ay"" comparison=""sigfig"" digits=""3"" label=""Reaction force acting on A: y direction =""></pl-number-input>
<pl-number-input answers-name=""Az"" comparison=""sigfig"" digits=""3"" label=""Reaction force acting on A: z direction =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 w = math.randomInt(100,500);
L = math.randomInt(1,10);

 
 
 length2 =  math.sqrt((2*L)*(2*L) + (2*L)*(2*L)+ L*L);

 x1 = -2*L/length2;
 y1 = -2*L/length2;
 z1 = L/length2;

 x2 = L/length2;
 y2 = -2*L/length2;
 z2 = 2*L/length2;

 T1 = -(w*L)/(2*L*z1+(2*L*x1/x2));
 T2 = (-T1*x1/x2);

 Ax = -T1*x1-T2*x2;
 Ay = -T1*y1-T2*y2;
 Az = -T1*z1-T2*z2+w;

    
    


data = {
    params: {
    w:w,
    L:L,
    unitsForce:unitsForce,
    unitsDist:unitsDist,
       
},

    correct_answers: { 
   Ax:Ax,
   Ay:Ay,
   Az:Az,
   T1:T1,
   T2:T2,
   

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dRigidBodies1.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First, define the tension in cable BD and BC as a vector expression. You can do this by multiplying the tension in the cables by the according unit vector of the cable, starting from point B.  </pl-hint>
    <pl-hint level=""2"" data-type=""text"">At this point, we don't know the tension in the cable so we can just call the tension in cable BD $\mathbf{T}_1$ and the tension in the cable BC $\mathbf{T}_2$.</p>
        <p>Let the unit vector for cable BD be $\frac{-2L_1 \hat{i}-2L_1\hat{j}+L_1\hat{z}}{\sqrt{2L_1^2+2L_1^2+L_1^2}}$ and the unit vector for BC be
        $\frac{L_1\hat{i}-2L_1\hat{j}+2L_1\hat{z}}{\sqrt{L_1^2+2L_1^2+2L_1^2}}$.</p>
        <p>So that the vector expression for $ T_1$ is $\vec{T}_1  = (T_1) \frac{-2L_1 \hat{i}-2L_1\hat{j}+L_1\hat{z}}{\sqrt{2L_1^2+2L_1^2+L_1^2}}$ and the vector expression for $T_2$ is $ \vec{T}_2  = (T_1) \frac{L_1\hat{i}-2L_1\hat{j}+2L_1\hat{z}}{\sqrt{L_1^2+2L_1^2+2L_1^2}}$.</p>
        </pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                    Now that we set up our tensions in terms of vectors we can start solving.
                    <p>Let's start with summing up the forces in all directions.</p>
                    <li> $\Sigma{F}_x = 0 \implies Ax+\vec{T}_1\hat{i}+\vec{T}_2\hat{i}=0 $</li>
                    <li> $\Sigma{F}_y = 0 \implies Ay+\vec{T}_1\hat{j}+\vec{T}_2\hat{j}=0 $</li>
                    <li> $\Sigma{F}_z = 0 \implies Az+\vec{T}_1\hat{k}+\vec{T}_2\hat{k}-W = 0$  </li>
                    Where Ax, Ay, and Az are the reaction forces at point A.
                    <p>We also need to take the moment about point A to acquire 4 equations to solve for all the unknowns. </p>
                    <p> let the vector $\vec{d}_a$ be the vector that describes the distance from point A to point B. ie $\vec{d}_a = 0\hat{i}+2L_1\hat{j}+0\hat{k}$</p>
                    <p>And let the vector $\vec{d}_w$ be the vector from point A to halfway to point B where the weight vector lies. ie $\vec{d}_w = 0\hat{i}+L_1\hat{j}+0\hat{k}$</p>
                    <li> $\Sigma{M}_A = 0 \implies   \vec{d}_a $ X $ \vec{T}_1+ \vec{d}_a $ X $ \vec{T}_2 + \vec{d}_w $ X $ \vec{W} = 0$ </li>
                    Now you can solve all of the cross-products to acquire $T_1$ and $T_2$.
                    And use the tension to solve for Ax, Ay, and Az. 
                    
                    
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            When solving all of the cross-products we get:
            <li> $\vec{d}_a X \vec{T}_1 = (2L_1)(\vec{T}_1\hat{k}) \hat{i} - (0)\hat{j} + (-2L_1)(\vec{T}_1\hat{i})\hat{k}$</li>
            <li>$\vec{d}_a X \vec{T}_2 = (2L_1)(\vec{T}_2\hat{k}) \hat{i} - (0)\hat{j} + (-2L_1)(\vec{T}_2\hat{i})\hat{k}$</li>
            <li> $\vec{d}_w X \vec{W}  =  (-W)(L_1)\hat{i} + 0 \hat{j} + 0 \hat{k}$</li>
            <p>We can set all of the $\hat{i}$'s = 0,  $\hat{j}$'s = 0 ,and  $\hat{k}$'s = 0 to solve for tension.</p>
            <li> $\hat{i}$ : $(2L_1)(\vec{T}_1\hat{k}) + (2L_1)(\vec{T}_2\hat{k}) - (W)(L_1) = 0$  </li>
            <li> $\hat{j}$ : 0 = 0</li>
            <li> $\hat{k}$ : $(-2L_1)(T_1\hat{i})+(-2L_1)(T_2\hat{i})$ = 0  </li>
            <p>Solving the system of equations we get: $\mathbf{T}_1 = {{corect_answers.T1}} {{params.unitsForce}}$ and $\mathbf{T}_2 = {{corect_answers.T2}} {{params.unitsForce}}$.</P>
            <P> Now that we have our tensions, we can solve for Ax, Ay, and Az using the force equations from earlier.</P>  
            
        </ul>
    </pl-hint>

    <pl-hint level=""5"" data-type=""text""> 
        <ul>
           Using the force equations and our tensions we are able to solve the reaction forces at point A.
           <p>$A_x = {{correct_answers.Ax}}{{params.unitsForce}}</p>
           <p>$A_y = {{correct_answers.Ay}}{{params.unitsForce}}</p>
           <p>$A_z = {{correct_answers.Az}}{{params.unitsForce}}</p>


        </ul>
    </pl-hint>


",,,"the two ropes hold up the orange sign of weight $500$ n. neglect the weight of the blue beam that connects points a and b. let the length $\mathbf{l}_1 = 2$ meters. 
compute the tension in ropes bd and bc, also compute the reaction forces action on the ball joint a.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d rigid bodies,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 103","Analytical Geometry, Reaction Forces, Static Equilibrium"
24,RigidBodies2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D rigid bodies"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
<pl-figure file-name=""3dRigidBodies2.png""></pl-figure>

    <P>The structure is welded to the ground and is in stress from the forces $\mathbf{F}_G = {{params.fg}}$ ${{params.unitsForce}}$, $\mathbf{F}_R = {{params.fr}}$ ${{params.unitsForce}}$, and $ \mathbf{F}_P = {{params.fp}} $ ${{params.unitsForce}}$<P>
    <p>Let the lengths $ \mathbf{L}_1 = {{params.l1}}{{params.unitsDist}}$, $\mathbf{L}_2 = {{params.l2}}$ ${{params.unitsDist}}$, and $\mathbf{L}_3 = {{params.l3}}$ ${{params.unitsDist}}$</p>
    <P>Compute the reaction forces at point A.</P>
    <p>Note:The direction of the force matters when submitting your final answer. Denote clockwise rotation as negative (-) and conter clockwise as positive(+).</p>
</pl-question-panel>


<pl-number-input answers-name=""Ax"" comparison=""sigfig"" digits=""3"" label=""reaction Ax =""></pl-number-input>
<pl-number-input answers-name=""Ay"" comparison=""sigfig"" digits=""3"" label=""reaction Ay =""></pl-number-input>
<pl-number-input answers-name=""Az"" comparison=""sigfig"" digits=""3"" label=""reaction Az =""></pl-number-input>
<pl-number-input answers-name=""Mx"" comparison=""sigfig"" digits=""3"" label=""Moment reaction Mx =""></pl-number-input>
<pl-number-input answers-name=""My"" comparison=""sigfig"" digits=""3"" label=""Moment reaction My =""></pl-number-input>
<pl-number-input answers-name=""Mz"" comparison=""sigfig"" digits=""3"" label=""Moment reaction Mz =""></pl-number-input>


","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 //-----------------------math
    fg = math.randomInt(100,500);
    fr = math.randomInt(100,500);
    fp = math.randomInt(100,500);
    l1 = math.randomInt(1,10);
    l2 = l1*.75;
    l3 = l1*.5;


    Ax = fp;
    Ay = -fr;
    Az = fg;
    Mx = (l3+l2)*fr + l1*fg;
    My = l2*fp + l2*fg;
    Mz = 0


 //----------------------


data = {
    params: {
   unitsDist:unitsDist,
   unitsForce:unitsForce,
   fg:fg,
   fp:fp,
   fr:fr,
   l1:l1,
   l2:l2,
   l3:l3,
       
},

    correct_answers: { 
        Ax:Ax,
        Ay:Ay,
        Az:Az,
        Mx:Mx,
        My:My,
        Mz:Mz,
 
   

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dRigidBodies2.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First, draw the reaction force at point A.</pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        <p>The reaction forces at point A should have 6 components.</p>
        <p>$A_x, A_y, A_z, $ and $M_x, M_y, M_z$.</p>
        <P>Now write out the equations that describe the forces in all directions.</P>
    </pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                   Equations that discribe all of the forces:
                   <li>$\Sigma{F}_x = 0 \implies A_x-F_P =0$</li>
                   <li>$\Sigma{F}_y = 0 \implies A_y+F_R =0$</li>
                   <li>$\Sigma{F}_z = 0 \implies A_z-F_G =0$</li>
                    Moment equations (about point A):
                   <li>$\Sigma{M}_x = 0 \implies M_x-(L_3+L_2)(F_R)-(L_1)(F_G) =0$</li>
                   <li>$\Sigma{M}_y = 0 \implies M_y-(L_2)(F_P)-(L_2)(F_G) =0$</li>
                   <li>$\Sigma{M}_z = 0 \implies M_z =0$</li>

                   With all of these equations you are able to solve for all of the reaction forces at point A.
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
           Reaction forces at point A:
           <li>$A_x = {{correct_answers.Ax}} {{params.unitsForce}}</li>
           <li>$A_y = {{correct_answers.Ay}} {{params.unitsForce}}</li>
           <li>$A_z = {{correct_answers.Az}} {{params.unitsForce}}</li>
           <li>$M_x = {{correct_answers.Mx}} {{params.unitsForce}} {{params.unitsDist}} </li>
           <li>$M_y = {{correct_answers.My}} {{params.unitsForce}} {{params.unitsDist}}</li>
           <li>$M_z = {{correct_answers.Mz}} {{params.unitsForce}} {{params.unitsDist}}</li>

           



        </ul>
    </pl-hint>
",,,"the structure is welded to the ground and is in stress from the forces $\mathbf{f}_g = 500$ n, $\mathbf{f}_r = -300$ n, and $ \mathbf{f}_p = 200 $ n.
let the lengths $ \mathbf{l}_1 = 2$ m, $\mathbf{l}_2 = 3$ m, and $\mathbf{l}_3 = 4$ m.
compute the reaction forces at point a.
note:the direction of the force matters when submitting your final answer. denote clockwise rotation as negative (-) and conter clockwise as positive(+).",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d rigid bodies,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Statics and Mechanics"
25,RigidBodies3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D rigid bodies"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dRigidBodies3.png""></pl-figure>
    
    <P>Compute the reaction forces acting on the smooth bearings at points A,B,and C.</P>
    <P>Let the forces $\mathbf{F}_R = {{params.fr}} {{params.unitsForce}}$, $\mathbf{F}_G = {{params.fg}} {{params.unitsForce}}$, $\mathbf{F}_P = {{params.fp}} {{params.unitsForce}}$,and $\mathbf{F}_B = {{params.fb}} {{params.unitsForce}}$ </P>
    <p>Let the lenghths $ \mathbf{L}_1 = {{params.l1}} {{params.unitsDist}}$, and $ \mathbf{L}_2 = {{params.l2}} {{params.unitsDist}}$</p>
</pl-question-panel>
    
    
    <pl-number-input answers-name=""Ax"" comparison=""sigfig"" digits=""3"" label=""reaction Ax =""></pl-number-input>
    <pl-number-input answers-name=""Ay"" comparison=""sigfig"" digits=""3"" label=""reaction Ay =""></pl-number-input>
    <pl-number-input answers-name=""Az"" comparison=""sigfig"" digits=""3"" label=""reaction Az =""></pl-number-input>
    <pl-number-input answers-name=""Bx"" comparison=""sigfig"" digits=""3"" label=""reaction Bx =""></pl-number-input>
    <pl-number-input answers-name=""By"" comparison=""sigfig"" digits=""3"" label=""reaction By =""></pl-number-input>
    <pl-number-input answers-name=""Bz"" comparison=""sigfig"" digits=""3"" label=""reaction Bz =""></pl-number-input>
    <pl-number-input answers-name=""Cx"" comparison=""sigfig"" digits=""3"" label=""reaction Cx =""></pl-number-input>
    <pl-number-input answers-name=""Cy"" comparison=""sigfig"" digits=""3"" label=""reaction Cy =""></pl-number-input>
    <pl-number-input answers-name=""Cz"" comparison=""sigfig"" digits=""3"" label=""reaction Cz =""></pl-number-input>
    
    

    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 //-----------------------math
    fg = math.randomInt(100,500);
    fr = math.randomInt(100,500);
    fp = math.randomInt(100,500);
    fb = math.randomInt(100,500);

    l1 = math.randomInt(1,10);
    l2 = math.round(l1*2/3*100)/100;



    
    Cy = fg;
    Cz = (fp*l1-fb*l2)/(l1+l1);
    Cx = 0;

    Bz = (fp*(l1+l1+l1)-Cz*(l1+l1+l1)-fg*l2+fb*l1)/(l1+l1);
    Bx = (fr*l1+fg*l1-Cy*(l1+l1))/(l1+l1);
    By = 0;


    Ax = fr-Bx;
    Az = fb+fp-Cz-Bz;
    Ay = 0;




 //----------------------


data = {
    params: {
   unitsDist:unitsDist,
   unitsForce:unitsForce,
   fg:fg,
   fp:fp,
   fr:fr,
   l1:l1,
   l2:l2,
   fb:fb,
       
},

    correct_answers: { 
        Ax:Ax,
        Ay:Ay,
        Az:Az,
        Bx:Bx,
        By:By,
        Bz:Bz,
        Cx:Cx,
        Cy:Cy,
        Cz:Cz,
 
   

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dRigidBodies3.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First, draw all of the reaction forces acting on all of the bearings. </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        <p>The reaction force on bearing A should be $A_x$ and $A_z$</p>
        <p>The reaction forces on bearing B should be $B_x$ and $B_z$</p>
        <p>The reaction forces on bearing C should be $C_y$ and $C_z$</p>
        Now write out the equations that discribe the force in all directions and moments in all directions.

        </pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul>
                   Equations that discribe all of the forces:
                   <li>$\Sigma{F}_x = 0 \implies A_x + B_x -F_R = 0$</li>
                   <li>$\Sigma{F}_y = 0 \implies C_y - F_G =0$</li>
                   <li>$\Sigma{F}_z = 0 \implies A_z + B_z + C_z - F_B -F_P =0$</li>
                    Moment equations (about point A):
                   <li>$\Sigma{M}_x = 0 \implies (B_z)(L_1+L_1)+(C_z)(L_1+L_1+L_1)+(F_G)(L_2)-(F_P)(L_1+L_1+L_1)-(F_B)(L_1)=0$</li>
                   <li>$\Sigma{M}_y = 0 \implies (C_z)(L_1+L_1)-(F_P)(L_1)+(F_B)(L_2) =0$</li>
                   <li>$\Sigma{M}_z = 0 \implies (F_R)(L_1)-(B_x)(L_1+L_1)+(F_G)(L_1)-(C_y)(L_1+L_1)=0$</li>

                   Now you have 6 equations and 6 unknowns. Now we can solve for everthing.
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
          First we can use $\Sigma{M}_y$ equation to solve for $C_z$
          <li>$C_z = {{correct_answers.Cz}}$</li>
          Now we can use $\Sigma{M}_x$ and $\Sigma{M}_z$ equations to solve for $B_z$ and $B_x$.
          <li>$B_z = {{correct_answers.Bz}}$</li> 
          <li>$B_x = {{correct_answers.Bx}}$</li> 
          Using $C_z,B_x,$ and $B_z$ we can solve for A_x and A_z using $\Sigma{F}_x$ and $\Sigma{F}_z$ equations.
          <li>$A_x = {{correct_answers.Ax}}$</li>
          <li>$A_z = {{correct_answers.Az}}$</li>
            Lastly we can use the $\Sigma{F}_y$ equation to find $C_z$
          <li>$C_y = {{correct_answers.Cy}}$</li>
          Any other force equals zero.



          
        </ul>
    </pl-hint>
",,,"compute the reaction forces acting on the smooth bearings at points a, b, and c.
let the forces $\mathbf{f}_r = 10 n$, $\mathbf{f}_g = 20 n$, $\mathbf{f}_p = -15 n$, and $\mathbf{f}_b = 5 n$.
let the lengths $\mathbf{l}_1 = 2 m$, and $\mathbf{l}_2 = 3 m$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d rigid bodies,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 103","Reaction Forces, Statics"
26,RigidBodies4,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D rigid bodies"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""3dRigidBodies4.png""></pl-figure></pl-question-panel>
    
        <p>The member is supported by a pin at A and the cable BC.</p>
        <p>The load is $ \mathbf{W} = {{params.weight}} {{params.unitsForce}}$, and the lengths are $ \mathbf{L}_1 = {{params.l1}}$, $ \mathbf{L}_2 = {{params.l2}}$, and $ \mathbf{L}_3 = {{params.l3}} {{params.unitsDist}}$.</p>
        <P>Compute the reaction forces at pin A and the tension in the cable.</P>
        <p>Note: Pin A is constrained, so it cannot freely slide in the x-direction but it is able to rotate about the x-axis.</p>
    <pl-number-input answers-name=""T"" comparison=""sigfig"" digits=""3"" label=""Tension in cable =""></pl-number-input>
    <pl-number-input answers-name=""Mx"" comparison=""sigfig"" digits=""3"" label=""Moment reaction Mx =""></pl-number-input>
    <pl-number-input answers-name=""My"" comparison=""sigfig"" digits=""3"" label=""Moment reaction My =""></pl-number-input>
    <pl-number-input answers-name=""Mz"" comparison=""sigfig"" digits=""3"" label=""Moment reaction Mz =""></pl-number-input>
    <pl-number-input answers-name=""Ax"" comparison=""sigfig"" digits=""3"" label=""reaction Ax =""></pl-number-input>
    <pl-number-input answers-name=""Ay"" comparison=""sigfig"" digits=""3"" label=""reaction Ay =""></pl-number-input>
    <pl-number-input answers-name=""Az"" comparison=""sigfig"" digits=""3"" label=""reaction Az =""></pl-number-input>
    
    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 //-----------------------math
weight = math.randomInt(100,500);
l1 = math.randomInt(1,10);
l2 = math.round(l1*2*100)/100;
l3 = math.round(l1*6*100)/100;


length = math.sqrt((l2+l2-l1)**2+l3**2+l2**2);
x = (l2+l2-l1)/(length);
y = (-l3)/(length);
z = (l2)/(length);

T = weight/z;
Mx = 0
My = weight*l2-(2*l2*T*z);
Mz = -((2*l2*T*y)+(T*x*l3));
Ax = -T*x;
Ay = T*y;
Az = weight-T*z;



 //----------------------


data = {
    params: {
   unitsDist:unitsDist,
   unitsForce:unitsForce,
weight:weight,
l1:l1,
l2:l2,
l3:l3
       
},

    correct_answers: { 
        Mx:Mx,
        My:My,
        Mz:Mz,
        Ax:Ax,
        Ay:Ay,
        Az:Az,
        T:T,
 
   

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dRigidBodies4.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">First draw the reaction forces at point A.</pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        <p>The reaction forces at point A should be $A_x, A_y,A_z,M_y,M_z$.</p>
        <p>Next we have to describe the tension in the cable as a vector. </p>
        <p> We can do this by multiplying the the magnitude of the tension with the unit vector that matches the path of the cable.</p>

        </pl-hint>
   
   
            <pl-hint level=""3"" data-type=""text"">
                <ul> 
                    Finding the tesnion vector $\vec{T}$.  
                    First we must identify the unit vector that matches the path of the cable.
                    <li>$\vec{U} = \frac{(L_2+L_2-L_1)\hat{i}-L_3\hat{j}+L_2\hat{k}}{\sqrt{(L_2+L_2-L_1)^2+(L_3)^2+(L_2)^2}}$</li>
                    <li>So the vector expression for the tesnion is simply $\vec{T} = (T)(\vec{U}) = (T)(\frac{(L_2+L_2-L_1)\hat{i}-L_3\hat{j}+L_2\hat{k}}{\sqrt{(L_2+L_2-L_1)^2+(L_3)^2+(L_2)^2}})$</li>
                    Since we do not know what tesnion is yet we can just leave T in  $\vec{T}$ for now.
                    set up the equations that discribe all of the forces in the system. We will also need to take the moment about point A for an additional equation.
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul> 

            <li>$\Sigma{F}_x = 0 \implies A_x + \vec{T}\hat{i} = 0$</li>
            <li>$\Sigma{F}_y = 0 \implies A_y + \vec{T}\hat{j} = 0$</li>
            <li>$\Sigma{F}_z = 0 \implies A_z + \vec{T}\hat{k} - W = 0$</li>
             Moment equations (about point A):
             <p>But before we set up our three moment equations we first have to compute $\vec{d} X \vec{T}$.</p>
             <p>Where $\vec{d} = -2L_2\hat{i}+L_3\hat{j}+0\hat{k}$ goes from point A to the end of the cable.</p>
             <li>$\vec{d} X \vec{T} = (L_3)(\vec{T}\hat{k})\hat{i}-(-2L_2)(\vec{T}\hat{k})\hat{j}+(-2L_2)(\vec{T}\hat{j})-(L_3)(\vec{T}\hat{i})\hat{k}$</li>
             setting up moment equations(about point A):
             <li>$\Sigma{M}_x = 0 \implies (L_3)(\vec{T}\hat{k})-(W)(L_3) = 0$</li>;
             <li>$\Sigma{M}_y = 0 \implies  -(-2L_2)(\vec{T}\hat{k})-(W)(L_2)+M_y= 0$</li>;
             <li>$\Sigma{M}_z = 0 \implies  M_z + (-2L_2)(\vec{T}\hat{j})-(L_3)(\vec{T}\hat{i})= 0$</li>;
             <P>Note: $\Sigma{M}_x$ does not have a moment reaction force since the structure can freely rotate about the x-axis.</P>
             <li>So, $M_x = 0$</li>
             Now you have 6 unknowns and 6 equation. Now you can solve.
        </ul>
    </pl-hint>

    <pl-hint level=""5"" data-type=""text""> 
        <ul> 

        <P>Solving the $\Sigma{M}_x$ we are able to solve for tension.</P>
        <li>T = ${{correct.answers.T}} {{params.unitForce}} $</li>
        <p>Now that we have tension, we can solve for $M_y$ and $M_z$ using the $\Sigma{M}_y$ and $\Sigma{M}_z$ equations. </p>
        <li>$M_y ={{correct.answers.My}} {{params.unitForce}} {{params.unitsDist}}$</li>
        <li>$M_z ={{correct.answers.Mz}} {{params.unitForce}} {{params.unitsDist}}$</li>
        <P>Lastly we are easily able to solve for $A_x,A_y,$ and $A_z$ using the force equations.</P>
        <li>$Ax ={{correct.answers.Ax}} {{params.unitForce}} $</li>
        <li>$Ay ={{correct.answers.Ay}} {{params.unitForce}} $</li>
        <li>$Az ={{correct.answers.Az}} {{params.unitForce}} $</li>


        </ul>
    </pl-hint>

",,,"the member is supported by a pin at a and the cable bc.
the load is $ \mathbf{w} = 500 n$, and the lengths are $ \mathbf{l}_1 = 2 m$, $ \mathbf{l}_2 = 3 m$, and $ \mathbf{l}_3 = 4 m$.
compute the reaction forces at pin a and the tension in the cable.
note: pin a is constrained, so it cannot freely slide in the x-direction but it is able to rotate about the x-axis.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d rigid bodies,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium, Statics and Mechanics"
27,RigidBodies5,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D statics"",
    ""stem"":""Statics"",
    ""topic"": ""3D rigid bodies"",
    ""tags"": [""Force anylisis"", ""Moment"",""Vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
} ","<pl-question-panel>
    <pl-figure file-name=""3dRigidBodies5.png""></pl-figure></pl-question-panel>
    
  
    <p> The brace DC holds up the orange plate that has a weight of $\mathbf{W} = {{params.weight}}{{params.unitsForce}}$</p>
    <p> Compute the tension in brace DC and the magnitude of the reaction forces acting on hinges A and B.</p>
    <p>let the lengths $\mathbf{L}_1  = {{params.l1}}$, $\mathbf{L}_2  = {{params.l2}}$, and $\mathbf{L}_3  = {{params.l3}} {{params.unitsDist}}$.</p>  
    <p>Note: The hing at point A does not exert any axial thrust.</p>

    <pl-number-input answers-name=""T"" comparison=""sigfig"" digits=""3"" label=""Tension in the brace =""></pl-number-input>
    <pl-number-input answers-name=""Ax"" comparison=""sigfig"" digits=""3"" label=""Ax reaction =""></pl-number-input>
    <pl-number-input answers-name=""Ay"" comparison=""sigfig"" digits=""3"" label=""Ay reaction =""></pl-number-input>
    <pl-number-input answers-name=""Az"" comparison=""sigfig"" digits=""3"" label=""Az reaction =""></pl-number-input>
    <pl-number-input answers-name=""Bx"" comparison=""sigfig"" digits=""3"" label=""Bx reaction =""></pl-number-input>
    <pl-number-input answers-name=""By"" comparison=""sigfig"" digits=""3"" label=""By reaction =""></pl-number-input>
    <pl-number-input answers-name=""Bz"" comparison=""sigfig"" digits=""3"" label=""Bz reaction =""></pl-number-input>


    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 //-----------------------math
weight = math.randomInt(100,500);
l1 = math.randomInt(1,10);

weight = 300;
l1=2;


l2 = math.round(l1*2*100)/100;
l3 = math.round(l1*1.5*100)/100;




length = math.sqrt(l3**2+l2**2+l1**2);
x=l3/length;
y = l2/length;
z = l1/length;



T = (weight*(l3/2))/(l2*x);
Ax = (l1*T*x)/(2*l1);
Ay = (weight*l1-l2*T*z-l1*T*y)/(2*l1);
Az = 0;
Bx = -Ax+T*x;
By = weight-T*y-Ay;
Bz = T*z;



 //----------------------


data = {
    params: {
   unitsDist:unitsDist,
   unitsForce:unitsForce,
weight:weight,
l1:l1,
l2:l2,
l3:l3
       
},

    correct_answers: { 
        Bx:Bx,
        By:By,
        Bz:Bz,
        Ax:Ax,
        Ay:Ay,
        Az:Az,
        T:T,
 
   

  
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}","<pl-solution-panel>
    <pl-figure file-name=""3dRigidBodies5.png""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> First draw the reaction force at Points B and A. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The reactions at point B should be $B_x,B_y$ and,$B_z$. And the reactions at point A should be $A_z$ and $A_y$</pl-hint>

            <pl-hint level=""3"" data-type=""text"">
                <ul> 
                    Now that we identified the reaction forces we can now start to solve the problem.
                    <p>First, we want to represent the tension in the beam as a vector.</p>
                    <p>We can do this by simply multiplying the tension force by the unit vector that follows the same path as the beam.</p>
                    <P>So, let the unit vector goes from point D to C be $\vec{U} = \frac{L_3\hat{i}+L_2\hat{j}+L_1\hat{k}}{\sqrt{(L_3)^2+(L_2)^2+(L_1)^2}}$</P>
                    <p>Now that we have the unit vector we can say the tension vector is:</p>
                    <li>$\vec{T} = (T)\vec{U} = (T)\frac{L_3\hat{i}+L_2\hat{j}+L_1\hat{k}}{\sqrt{L_3^2+L_2^2+L_1^2}}$.</li>
                    <p>Now that we have the tension vector the next step is to write out our equations that will help us solve for the reactions and tens{{params.}} {{params.unitsForce}}ion force.</p>
                    <P>Write out the equations of force and moments in all directions. </P>
                </ul>
            </pl-hint>
        

    <pl-hint level=""4"" data-type=""text""> 
        <ul> 
            <p> Equations of force:</p>
            <li>$\Sigma{F}_x = 0 \implies A_x +B_x + \vec{T}\hat{i} =0$</li>
            <li>$\Sigma{F}_y = 0 \implies A_y +B_y + \vec{T}\hat{j} - W =0$</li>
            <li>$\Sigma{F}_z = 0 \implies B_z + \vec{T}\hat{k} =0$</li>
            Moment equations (about point B):
             <p>But before we set up our three moment equations we first have to compute $\vec{d} X \vec{T}$.</p>
             <p>Where $\vec{d} = 0\hat{i}-L_2\hat{j}+L_1\hat{k}$ goes from point B to point D.</p>
             <li>$\vec{d} X \vec{T} = (-L_2)(\vec{T}\hat{k})-(L_1)(\vec{T}\hat{j})hat{i}-(L_1)(\vec{T}\hat{i})\hat{j}+(L_2)(\vec{T}\hat{i})\hat{k}$</li>
             <p> Now we can set up our moment equations about each axis:</p>
             <li>$\Sigma{M}_x = 0 \implies (-2L_1)(A_y)+(W)(L_1)+(-L_2)(\vec{T}\hat{k})-(L_1)(\vec{T}\hat{j}) = 0$</li>
             <li>$\Sigma{M}_y = 0 \implies (2L_1)(A_x)+(L_1)(\vec{T}\hat{i})= 0$</li>
             <li>$\Sigma{M}_z = 0 \implies (L_2)(\vec{T}\hat{i})-(W)(\frac{L_3}{2})= 0$</li>
             Now you have 6 unknowns and 6 equation. Now you can solve.

        </ul>
    </pl-hint>

    <pl-hint level=""5"" data-type=""text""> 
        <ul> 
            Solving equations:
            <p>Using the $\Sigma{M}_z$ equation, we are able to solve for tension.</p>
            <li>$T = {{params.T}} {{params.unitsForce}}$</li>
            <p>Now that we have tension we can use equations $\Sigma{M}_x$ and $\Sigma{M}_y$ to solve for $A_x$ and $A_y$.</p>
            <li>$A_x ={{params.Ax}} {{params.unitsForce}} $</li>
            <li>$A_y ={{params.Ay}} {{params.unitsForce}} $</li>
            <P>Now using the information we have now we can use the force equations to solve for $B_x,B_y$ and $B_z$.</P>
            <li>$B_x ={{params.Bx}} {{params.unitsForce}} $</li>
            <li>$B_y ={{params.By}} {{params.unitsForce}} $</li>
            <li>$B_z ={{params.Bz}} {{params.unitsForce}} $</li>





        </ul>
    </pl-hint>

    ",,,"the brace dc holds up the orange plate that has a weight of $\mathbf{w} = 500 n$.
compute the tension in brace dc and the magnitude of the reaction forces acting on hinges a and b.
let the lengths $\mathbf{l}_1  = 2.5 m$, $\mathbf{l}_2  = 1.8 m$, and $\mathbf{l}_3  = 3.2 m$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d statics,Statics,3d rigid bodies,"Force anylisis,Moment,Vectors",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium, Distributed Forces"
28,truss1,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Method of joints"",
	""stem"" : ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment"",""trusses""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
    <pl-figure file-name=""truss1.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at joints A and E.</p>
    <p>Using method of joints, also compute the force in each member as a result of the load (W), and determine whether the member is in compression or tension. </p>
    <p>Let the weight $ \mathbf(W) = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$ and $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$</p>
    <p>Note: denote tension as positve, and compression as negative (-).</p>
  </pl-question-panel>
    

  <pl-number-input answers-name=""reactionEx"" comparison=""sigfig"" digits=""3"" label="" reaction Ex =""></pl-number-input>
  <pl-number-input answers-name=""reactionEy"" comparison=""sigfig"" digits=""3"" label="" reaction Ey =""></pl-number-input>
  <pl-number-input answers-name=""reactionAx"" comparison=""sigfig"" digits=""3"" label="" reaction Ax =""></pl-number-input>
  <pl-number-input answers-name=""reactionAy"" comparison=""sigfig"" digits=""3"" label="" reaction Ay =""></pl-number-input>

  <pl-number-input answers-name=""AB"" comparison=""sigfig"" digits=""3"" label=""Member AB =""></pl-number-input>
  <pl-number-input answers-name=""BC"" comparison=""sigfig"" digits=""3"" label=""Member BC =""></pl-number-input>
  <pl-number-input answers-name=""CD"" comparison=""sigfig"" digits=""3"" label=""Member CD =""></pl-number-input>
  <pl-number-input answers-name=""DE"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""AD"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""AE"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""DB"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight= (math.randomInt(100,500));//the force
	length2= (math.randomInt(3,20)); //length of l1 in m or ft

	length1= length2*((math.randomInt(420,750))/1000);
    length1=(Math.round(length1*10))/10;

    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length1=(Math.round(length1*10))/10;
    }
//testing values
//length1=2.3094;
//length2=4;
//weight=1;

  thetaRAD=Math.atan(length1/length2);



    //from joint C
    BC=weight/(Math.sin(thetaRAD));//Tension
    CD=-weight*((Math.cos(thetaRAD))/(Math.sin(thetaRAD)));//compression

    //from joint B
    AB=CD*-1;//tension
    BD=-weight;//compression

    //from joint D
    DE=CD+CD;
    AD=BC
    
    //from joint E
    AE=0


//Reaction forces

reactionEx=DE*-1
reactionEy=0
reactionAx=DE*-1
reactionAy=weight


data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
       
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

reactionEx:reactionEx,
reactionEy:reactionEy,
reactionAx:reactionAx,
reactionAy:reactionAy,
    AB:AB,
    BC:BC,
    CD:CD,
    DE:DE,
    AD:AD,
    AE:AE,
    BD:BD,

},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"compute the magnitude of the reaction forces at joints a and e.
using method of joints, also compute the force in each member as a result of the load (w), and determine whether the member is in compression or tension. 
let the weight $ \mathbf(w) = 500 n$ and let the lengths $ \mathbf{l}_1 = 2 m$ and $ \mathbf{l}_2 = 3 m$
note: denote tension as positve, and compression as negative (-).",1f435c36-1126-43b0-aba5-627eeb2e10f9,Method of joints,Force anylisis,Statics,"Frames,Vector,Force,Moment,Trusses",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Structural Mechanics"
29,truss2,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Method of joints"",
	""stem"" : ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""joints"",""trusses""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""truss2.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at joints A and F.</p>
    <p>Using method of joints, also compute the force in each member as a result of the load (W), and determine whether the member is in compression or tension. </p>
    <p>Let the weight $ \mathbf(W) = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$ and $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$</p>
    <p>Note: denote tension as positve, and compression as negative (-), all triangles are 45-45-90.</p>
</pl-question-panel>

    

  <pl-number-input answers-name=""reactionFx"" comparison=""sigfig"" digits=""3"" label="" reaction Fx =""></pl-number-input>
  <pl-number-input answers-name=""reactionFy"" comparison=""sigfig"" digits=""3"" label="" reaction Fy =""></pl-number-input>
  <pl-number-input answers-name=""reactionAx"" comparison=""sigfig"" digits=""3"" label="" reaction Ax =""></pl-number-input>
  <pl-number-input answers-name=""reactionAy"" comparison=""sigfig"" digits=""3"" label="" reaction Ay =""></pl-number-input>

  <pl-number-input answers-name=""AB"" comparison=""sigfig"" digits=""3"" label=""Member AB =""></pl-number-input>
  <pl-number-input answers-name=""BC"" comparison=""sigfig"" digits=""3"" label=""Member BC =""></pl-number-input>
  <pl-number-input answers-name=""CD"" comparison=""sigfig"" digits=""3"" label=""Member CD =""></pl-number-input>
  <pl-number-input answers-name=""DE"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""EF"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""FG"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""GH"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""HI"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""IJ"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""AJ"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""BJ"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""BI"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""CI"" comparison=""sigfig"" digits=""3"" label=""Member DE =""></pl-number-input>
  <pl-number-input answers-name=""CH"" comparison=""sigfig"" digits=""3"" label=""Member AD =""></pl-number-input>
  <pl-number-input answers-name=""DH"" comparison=""sigfig"" digits=""3"" label=""Member AE =""></pl-number-input>
  <pl-number-input answers-name=""DG"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
  <pl-number-input answers-name=""EG"" comparison=""sigfig"" digits=""3"" label=""Member BD =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight= (math.randomInt(100,500));//the force
	length1= (math.randomInt(15,30)); //length of l1 in m or ft

	length2= length1*((math.randomInt(650,680))/1000);
    length3= length1*((math.randomInt(300,350)))/1000;
    length1=(Math.round(length1*10))/10;
    length2=(Math.round(length2*10))/10;
    length3=(Math.round(length3*10))/10;
    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length3=length3*3;
        length1=(Math.round(length1*10))/10;
        length2=(Math.round(length2*10))/10;
        length3=(Math.round(length3*10))/10;
    }




//reactions
reactionFy=(length1*weight)/(length1+length2);
reactionFx=0;
reactionAx=0;
reactionAy=weight-reactionFy;

trig=1/Math.sqrt(2);

AB=-reactionAy/trig;
AJ=-AB*trig;
BJ=0;
IJ=reactionAy;
BI=-AB;
BC=(-BI*trig)+(AB*trig);
HI=IJ+(BI*trig);
CI=-BI*trig;
CH=-CI/(trig);
CD=BC-(CH*trig);
EF=-reactionFy/trig;
FG=-EF*trig;
DE=FG;
EG=FG;
DG=EF;
DH=-DG*trig;
GH=HI+(CH*trig);



data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
        length3: length3,
       
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

reactionEx:reactionFx,
reactionEy:reactionFy,
reactionAx:reactionAx,
reactionAy:reactionAy,
    AB:AB,
    BC:BC,
    CD:CD,
    DE:DE,
    DE:DE,
    EF:EF,
    FG:FG,
    GH:GH,
    HI:HI,
    IJ:IJ,
    AJ:AJ,
    BJ:BJ,
    BI:BI,
    CI:CI,
    CH:CH,
    DH:DH,
    DG:DG,
    EG:EG,

},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"compute the magnitude of the reaction forces at joints a and f.
using method of joints, also compute the force in each member as a result of the load (w), and determine whether the member is in compression or tension. 
let the weight $ \mathbf(w) = 500 n$ and let the lengths $ \mathbf{l}_1 = 2 m$, $ \mathbf{l}_2 = 3 m$ and $ \mathbf{l}_3 = 4 m$
note: denote tension as positve, and compression as negative (-), all triangles are 45-45-90.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Method of joints,Force anylisis,Statics,"Frames,Vector,Force,Joints,Trusses",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,Reaction Forces
30,3DMoment1,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction5.JPG""></pl-figure>
  <p>
   A 450-lb load hangs from the corner $C$ of a rigid piece of pipe $ABCD$ that has been bent as shown. The pipe is supported by ball-and-socket joints $A$ and $D$, and by a cable attached at the midpoint $E$ of the portion $BC$ of the pipe and at point $G$ on the wall. Determine (a) where $G$ should be located if the tension in the cable is to be minimum, (b) the corresponding minimum value of tension.
 </p>
</pl-question-panel>

<p> The x-coordinate of the location of G ($G_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""G_X"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""1"" label=""$G_{X}$ (ft)""></pl-number-input-fixed>

<p> The y-coordinate of the location of G ($G_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""G_Y"" correct-answer-fixed=""15"" comparison=""sigfig"" digits=""2"" label=""$G_{Y}$ (ft)""></pl-number-input-fixed>

<p> The minimum value of tension ($T_{min}$) is equal to:</p>
<pl-number-input-fixed answers-name=""T_{min}"" correct-answer-fixed=""300"" comparison=""sigfig"" digits=""3"" label=""$T_{min}$ (lb)""></pl-number-input-fixed>

",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction5FBD.JPG""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Draw the free-body diagram of the pipe showing the reactions at $A$ and $D$. Isolate the unknown tension $T$ and the known weight $W$ by summing moments about the diagonal line $AD$, and compute values from the equilibrium equations.    </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The vector expression of line AB $\overline{AB}$ $\implies$ $\hat{r_{BC}} = [(12\hat{i} + 12\hat{j} - 6\hat{k})]/[\sqrt(18)]$ = ($\frac{2}{3}\hat{i} + \frac{2}{3}\hat{j} + -\frac{1}{3}\hat{k}$)
        <ul>
            <li> $\implies \overrightarrow{AC} \times W = (12\hat{i} + 12\hat{j}) \times (-450j) = -5400k$</li>
            <li> $\hat{r_{BC}} \cdot (\overrightarrow{AC} \times W) = (\frac{2}{3}\hat{i} + \frac{2}{3}\hat{j} + -\frac{1}{3}\hat{k}) \cdot (-5400k) = +1800 $ $\textbf{(2)}$</li>
        </ul>

        <p> Recalling the commutative property for mixed triple products, you can rewrite the last equation in the form</p>
        <ul>
            <li> $T \cdot (\hat{r_{BC}} \times \overrightarrow{AE}) = -1800 lb \cdot ft$  $\textbf{(3)}$</li>
            <li> This shows that the projection of $T$ on the vector $\hat{r_{BC}} \times \overrightarrow{AE}$ is a constant. It follows that $T$ is minimum when it is parallel to the vector</li>
            <li> $\implies \hat{r_{BC}} \times \overrightarrow{AE} = (\frac{2}{3}\hat{i} + \frac{2}{3}\hat{j} + -\frac{1}{3}\hat{k}) \times (6i + 12j) = 4i - 2j + 4k$ </li>
            <li> The corresponding unit vector is $(\frac{2}{3}i - \frac{1}{3} + \frac{2}{3}k)$ which yields</li>
            <li> $\implies T_{min} = T(\frac{2}{3}i - \frac{1}{3} + \frac{2}{3}k)$ $\textbf{(4)}$</li>
        </ul>

        <ul>
            <li>Substituting for $T$ and $\hat{r_{BC}}$ in Eq. (3) and computing dot products yields $T = -300$, carrying this value into Eq.(4)</li>
            <li>$\implies T_{min} = 300 lb$</li>
        </ul>
    </pl-hint>
    
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
            <li> Since the vector $\overrightarrow{EG}$ and the force $T_{min}$ have the same direction, their components must be proportional.   </li>
            <li> Denoting the coordinates of G by x,y, and 0, you get</li>
            <li> $\frac{x-6}{-200} = \frac{y-12}{+100} = \frac{0-6}{-200}$ </li>
            <li> $\implies x = 0, y = 15 ft</li>
        </ul>
        
    </pl-hint>

    

</pl-solution-panel>

",,,"where should $g$ be located if the tension in the cable is to be minimum? 
options: 
a) at point $a$
b) at point $b$
c) at point $c$
d) at point $d$

 what is the x-coordinate of the location of $g$ ($g_x$)? 

 what is the y-coordinate of the location of $g$ ($g_y$)? 

 what is the minimum value of tension ($t_{min}$)?",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,,"Static Equilibrium, Analytical Geometry"
31,3DMoment2,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction5.JPG""></pl-figure>
  <p>
   Find the force acting on each of the three wheels $A, B, C$
 </p>
</pl-question-panel>

<p> The magnitude of the force acting at wheel A is: </p>
<pl-number-input-fixed answers-name=""A_Z"" correct-answer-fixed=""629"" comparison=""sigfig"" digits=""3"" label=""$A_{Z}$ (lb)""></pl-number-input-fixed>

<p> The magnitude of the force acting at wheel B is: </p>
<pl-number-input-fixed answers-name=""B_Z"" correct-answer-fixed=""386"" comparison=""sigfig"" digits=""3"" label=""$B_{Z}$ (lb)""></pl-number-input-fixed>

<p> The magnitude of the force acting at wheel C is: </p>
<pl-number-input-fixed answers-name=""C_Z"" correct-answer-fixed=""586"" comparison=""sigfig"" digits=""3"" label=""$C_{Z}$ (lb)""></pl-number-input-fixed>",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction6.JPG""></pl-figure>
    <pl-hint level=""1"" data-type=""text"">3D equilibrium dictates $\Sigma F_x = 0$, $\Sigma F_y = 0$, $\Sigma F_z = 0$, $\Sigma M_{sum} = 0$. Deconstruct the given forces into their vector expressions and sketch the free body diagram with all moments/reactions.    </pl-hint>
    <pl-hint level=""2"" data-type=""text""> $*Note*$ The only external forces acting on the cart are vertical (in the z-direction), so it may be easiest to begin with the $\Sigma F_{z} = 0$ equation 
        <ul>
            <li> $\Sigma F_{z} = 0 \implies A_{z} + B_{z} + C_{z} - 1600$ $Eq. \textbf{(1)}$ </li>
            <li> Although setting up the equation does not immediately solve for any unknowns, we can utilize the $\Sigma M = 0$ equations to find values to plug in</li>
        </ul>

        <ul>
            <li> $\Sigma M_{X} = 0 \implies 800(5) + 300(15) + 500(27) - A_{z}(35) = 0$ $\textbf{(2)}$</li>
            <li> $\implies A_{z} = 629$ lb</li>
        </ul>

    <p> Repeat these steps using the moment equation for the y-axis ($\Sigma M_{Y} = 0$) and plug your values back into Eq. 1</p>
    </pl-hint>
    
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
                <li> $\Sigma M_{Y} = 0 \implies C_{z}(24) - 800(12) - 500(24) + 629(12) = 0$ $\textbf{(3)}$</li>
                <li> $\implies C_{z} = 586$ lb</li>
                <li> Plugging $A_{z}$ and $C_{z}$ back into Eq. 1 allow you to solve for $B_{z}$</li>
                <li> $\implies B_{z} = 386$ lb</li>
        </ul>
    </pl-hint>

    

</pl-solution-panel>

",,,"find the force acting on each of the three wheels $a, b, c$",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,"ME 010, ME 103","Distributed Forces, Reaction Forces, Static Equilibrium"
32,3DMoment3,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction5.JPG""></pl-figure>
  <p>
    A uniform pipe cover of radius $ r = 240 mm$ and mass $30 kg$ is held in a horizontal position by the cable $CD$. Assuming that the bearing at $B$ does not exert any axial thrust, determine the tension in the cable and the reactions at $A$ and $B$. 
  </p>
</pl-question-panel>

<p> The magnitude of the tension in cable $CD$ ($T_{CD}$) is: </p>
<pl-number-input-fixed answers-name=""T_CD"" correct-answer-fixed=""343"" comparison=""sigfig"" digits=""3"" label=""$T_{CD}$ (N)""></pl-number-input-fixed>

<p> The x-component of the reaction at point A ($A_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_X"" correct-answer-fixed=""49"" comparison=""sigfig"" digits=""2"" label=""$A_{X}$ (N)""></pl-number-input-fixed>

<p> The y-component of the reaction at point A ($A_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_Y"" correct-answer-fixed=""73.5"" comparison=""sigfig"" digits=""3"" label=""$A_{Y}$ (N)""></pl-number-input-fixed>

<p> The z-component of the reaction at point A ($A_Z$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_Z"" correct-answer-fixed=""98"" comparison=""sigfig"" digits=""2"" label=""$A_{Z}$ (N)""></pl-number-input-fixed>




<p> The x-component of the reaction at point B ($B_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""B_X"" correct-answer-fixed=""245"" comparison=""sigfig"" digits=""3"" label=""$B_{X}$ (N)""></pl-number-input-fixed>

<p> The y-component of the reaction at point B ($B_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""B_Y"" correct-answer-fixed=""73.5"" comparison=""sigfig"" digits=""3"" label=""$B_{Y}$ (N)""></pl-number-input-fixed>

<p> The z-component of the reaction at point B ($B_Z$) is equal to: </p>
<pl-number-input-fixed answers-name=""B_Z"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""1"" label=""$B_{Z}$ (N)""></pl-number-input-fixed>",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction7FBD.JPG""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Draw a free-body diagram with the coordinate axes shown and express the unknown cable tension as a Cartesian vector. Then apply the equilibrium equations ($\Sigma F_{xyz} = 0$ and $\Sigma M_{xyz} = 0$ ) to determine this tension and the support reactions.    </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The forces acting on the free body include its weight, which is
        <ul>
            <li> $W = -mg\hat{j} = (-294 N) \hat{j}$</li>
        </ul>

        <p> Express the components of $\mathbf{T}$ in terms of the unknown magnitude T by resolving the vector $\overrightarrow{DC}$ into rectangular components:</p>
        <ul>
            <li> $\overrightarrow{DC} = -(480 mm)\hat{i} + (240 mm)\hat{j} - (160 mm)\hat{k} \implies$ $DC$ = 560 mm  </li>
            <li> $\mathbf{T}$ = $T$$\frac{\overrightarrow{DC}}{DC}$ = $-\frac{6}{7}T\hat{i} + \frac{3}{7}T\hat{j} - \frac{2}{7}T\hat{k}$</li>
           
        </ul>

        <ul>
            <li> Applying equilibirum conditions ($\Sigma F = 0$)</li>
            <li> $ A_{x}\hat{i} + A_{y}\hat{j} + A_{z}\hat{k} + B_{x}\hat{i} + B_{y}\hat{j} + \mathbf{T} - (294 N)\hat{j}$</li>
            <li> $(A_{x} + B_{x} - \frac{6}{7}T)\hat{i} + (A_{y} + B_{y} + \frac{3}{7}T - 294 N) \hat{j} + (A_{z} -\frac{2}{7}T)\hat{k} = 0$ $\textbf{(Eq. 1)}$</li>
        </ul>

        <p> What equilibrium equation should you use next considering what forces are creating moments about points $A$ and $B$. Which equation will be easier to solve?</p>
    </pl-hint>
    
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
            <li> $\Sigma M_{B} = \Sigma(r \times F) = 0$:  </li>
            <li> $\implies 2r\hat{k} \times (A_{x}\hat{i} + A_{y}\hat{j} + A_{z}\hat{k}) + (2r\hat{i} + r\hat{k}) \times (-\frac{6}{7}T\hat{i} + \frac{3}{7}T\hat{j} - \frac{2}{7}T\hat{k}) + (r\hat{i} + r\hat{k}) \times (-294 N)\hat{j}$</li>
            <li> $\implies (-2A_{y} - \frac{3}{7}T + 294 N)r\hat{i} + (2A_{x} - \frac{2}{7})r\hat{j} + (\frac{6}{7}T - 294 N)r\hat{k} $  $\textbf{(Eq. 2)}$</li>
            <li> Setting the coefficients of the unit vectors equal to zero in Eq. 2 gives three scalar equations, which yield</li>
        </ul>

        <ul>
            <li> $A_{x} = +49 N$</li>
            <li> $A_{y} = +73.5 N$</li>
            <li> $\implies T = 343 N$</li>
        </ul>
            
    </pl-hint>


    <pl-hint level=""4"" data-type=""text"">

    <ul>
        <li> Setting the coefficients of the unit vectors equal to zero in Eq. 1 produces three more scalar equations. After substituting the values of $T, A_{x},$ and $A_{y}$ into these equations you obtain: </li>    
        <li> $A_{z} = +98.0 N$</li>
        <li> $B_{x} = +245 N$</li>
        <li> $B_{y} = +73.5 N$</li>
    </ul>

    <ul>
        <li> The reactions at $A$ and $B$ are therefore</li>
        <li> $A = +(49 N)\hat{i} + (73.5)\hat{j} + (98 N)\hat{k}$</li>
        <li> $B = +(245 N)\hat{i} + (73.5)\hat{j} + (0 N)\hat{k}$</li>
    </ul>
    
    </pl-hint>

    

</pl-solution-panel>

",,,"what is the magnitude of the tension in cable $cd$ ($t_{cd}$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information

 what is the x-component of the reaction at point a ($a_x$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information

 what is the y-component of the reaction at point a ($a_y$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information

 what is the z-component of the reaction at point a ($a_z$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information

 what is the x-component of the reaction at point b ($b_x$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information

 what is the y-component of the reaction at point b ($b_y$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information

 what is the z-component of the reaction at point b ($b_z$)?
options: 
a) $240 mm$
b) $30 kg$
c) cannot be determined from the given information",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,"ME 010, ME 110, ME 261","Reaction Forces, 3D Rigid Body Mechanics"
33,3DReaction1,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction1.JPG""></pl-figure>
  <p>
   Determine the components of reaction at the ball-and-socket joint A and the tension in each cable necessary for equilibrium of the rod.
 </p>
</pl-question-panel>

<p> The x-component of the reaction force at A ($A_x$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_x"" correct-answer-fixed=""600"" comparison=""sigfig"" digits=""3"" label=""$A_{x}$ (N)""></pl-number-input-fixed>
<p> The y-component of the reaction force at A ($A_y$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_y"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""3"" label=""$A_{y}$ (N)""></pl-number-input-fixed>
<p> The z-component of the reaction force at A ($A_z$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_z"" correct-answer-fixed=300"" comparison=""sigfig"" digits=""3"" label=""$A_{z}$ (N)""></pl-number-input-fixed>


<p> The force of tension acting along cable BC ($T_{BC}$) is equal to:  </p>
<pl-number-input-fixed answers-name=""T_BC"" correct-answer-fixed=""350"" comparison=""sigfig"" digits=""3"" label=""$T_{BC}$ (N)""></pl-number-input-fixed>

<p> The force of tension acting along cable BD ($T_{BD}$) is equal to:  </p>
<pl-number-input-fixed answers-name=""T_BD"" correct-answer-fixed=""350"" comparison=""sigfig"" digits=""3"" label=""$T_{BD}$ (N)""></pl-number-input-fixed>
",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction1.jpg""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> 3D equilibrium dictates $\Sigma F_x = 0$, $\Sigma F_y = 0$, $\Sigma F_z = 0$, $\Sigma M_{sum} = 0$. Deconstruct the given forces into their vector expressions, recalling the formula for vector expression involving the vector's magnitude and the unit vector. Hint:  $\vec{T}_{BC} = T_{BC}(\frac{\vec{BC}}{BC})$     </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Using $\Sigma M_B = 0$ allows you to consider only forces acting perpendicular to point B and solve for reaction forces acting at point A. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
            <li> Notice the symmetry of $T_{BC}$ and $T_{BD}$, once you derive the vector equation for one cable, the y-component of the other will have the opposite sign.</li>
            <li> $\vec{T}_{BC} = T_{BC}(\frac{\vec{BC}}{BC}) = T_{BC}(\frac{-6\hat{i}-2\hat{j}+3\hat{k}}{7})$</li>
            <li> $\vec{T}_{BC} = -0.857T_{BC}\hat{i}-0.286T_{BC}\hat{j}+0.429T_{BC}\hat{k}$ </li>
            <li> $\vec{T}_{BD} = -0.857T_{BC}\hat{i}+0.286T_{BC}\hat{j}+0.429T_{BC}\hat{k}$ </li>
        </ul>

        <ul>
            <li> Now we must consider the other forces acting upon the rod and their vector expressions </li>
            <li> $\vec{A} = A_x\hat{i} + A_y\hat{j} + A_z\hat{z}$</li>
            <li> $\vec{W} = -600\hat{k}$</li>
        </ul>

        <ul>
            <li> Recall $\Sigma M_B = 0$, which allows us to solve for forces creating a moment about B</li>
            <li> $(-6\hat{i} \times A_{z}\hat{k}) + (-6\hat{i} \times A_{y}\hat{j}) + (-3\hat{i} \times -600\hat{k})$</li>
            <li> $(6A_{z} - 1800)\hat{j} - 6A_{y}\hat{k} = 0$ </li>
            <li> Solving for $\hat{j}$ and $\hat{z}$ direction $\implies$ $A_{z} = 300 N$ and $A_{y} = 0 N$ </li>
        </ul>
    </pl-hint>

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li>Recall $\Sigma F_y = 0$, and summing the y-components of $\vec{T}_{BC}$, $\vec{T}_{BD}$, and reaction forces yields </li>
            <li>$-0.286T_{BC} + 0.286T_{BD} + A_y = 0$</li>
            <li>$T_{BC} = T_{BD}$</li>
        </ul>

        <ul>
            <li> Repeating the process for the x-direction ($\Sigma F_x = 0$) yields: </li>
            <li>$-0.857T_{BC} - 0.857T_{BD} + A_x = 0$</li>
            <li>$-2(0.857)T_{BC} = -A_x$</li>
        </ul>

        <ul>
            <li>Finally for the summation of forces in the z-direction ($\Sigma F_z = 0$):</li>
            <li>$0.429 T_{BC} + 0.429T_{BD} + A_z - 600 = 0$</li>
            <li>$2(0.429)T_{BC} = 300$</li>
            <li>$\implies T_{BC} = T_{BD} = 350 N$ </li>
            <li>$A_x = 2(0.857)(350) \implies 600 N$</li>
        </ul>
    </pl-hint>


</pl-solution-panel>

",,,"determine the components of reaction at the ball-and-socket joint a and the tension in each cable necessary for equilibrium of the rod.

options:
- the x-component of the reaction force at a ($a_x$) is equal to:
- the y-component of the reaction force at a ($a_y$) is equal to:
- the z-component of the reaction force at a ($a_z$) is equal to:
- the force of tension acting along cable bc ($t_{bc}$) is equal to:
- the force of tension acting along cable bd ($t_{bd}$) is equal to:",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,"ME 010, ME 103","Reaction Forces, Static Equilibrium"
34,3DReaction2,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction2.JPG""></pl-figure>
  <p>
   Determine the components of reaction at the fixed support. The 400 N, 500 N, 600 N forces are parallel to the x, y, z axes, respectively. 
 </p>
</pl-question-panel>

<p> The x-component of the reaction force at A ($A_x$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_x"" correct-answer-fixed=""400"" comparison=""sigfig"" digits=""3"" label=""$A_{x}$ (N)""></pl-number-input-fixed>
<p> The y-component of the reaction force at A ($A_y$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_y"" correct-answer-fixed=""-500"" comparison=""sigfig"" digits=""3"" label=""$A_{y}$ (N)""></pl-number-input-fixed>
<p> The z-component of the reaction force at A ($A_z$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_z"" correct-answer-fixed=""600"" comparison=""sigfig"" digits=""3"" label=""$A_{z}$ (N)""></pl-number-input-fixed>


<p> The magnitude of the moment induced about the x-axis ($M_{x}$):  </p>
<pl-number-input-fixed answers-name=""M_x"" correct-answer-fixed=""1225"" comparison=""sigfig"" digits=""4"" label=""$M_{x}$ (N-m)""></pl-number-input-fixed>

<p> The magnitude of the moment induced about the y-axis ($M_{y}$):  </p>
<pl-number-input-fixed answers-name=""M_y"" correct-answer-fixed=""750"" comparison=""sigfig"" digits=""3"" label=""$M_{y}$ (N-m)""></pl-number-input-fixed>

<p> The magnitude of the moment induced about the z-axis ($M_{z}$):  </p>
<pl-number-input-fixed answers-name=""M_z"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""4"" label=""$M_{z}$ (N-m)""></pl-number-input-fixed>",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction1.jpg""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> 3D equilibrium dictates $\Sigma F_x = 0$, $\Sigma F_y = 0$, $\Sigma F_z = 0$, $\Sigma M_{sum} = 0$. What force equations can you solve if you set them equal to 0?   </pl-hint>
    <pl-hint level=""2"" data-type=""text""> There are a force acting upon every axis (x,y,z), use this observation to solve for all reaction forces at A. ($A = A_x\hat{i} + A_y\hat{j} + A_z\hat{z}$) </pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> Recall $\Sigma M_x = 0$, which allows us to solve for forces creating a moment about the x-axis</li>
            <li> $ +M_{Ax} - 500(1.25) - 600(1) = 0$</li>
            <li> $ M_{Ax} = 500(1.25) + 600(1)$ </li>
            <li> $\implies M_{Ax}$ = +1225 N-m </li>
        </ul>

        <p> Repeat this process for the other moments $M_y$ and $M_z$</p>

        
    </pl-hint>

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> $\Sigma M_y = 0$ allows us to solve for forces creating a moment about the y-axis</li>
            <li> $ +M_{Ay} - 400(0.75) - 600(0.75) = 0$</li>
            <li> $ M_{Ay} = 400(0.75) + 600(0.75)$ </li>
            <li> $\implies M_{Ay}$ = +750 N-m </li>
        </ul>

        <ul>
            <li> $\Sigma M_z = 0$ allows us to solve for forces creating a moment about the z-axis</li>
            <li> $ +M_{Az} = 0$</li>
            <li> $\implies M_{Ay} = 0$ </li>
        </ul>
       
    </pl-hint>


</pl-solution-panel>

",,,"determine the components of reaction at the fixed support. the 400 n, 500 n, 600 n forces are parallel to the x, y, z axes, respectively. 

options:
- the x-component of the reaction force at a ($a_x$) is equal to:
- the y-component of the reaction force at a ($a_y$) is equal to:
- the z-component of the reaction force at a ($a_z$) is equal to:
- the magnitude of the moment induced about the x-axis ($m_{x}$):
- the magnitude of the moment induced about the y-axis ($m_{y}$):
- the magnitude of the moment induced about the z-axis ($m_{z}$):",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,"ME 010, ME 110, ME 103","Reaction Forces, Statics and Mechanics"
35,3DReaction3,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction3.JPG""></pl-figure>
  <p>
   Due to an unequal distribution of fuel in the wing tanks, the centers of gravity for airplane fuselage $A$ and wings $B$ and $C$ are located as shown. If these components have weights $W_A$ = 45,000 lb, $W_B$ = 8,000 lb, $W_C$ = 6,000 lb, determine the normal reactions of the wheels $D$, $E$, and $F$ on the ground. Round your answer to the nearest whole number.
 </p>
</pl-question-panel>

<p> The magnitude of the reaction force at point D ($R_D$) is equal to: </p>
<pl-number-input-fixed answers-name=""R_D"" correct-answer-fixed=""22630"" comparison=""sigfig"" digits=""5"" label=""$R_{D}$ (lb)""></pl-number-input-fixed>
<p> The magnitude of the reaction force at point F ($R_F$) is equal to: </p>
<pl-number-input-fixed answers-name=""R_F"" correct-answer-fixed=""13741"" comparison=""sigfig"" digits=""5"" label=""$R_{F}$ (lb)""></pl-number-input-fixed>
<p> The magnitude of the reaction force at point D ($R_E$) is equal to: </p>
<pl-number-input-fixed answers-name=""R_E"" correct-answer-fixed=""22630"" comparison=""sigfig"" digits=""5"" label=""$R_{E}$ (lb)""></pl-number-input-fixed>

",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction1.jpg""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> 3D equilibrium dictates $\Sigma F_x = 0$, $\Sigma F_y = 0$, $\Sigma F_z = 0$, $\Sigma M_{sum} = 0$. Deconstruct the given forces into their vector expressions, and consider the moments created by the given forces.   </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Using $\Sigma M_x = 0$ allows you to consider only forces creating a moment about the x-axis, and solve for the normal reactions. 
        <p>$*Note*$ The symmetry of wheels $E$ and $D$ indicates that their induced moments will be opposite signs (counter-clockwise & clockwise).</p>
    </pl-hint>
    
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
            <li> $\Sigma M_{F} = 0 \implies -(14 \times R_{D}) + (14 \times R_{E}) + (8000 \times 6) - (6000 \times 8) = 0$  </li>
            <li> $-14R_{D} + 14R_{E} = 0$</li>
            <li> $\implies R_{D} = R_{E}$ </li>
        </ul>

        <ul>
            <li> $\Sigma M_{y} = 0 \implies -(27 \times R_{F}) + (4500 \times 7) +(8000 \times 4) + (6000 \times 4) = 0$ </li>
            <li> $-27R_{F} + 371000 = 0$ </li>
            <li> $R_{F} = \frac{-371000}{-27}$</li>
            <li> $\implies R_{F} = 13741$ lb</li>
        </ul>

        
           <p>$*Note*$ $\Sigma M_{Z} = 0$ does not allow us to solve for any unknown variables given all forces are parallel to the rotational axis of the z-axis. Instead, utilize the summation of forces in the z-direction ($\Sigma F_{Z} = 0$) </p>
        
    </pl-hint>

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li>$\Sigma F_{Z} = 0$</li>
            <li> $R_{F} + R_{D} + R{E} - 4500 - 8000 - 6000 = 0$</li>
            <li> $13741 + 2R_{E} -4500 - 8000 - 6000= 0$ </li>
            <li> $2R_{E} -45260= 0$ </li>
            <li> $R_E = \frac{45260}{2}$</li>
            <li> $\implies R_{D} = R_{E} = 22630$ lb </li>

        </ul>
    </pl-hint>


</pl-solution-panel>

",,,"what is the magnitude of the reaction force at point d ($r_d$)? 

options: 
a) 45,000 lb
b) 8,000 lb
c) 6,000 lb
d) none of the above",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,ME 010,Reaction Forces
36,3DReaction4,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction4.JPG""></pl-figure>
  <p>
   Find the reaction at A and find the tension in $BC$. The connection A is a smooth collar on a square shaft. $Round you answers to the nearest whole number$
 </p>
</pl-question-panel>

<p> The horizontal-component of the reaction at point A ($A_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_X"" correct-answer-fixed=""1199"" comparison=""sigfig"" digits=""4"" label=""$A_{X}$ (N)""></pl-number-input-fixed>

<p> The vertical-component of the reaction at point A ($A_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_Y"" correct-answer-fixed=""800"" comparison=""sigfig"" digits=""4"" label=""$A_{Y}$ (N)""></pl-number-input-fixed>

<p> The magnitude of the tension force through ($T_{BC}$) is equal to: </p>
<pl-number-input-fixed answers-name=""T_{BC}"" correct-answer-fixed=""1399"" comparison=""sigfig"" digits=""4"" label=""$T_{BC}$ (N)""></pl-number-input-fixed>
",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction3.jpg""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> 3D equilibrium dictates $\Sigma F_x = 0$, $\Sigma F_y = 0$, $\Sigma F_z = 0$, $\Sigma M_{sum} = 0$. Deconstruct the given forces into their vector expressions, recalling the formula for vector expression involving the vector's magnitude and the unit vector. Hint:  $\vec{T}_{BC} = T_{BC}(\frac{\vec{BC}}{BC})$. Additionally sketch the free body diagram with all moments and reactions.   </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The vector expression of the tension force $\vec{T_{BC}}$ $\implies$ $\hat{r_{BC}} = [(0, 1.5, 0) - (3, 0, 1)]/[\sqrt(3^2 +1.5^2 + 1^2)]$ = ($-0.857\hat{i} + 0.429\hat{j} + 0.286\hat{k}$)
        <p>$*Note*$ There are 6 total equations for equilibrium $\Sigma F_x = 0$, $\Sigma F_y = 0$, $\Sigma F_z = 0$, $\Sigma M_{sum} = 0$, $\Sigma M_x = 0$, $\Sigma M_y = 0$, $\Sigma M_z = 0$, consider what equation will allow you to solve for the reaction forces at A.</p>
    </pl-hint>
    
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
            <li> $\Sigma F_{x} = 0 \implies A_{X} - 0.857T_{BC} = 0$  </li>
            <li> $\Sigma F_{y} = 0 \implies A_{Y} + 0.429T + 200 = 0$</li>
            <li> $\Sigma F_{z} = 0 \implies 0.286T - 400 = 0$ </li>
            <li> $\implies T = 1399 N$</li>
        </ul>

        <p>Plugging our value of T back in the $\Sigma F_{X}$ and $\Sigma F_{Y}$ will find $A_{X}$ and $A_{Y}$, recall that if you have a negative answer for the magnitude of a reaction force, the force is in the opposite direction to what you initially assumed.  </p>
        
    </pl-hint>

    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li>$\Sigma {M_{X}} = M_{X} + 0.429(1399)(1) \implies M_{X} = -600 Nm$</li>
            <li>$\Sigma {M_{Y}} = M_{Y} + 400(3) - 0.286(1399)(3) + 0.857(1399)(1) \implies M_{Y} = -1199 Nm$</li>
            <li> $\Sigma {M_{Z}} = M_{Z} + 200(3) + 0.429(1399)(3) \implies M_{Z} = 2400 Nm$</li>

        </ul>
    <p> $*Note*$ A negative value for moment indicates that the true direction (clockwise or counter-clockwise) is opposite to what you initially assumed.</p>
    </pl-hint>


</pl-solution-panel>

",,,"find the reaction at a and find the tension in $bc$. the connection a is a smooth collar on a square shaft. $round you answers to the nearest whole number$

options:
1. the horizontal-component of the reaction at point a ($a_x$) is equal to:
2. the vertical-component of the reaction at point a ($a_y$) is equal to:
3. the magnitude of the tension force through ($t_{bc}$) is equal to:",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium"
37,3DReaction5,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""3D Equilibirum Reaction Forces"",
	""stem"": """",
    ""topic"": ""statics"",
    ""tags"": [""reaction force"", ""3D""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""numeric input"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""3DReaction8.JPG""></pl-figure>
  <p>
    A 20-kg ladder used to reach high shelves in a storeroom is supported by two flanged wheels $A$ and $B$ mounted on a rail and by a flangeless wheel $C$ resting against a rail fixed to the wall. An 80-kg man stands on the ladder and leans to the right. The line of action of the combined weight $\textbf{W}$ of the man and ladder intersects the floor at point $D$. Determine the reactions at $A,B,$ and $C$
  </p>
</pl-question-panel>


<p> The x-component of the reaction at point A ($A_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_X"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""1"" label=""$A_{X}$ (N)""></pl-number-input-fixed>

<p> The y-component of the reaction at point A ($A_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_Y"" correct-answer-fixed=""245"" comparison=""sigfig"" digits=""3"" label=""$A_{Y}$ (N)""></pl-number-input-fixed>

<p> The z-component of the reaction at point A ($A_Z$) is equal to: </p>
<pl-number-input-fixed answers-name=""A_Z"" correct-answer-fixed=""-98"" comparison=""sigfig"" digits=""3"" label=""$A_{Z}$ (N)""></pl-number-input-fixed>




<p> The x-component of the reaction at point B ($B_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""B_X"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""1"" label=""$B_{X}$ (N)""></pl-number-input-fixed>

<p> The y-component of the reaction at point B ($B_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""B_Y"" correct-answer-fixed=""736"" comparison=""sigfig"" digits=""3"" label=""$B_{Y}$ (N)""></pl-number-input-fixed>

<p> The z-component of the reaction at point B ($B_Z$) is equal to: </p>
<pl-number-input-fixed answers-name=""B_Z"" correct-answer-fixed=""-98"" comparison=""sigfig"" digits=""3"" label=""$B_{Z}$ (N)""></pl-number-input-fixed>



<p> The x-component of the reaction at point C ($C_X$) is equal to: </p>
<pl-number-input-fixed answers-name=""C_X"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""1"" label=""$C_{X}$ (N)""></pl-number-input-fixed>

<p> The y-component of the reaction at point C ($B_Y$) is equal to: </p>
<pl-number-input-fixed answers-name=""C_Y"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""1"" label=""$C_{Y}$ (N)""></pl-number-input-fixed>

<p> The z-component of the reaction at point B ($B_Z$) is equal to: </p>
<pl-number-input-fixed answers-name=""C_Z"" correct-answer-fixed=""196 "" comparison=""sigfig"" digits=""3"" label=""$C_{Z}$ (N)""></pl-number-input-fixed>",,"<pl-solution-panel>
    <pl-figure file-name=""3DReaction8FBD.JPG""></pl-figure>
    <pl-hint level=""1"" data-type=""text""> Draw a free-body diagram of the ladder, then write and solve the equilibrium equations in three dimensions. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The combined weight of the man and the ladder is:
        <ul>
            <li> $W = -mg\hat{j} = (-981 N) \hat{j}$</li>
        </ul>

        <p> You have five unknown reaction components: two at each flanged wheel and one at teh flangeless wheel. The ladder is thus only partially constrained; it is free to roll along the rails. It is, however, in equiibrium under the given load because the equation $\Sigma F_{x} = 0$ is satisfied. </p>

        <ul>
            <li> Applying equilibirum conditions ($\Sigma F = 0$)</li>
            <li> $ A_{y}\hat{j} + A_{z}\hat{k} + B_{y}\hat{j} + B_{z}\hat{k} - (981 N)\hat{j} + C\hat{k} = 0$ $textbf{(Eq. 1)}$</li>        </ul>

        <p> What equilibrium equation should you use next considering what forces are creating moments about points $A$, $B$, and $C$. Which equation will be easier to solve?</p>
    </pl-hint>
    
    <pl-hint level=""3"" data-type=""text""> 
        <ul> 
            <li> $\Sigma M_{B} = \Sigma(r \times F) = 0$:  </li>
            <li> $\implies 1.2\hat{i} \times ( B_{y}\hat{j} + B_{z}\hat{k}) + (0.9\hat{i} - 0.6\hat{k}) \times (-981\hat{j}) + (0.6\hat{i} + 3\hat{j} - 1.2\hat{k}) \times (C\hat{k})$</li>
            <li> Computing the vector products yields:</li>
            <li> $\implies 1.2B_{y}\hat{k} - 1.2B_{z}\hat{j} - 883\hat{k} - 589\hat{i} - 0.6C\hat{j} + 3C\hat{i} = 0$</li>
            <li> $\implies (3C - 589)\hat{i} - (1.2B_{z} + 0.6C)\hat{j} + (1.2B_{y} - 883)\hat{k} = 0$ $\textbf{(Eq. 2)}$</li>
        </ul>

            
    </pl-hint>


    <pl-hint level=""4"" data-type=""text"">

        <ul>
            <li> Setting the coefficients of $i, j, $ and $k$ equal to zero in Eq. 2 produces the following three scalar equations, all of which state the sum of the moments about each coordinate axis must be zero:</li>
            <li> $3C - 589 = 0 \implies C = +196 N$</li>
            <li> $1.2B_{z} + 0.6C = 0 \implies B_{z} = -98 N$</li>
            <li> $1.2B_{y} - 883 = 0 \implies B_{y} = +736 N$</li>
            
        </ul>

    <ul>
        <li> The reactions at $B$ and $C$ are therefore</li>
        <li> $B = (736 N)\hat{j} - (98 N)\hat{k}$</li>
        <li> $C = (196 N)\hat{k}$</li>
    </ul>

    <ul> 
        <li> Setting the coefficients of $j$ and $k$ equal to zero, and plugging in $B_{y}, B_{z},$ and $C$ in Eq. 1 allows you to solve for the reaction components at A:</li>
        <li> $\implies A = (+245 N)\hat{j} - (98.1 N)\hat{k}$</li>
    </ul>
    
    </pl-hint>

    

</pl-solution-panel>

",,,"determine the reactions at points a, b, and c.
options:
- the x-component of the reaction at point a ($a_x$) is equal to:
- the y-component of the reaction at point a ($a_y$) is equal to:
- the z-component of the reaction at point a ($a_z$) is equal to:
- the x-component of the reaction at point b ($b_x$) is equal to:
- the y-component of the reaction at point b ($b_y$) is equal to:
- the z-component of the reaction at point b ($b_z$) is equal to:
- the x-component of the reaction at point c ($c_x$) is equal to:
- the y-component of the reaction at point c ($b_y$) is equal to:
- the z-component of the reaction at point b ($b_z$) is equal to:",7c4ccac6-843d-4392-a673-feb64c2a8bbf,3d equilibirum reaction forces,,Statics,"Reaction force,3d",,False,jlam154@ucr.edu,Numeric input,1,,1.0,,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium"
38,distForce2,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram force distributed"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""fb"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""DistForce2.jpg""></pl-figure>
  <p>
   The figure above shows a distributed load on a beam with a profile w(x) = $w_{0}sin(\frac{x}{2})$
 </p>
</pl-question-panel>

<p> The force that is equivalent to the distributed load has a magnitude of ______ kN </p>
<pl-number-input-fixed answers-name=""Feq"" correct-answer-fixed=""20"" comparison=""sigfig"" digits=""3"" label=""$F_{eq}$ (kN)""></pl-number-input-fixed>
<p> The equivalent force $F_{eq}$ passes through a point located at a distance of __________ to the right of point O.  </p>
<pl-number-input-fixed answers-name=""Dist"" correct-answer-fixed=""2"" comparison=""sigfig"" digits=""2"" label="" m ""></pl-number-input-fixed>



<p> The reaction at O at O_{y} is _______ kN </p>
<pl-number-input-fixed answers-name=""Oy"" correct-answer-fixed=""9.25"" comparison=""sigfig"" digits=""3"" label=""$O_{y}$ (kN)""></pl-number-input-fixed>
<p> The reaction at B_{x} is ______ kN  </p>
<pl-number-input-fixed answers-name=""Bx"" correct-answer-fixed=""5.2"" comparison=""sigfig"" digits=""2"" label="" $B_{x}$ (kN)""></pl-number-input-fixed>
<p> The reaction at B_{y} is ______ kN  </p>
<pl-number-input-fixed answers-name=""By"" correct-answer-fixed=""13.75"" comparison=""sigfig"" digits=""3"" label="" $B_{y}$ (kN) ""></pl-number-input-fixed>",,,,,"what is the magnitude of the force that is equivalent to the distributed load? 
options: 
a) 0 kn 
b) 1 kn 
c) 2 kn 
d) 3 kn 

 where is the equivalent force $f_{eq}$ located with respect to point o? 
options: 
a) to the left of point o 
b) to the right of point o 
c) at point o 
d) cannot be determined 

 what is the reaction at o in the y-direction? 
options: 
a) 0 kn 
b) 1 kn 
c) 2 kn 
d) 3 kn 

 what is the reaction at b in the x-direction? 
options: 
a) 0 kn 
b) 1 kn 
c) 2 kn 
d) 3 kn 

 what is the reaction at b in the y-direction? 
options: 
a) 0 kn 
b) 1 kn 
c) 2 kn 
d) 3 kn",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram force distributed,Freebody,Statics,"Forces,Fbd",,False,jlam154@ucr.edu,Fb,1,,1.0,,,,,"ME 010, ME 110","Distributed Forces, Reaction Forces, Static Equilibrium"
39,distForce3,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram beam distributed"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""DistForce3.jpg""></pl-figure>
  <p>
  The gate is hinged at pin O and has a distributed load as shown. It is propped at A by means of a rod AB hinged at both A and B. 
 </p>
</pl-question-panel>

<p> The force that is equivalent to the distributed force has a magnitude of ______ kN </p>
<pl-number-input-fixed answers-name=""Feq"" correct-answer-fixed=""30"" comparison=""sigfig"" digits=""3"" label=""$F_{eq}$ (kN)""></pl-number-input-fixed>
<p> The equivalent force $F_{eq}$ passes through a point located a distance of __________ m vertically above point O.  </p>
<pl-number-input-fixed answers-name=""Dist"" correct-answer-fixed=""2"" comparison=""sigfig"" digits=""3"" label="" m ""></pl-number-input-fixed>



<pl-question-panel> 
<p>What is the force at A on the gate?</p>
<pl-multiple-choice answers-name=""ForceA"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">24 kN directed towards A  </pl-answer>
  <pl-answer correct=""false"">24 kN directed away from A  </pl-answer>
  <pl-answer correct=""false""> 18 kN directed towards A  </pl-answer>
  <pl-answer correct=""false""> 18 kN directed away from A  </pl-answer>
</pl-multiple-choice>",,,,,"what is the force at a on the gate?
options:
- 24 kn directed towards a
- 24 kn directed away from a
- 18 kn directed towards a
- 18 kn directed away from a",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram beam distributed,Freebody,Statics,"Forces,Fbd",,False,jlam154@ucr.edu,Mc,1,,1.0,,,,,ME 002,"Statics and Mechanics, Static Equilibrium"
40,distForce4,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram beam distributed"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel>
  <pl-figure file-name=""DistForce4.jpg""></pl-figure>
  <p>
    The beam below shows a beam with a distributed load. 
 </p>
</pl-question-panel>

<p>  The reaction at B is $B_{x}$ is _______ kN </p>
<pl-number-input-fixed answers-name=""Bx"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""3"" label=""$B_{x}$ (kN)""></pl-number-input-fixed>
<p>  The reaction at B is $B_{y}$ is _______ kN </p>
<pl-number-input-fixed answers-name=""By"" correct-answer-fixed=""6.5"" comparison=""sigfig"" digits=""3"" label=""$B_{y}$ (kN)""></pl-number-input-fixed>
<p>  The reaction at A is $A_{y}$ is _______ kN </p>
<pl-number-input-fixed answers-name=""Ay"" correct-answer-fixed=""3.5"" comparison=""sigfig"" digits=""3"" label=""$A_{y}$ (kN)""></pl-number-input-fixed>
",,,,,"what is the reaction at b for the x-component, $b_{x}$, in kn?
options: _______

 what is the reaction at b for the y-component, $b_{y}$, in kn?
options: _______

 what is the reaction at a for the y-component, $a_{y}$, in kn?
options: _______",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram beam distributed,Freebody,Statics,"Forces,Fbd",,False,jlam154@ucr.edu,Mc,1,,1.0,,,,,"ME 010, ME 110",Reaction Forces
41,simpCentroid,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Center of mass & distributed forces"",
	""stem"": ""Test your understanding of centroids"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  The expression for y(x) in the figure above is:
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> x = $5y^{2}$   </pl-answer>
  <pl-answer correct=""false""> y = 1 - $x^{2}$ </pl-answer>
  <pl-answer correct=""false""> y = $\left ( \frac{x}{5} \right )^{2}$  </pl-answer>
  <pl-answer correct=""true"">  y = $1 - \left ( \frac{x}{5} \right )^{2}$  </pl-answer>

</pl-multiple-choice>",,,,,"what is the expression for y(x) in the figure above?

options:
a) x = $5y^{2}$
b) y = 1 - $x^{2}$
c) y = $\left ( \frac{x}{5} \right )^{2}$
d) y = $1 - \left ( \frac{x}{5} \right )^{2}$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Center of mass & distributed forces,Test your understanding of centroids,Statics,"V2,For2",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
42,simpCentroid2,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Center of mass & distributed forces"",
	""stem"": ""Test your understanding of centroids"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  In the figure above, y(x) = 1 - $\left ( \frac{x}{5} \right )^{2}$ The area of the figure
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $\frac{20}{3}$   </pl-answer>
  <pl-answer correct=""false""> $\frac{7}{3}$ </pl-answer>
  <pl-answer correct=""false""> 10  </pl-answer>
  <pl-answer correct=""true"">  $\frac{10}{3}$   </pl-answer>

</pl-multiple-choice>",,,,,"what is the area of the figure represented by the equation y(x) = 1 - $\left ( \frac{x}{5} \right )^{2}$?

options:
a) $\frac{20}{3}$
b) $\frac{7}{3}$
c) 10
d) $\frac{10}{3}$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Center of mass & distributed forces,Test your understanding of centroids,Statics,"V2,For2",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
43,simpCentroid3,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Center of mass & distributed forces"",
	""stem"": ""Test your understanding of centroids"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  The x-coordinate of the centroid of the area is:
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $\frac{11}{14}$   </pl-answer>
  <pl-answer correct=""false""> $\frac{7}{8}$ </pl-answer>
  <pl-answer correct=""false""> $\frac{13}{2}$  </pl-answer>
  <pl-answer correct=""true"">  $\frac{15}{8}$   </pl-answer>

</pl-multiple-choice>",,,,,"what is the x-coordinate of the centroid of the area?

options:
a) $\frac{11}{14}$
b) $\frac{7}{8}$
c) $\frac{13}{2}$
d) $\frac{15}{8}$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Center of mass & distributed forces,Test your understanding of centroids,Statics,"V2,For2",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
44,simpCentroid4,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Center of mass & distributed forces"",
	""stem"": ""Test your understanding of centroids"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  The y-coordinate of the centroid of the area is:
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $\frac{5}{3}$   </pl-answer>
  <pl-answer correct=""false""> $\frac{7}{3}$ </pl-answer>
  <pl-answer correct=""false""> $\frac{15}{16}$  </pl-answer>
  <pl-answer correct=""true"">  $\frac{2}{5}$   </pl-answer>

</pl-multiple-choice>",,,,,"the y-coordinate of the centroid of the area is:

options:
a) $\frac{5}{3}$
b) $\frac{7}{3}$
c) $\frac{15}{16}$
d) $\frac{2}{5}$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Center of mass & distributed forces,Test your understanding of centroids,Statics,"V2,For2",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
45,frameFBD,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""SimpFrame.jpg""></pl-figure>

<p> In the figure below, a weight W is suspended from point D of a beam AD. The beam is held up by rod BC. Neglect the mass of the beam AD and rod BC. Which of the following is true (mark all that apply)
</p>

<pl-checkbox answers-name=""SimpFrame1"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> The magnitude of the force in rod BC is known  </pl-answer>
  <pl-answer correct=""false""> The direction of the force in rod BC (i.e whether the force is tension or compression) is known.  </pl-answer>
  <pl-answer correct=""false""> Beam AD is a two-force member    </pl-answer>
  <pl-answer correct=""true"">  Beam AD is a three force member  </pl-answer>
  <pl-answer correct=""true""> Rod BC is a two-force member   </pl-answer>
  <pl-answer correct=""true"">  The line of action of the force in rod BC is known  </pl-answer>
</pl-checkbox>",,,,,"which of the following is true (mark all that apply)
options:
1. the magnitude of the force in rod bc is known
2. the direction of the force in rod bc (i.e whether the force is tension or compression) is known.
3. beam ad is a two-force member
4. beam ad is a three force member
5. rod bc is a two-force member
6. the line of action of the force in rod bc is known",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium, 3D Rigid Body Mechanics"
46,frameFBD10,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD16.jpg""></pl-figure>

<p>From the freebody diagram of BC, the magnitude of the reaction components at C are: $C_{x}$= ______ N and $C_{y}$ = ______ N. The magnitude of the force of the spring is $F_{s}$ = ________ N. 

  </p>

<pl-multiple-choice answers-name=""SimpFBD16"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 32.2 N, 0 N, 32.2 N </pl-answer>
  <pl-answer correct=""false""> 0 N, 32.2 N, 32.2 N   </pl-answer>
  <pl-answer correct=""false""> -32.2 N, 0 N, 32.2 N  </pl-answer>
  <pl-answer correct=""false""> 0 N, -32.2 N, 32.2 N </pl-answer>
</pl-multiple-choice>",,,,,"what are the magnitudes of the reaction components at c ($c_{x}$ and $c_{y}$) and the magnitude of the force of the spring ($f_{s}$)? 

options:
a) $c_{x}$ = 32.2 n, $c_{y}$ = 0 n, $f_{s}$ = 32.2 n
b) $c_{x}$ = 0 n, $c_{y}$ = 32.2 n, $f_{s}$ = 32.2 n
c) $c_{x}$ = -32.2 n, $c_{y}$ = 0 n, $f_{s}$ = 32.2 n
d) $c_{x}$ = 0 n, $c_{y}$ = -32.2 n, $f_{s}$ = 32.2 n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103","Reaction Forces, Static Equilibrium"
47,frameFBD11,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD17.jpg""></pl-figure>

<p>The figure shows the freebody diagram of AC. Which of the following equations is the correct equation for moments about point A?
</p>

<pl-multiple-choice answers-name=""SimpFBD17"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $-F_{s} \frac{L}{6} cos(\theta) - W\frac{L}{2} sin(\theta) - C_{y}Lsin(\theta) + C_{x}Lcos(\theta) = 0$ </pl-answer>
  <pl-answer correct=""false""> $-F_{s} \frac{L}{6} cos(\theta) - W\frac{L}{2} sin(\theta) + C_{y}Lsin(\theta) - C_{x}Lcos(\theta) = 0$   </pl-answer>
  <pl-answer correct=""false""> $-F_{s} \frac{L}{6} cos(\theta) + W\frac{L}{2} sin(\theta) + C_{y}Lsin(\theta) - C_{x}Lcos(\theta) = 0$  </pl-answer>
  <pl-answer correct=""false""> $-F_{s} \frac{L}{6} cos(\theta) - W\frac{L}{2} sin(\theta) + C_{y}Lsin(\theta) + C_{x}Lcos(\theta) = 0$ </pl-answer>
</pl-multiple-choice>",,,,,"which of the following equations is the correct equation for moments about point a?

options:
1. $-f_{s} \frac{l}{6} cos(\theta) - w\frac{l}{2} sin(\theta) - c_{y}lsin(\theta) + c_{x}lcos(\theta) = 0$
2. $-f_{s} \frac{l}{6} cos(\theta) - w\frac{l}{2} sin(\theta) + c_{y}lsin(\theta) - c_{x}lcos(\theta) = 0$
3. $-f_{s} \frac{l}{6} cos(\theta) + w\frac{l}{2} sin(\theta) + c_{y}lsin(\theta) - c_{x}lcos(\theta) = 0$
4. $-f_{s} \frac{l}{6} cos(\theta) - w\frac{l}{2} sin(\theta) + c_{y}lsin(\theta) + c_{x}lcos(\theta) = 0$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 110","Static Equilibrium, Statics and Mechanics"
48,frameFBD12,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame4.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>The figure shows a schematic of an engine. $F_{g}$ is the force exerted by the combustion gases on the piston (shown by the rectangle at B). $F_{g}$= 50 kN. The angle of the crank OA is $\theta$ = $30^{o}$ while the angle of the connecting rod AB is $\Phi = 15^{o}$. Neglect the weight of all members. Also neglect friction between the the piston and the cylinder. 
</p>

<pl-multiple-choice answers-name=""SimpFrame4"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The freebody diagram is complete and accurate </pl-answer>
  <pl-answer correct=""false""> There should be a force from the connecting rod AB at B  </pl-answer>
  <pl-answer correct=""false""> There should be a force from the crank on the connecting rod AB at A.  </pl-answer>
  <pl-answer correct=""false""> There should be a force from the connecting rod on the crank at A.  </pl-answer>
  <pl-answer correct=""false""> The vertical reaction at O should be deleted.  </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at O should be deleted. </pl-answer>
</pl-multiple-choice>",,,,,"what forces should be present in the schematic of the engine? 
options:
a) force from the connecting rod ab at b
b) force from the crank on the connecting rod ab at a
c) force from the connecting rod on the crank at a
d) vertical reaction at o should be deleted
e) horizontal reaction at o should be deleted",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 002,"Machine Design, Reaction Forces"
49,frameFBD13,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimensional equllibrium"",
	""stem"": ""Test your understanding of vectors and frames"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>Which of the following is true?
</p>

<pl-multiple-choice answers-name=""SimpFBD18"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> AB is a two force member </pl-answer>
  <pl-answer correct=""true""> The piston (shown by the rectangle at B) is a three force member  </pl-answer>
  <pl-answer correct=""false""> OA is a two force member  </pl-answer>
  <pl-answer correct=""false""> AB is a three force member  </pl-answer>
  <pl-answer correct=""false""> OA is a three force member  </pl-answer>
  <pl-answer correct=""false""> The piston (shown by the rectangle at B) is a two force member  </pl-answer>
</pl-multiple-choice>",,,,,"which of the following is true?
options:
a) ab is a two force member
b) the piston (shown by the rectangle at b) is a three force member
c) oa is a two force member
d) ab is a three force member
e) oa is a three force member
f) the piston (shown by the rectangle at b) is a two force member",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimensional equllibrium,Test your understanding of vectors and frames,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103",Statics and Mechanics
50,frameFBD14,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimensional equllibrium"",
	""stem"": ""Test your understanding of vectors and frames"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame4.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>Analyzing the freebody diagram for the piston for this position, the normal reaction from the guide $B_{y}$ is:

</p>

<pl-multiple-choice answers-name=""SimpFrame4"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 13.4 kN </pl-answer>
  <pl-answer correct=""false""> 14.6 kN  </pl-answer>
  <pl-answer correct=""false""> 15.9 kN </pl-answer>
  <pl-answer correct=""false""> 17.2 kN </pl-answer>
</pl-multiple-choice>",,,,,"what is the normal reaction from the guide $b_{y}$ for the given position of the piston?
options:
a) 13.4 kn
b) 14.6 kn
c) 15.9 kn
d) 17.2 kn",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimensional equllibrium,Test your understanding of vectors and frames,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Reaction Forces, Static Equilibrium"
51,frameFBD15,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimensional equllibrium"",
	""stem"": ""Test your understanding of vectors and frames"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame4.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>The magnitude of the force on B from the connecting rod  is _______ kN 
</p>

<pl-multiple-choice answers-name=""SimpFrame4"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 51.8 kN directed towards B</pl-answer>
  <pl-answer correct=""false""> 51.8 kN directed away from B  </pl-answer>
  <pl-answer correct=""false""> 67.2 kN directed toward B  </pl-answer>
  <pl-answer correct=""false""> 67.2 kN directed away from B  </pl-answer>
</pl-multiple-choice>
",,,,,"what is the magnitude of the force on b from the connecting rod?
options:
a) 51.8 kn directed towards b
b) 51.8 kn directed away from b
c) 67.2 kn directed toward b
d) 67.2 kn directed away from b",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimensional equllibrium,Test your understanding of vectors and frames,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 103,"Reaction Forces, Distributed Forces"
52,frameFBD16,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimensional equllibrium"",
	""stem"": ""Test your understanding of vectors and frames"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>From the overall freebody diagram for the engine (above), the value of the moment $M_{o}$ is _______ kN-m.
</p>

<pl-multiple-choice answers-name=""SimpFBD18"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 5.04 kN-m </pl-answer>
  <pl-answer correct=""false""> 6.12 kN-m  </pl-answer>
  <pl-answer correct=""false""> 7.32 kN-m  </pl-answer>
  <pl-answer correct=""false""> 8.19 kN-m  </pl-answer>
</pl-multiple-choice>",,,,,"from the overall freebody diagram for the engine (above), the value of the moment $m_{o}$ is _______ kn-m.
options:
a) 5.04 kn-m
b) 6.12 kn-m
c) 7.32 kn-m
d) 8.19 kn-m",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimensional equllibrium,Test your understanding of vectors and frames,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 103,"Static Equilibrium, Statics and Mechanics"
53,frameFBD17,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimensional equllibrium"",
	""stem"": ""Test your understanding of vectors and frames"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>The horizontal and vertical reactions at O are:
</p>

<pl-multiple-choice answers-name=""SimpFBD18"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $O_{x}$ = 50 kN (+x direction), $O_{y}$ = 13.4 kN (+y direction) </pl-answer>
  <pl-answer correct=""true"">  $O_{x}$ = 50 kN (+x direction), $O_{y}$ = 13.4 kN (-y direction)  </pl-answer>
  <pl-answer correct=""false""> $ O_{x}$ = 13.4 kN (+x direction), $O_{y}$ = 50 kN (+y direction)  </pl-answer>
  <pl-answer correct=""false""> $O_{x}$ = 13.4 kN (+x direction), $O_{y}$ = 13.4 kN (-y direction)  </pl-answer>
</pl-multiple-choice>",,,,,"what are the horizontal and vertical reactions at point o? 

options:
a) $o_{x}$ = 50 kn (+x direction), $o_{y}$ = 13.4 kn (+y direction)
b) $o_{x}$ = 50 kn (+x direction), $o_{y}$ = 13.4 kn (-y direction)
c) $o_{x}$ = 13.4 kn (+x direction), $o_{y}$ = 50 kn (+y direction)
d) $o_{x}$ = 13.4 kn (+x direction), $o_{y}$ = 13.4 kn (-y direction)",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimensional equllibrium,Test your understanding of vectors and frames,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium"
54,frameFBD2,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""SimpFrame2.jpg""></pl-figure>

<p> In the figure below, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. Which of the following is/are two force members?
  </p>

<pl-multiple-choice answers-name=""SimpFrame2"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> None of the above   </pl-answer>
  <pl-answer correct=""false""> AH  </pl-answer>
  <pl-answer correct=""false""> HD  </pl-answer>
  <pl-answer correct=""false""> CE  </pl-answer>
</pl-multiple-choice>",,,,,"which of the following is/are two force members?
options:
a) none of the above
b) ah
c) hd
d) ce",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,"Statics and Mechanics, Reaction Forces"
55,frameFBD3,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame2.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD12.jpg""></pl-figure>

<p> In the figure above, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of the pulley. Which of the following are true?
  </p>

<pl-multiple-choice answers-name=""SimpFBD12"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $A_{x} + C_{x} + H_{x}$   </pl-answer>
  <pl-answer correct=""false""> $A_{y} - C_{y} + H_{y}$  </pl-answer>
  <pl-answer correct=""false""> $A_{y} + C_{y} - H_{y}$  </pl-answer>
  <pl-answer correct=""false""> $A_{x} - C_{x} + H_{x}$ </pl-answer>
</pl-multiple-choice>",,,,,"which of the following are true?

options:
1. $a_{x} + c_{x} + h_{x}$
2. $a_{y} - c_{y} + h_{y}$
3. $a_{y} + c_{y} - h_{y}$
4. $a_{x} - c_{x} + h_{x}$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Basic Algebra
56,frameFBD4,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame2.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD11.jpg""></pl-figure>

<p> In the figure above, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of the pulley. Which of the following are true?
  </p>

<pl-multiple-choice answers-name=""SimpFBD11"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The force T at M should be in the opposite direction   </pl-answer>
  <pl-answer correct=""false""> The force T at N should be in the opposite direction  </pl-answer>
  <pl-answer correct=""false""> Vertical reaction at E should be deleted  </pl-answer>
  <pl-answer correct=""false""> Horizontal reaction at E should be deleted </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is correct and complete  </pl-answer>
</pl-multiple-choice>",,,,,"which of the following are true?
options:
1. the force t at m should be in the opposite direction
2. the force t at n should be in the opposite direction
3. vertical reaction at e should be deleted
4. horizontal reaction at e should be deleted
5. the freebody diagram is correct and complete",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,"Reaction Forces, Statics and Mechanics"
57,frameFBD5,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame2.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD12.jpg""></pl-figure>

<p> In the figure above, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of member AH . Which of the following equations is correct?
  </p>

<pl-multiple-choice answers-name=""SimpFBD12"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> -C_{x}(4) + C_{y}(3)-H_{x}(8) + H_{y}(6) = 0  </pl-answer>
  <pl-answer correct=""false""> C_{x}(4) + C_{y}(3)-H_{x}(8) + H_{y}(6) = 0   </pl-answer>
  <pl-answer correct=""false""> -C_{x}(4) - C_{y}(3)-H_{x}(8) + H_{y}(6) = 0  </pl-answer>
  <pl-answer correct=""false""> -C_{x}(4) + C_{y}(3)+H_{x}(8) + H_{y}(6) = 0 </pl-answer>
</pl-multiple-choice>",,,,,"which of the following equations is correct?

options:
a) -c_{x}(4) + c_{y}(3)-h_{x}(8) + h_{y}(6) = 0
b) c_{x}(4) + c_{y}(3)-h_{x}(8) + h_{y}(6) = 0
c) -c_{x}(4) - c_{y}(3)-h_{x}(8) + h_{y}(6) = 0
d) -c_{x}(4) + c_{y}(3)+h_{x}(8) + h_{y}(6) = 0",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,None
58,frameFBD6,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD13.jpg""></pl-figure>

<p> The figure shows a ladder that is connected to the ground with a pin joint at A and a roller joint at B. Both members AC and BC have the same weight W. W = 200 N, and L = 0.5 m. The angle \Theta  = 15^{o}
</p>

<p>Shown above is the freebody diagram for the whole frame. Which of the following statements are true?</p>

<pl-multiple-choice answers-name=""SimpFBD13"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The freebody diagram is complete and accurate.  </pl-answer>
  <pl-answer correct=""false""> The spring force should be added.  </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at C should be included.  </pl-answer>
  <pl-answer correct=""false""> The vertical reaction at C should be included.  </pl-answer>
  <pl-answer correct=""false""> A moment reaction should be included at A.
  </pl-answer>
</pl-multiple-choice>",,,,,"which of the following statements are true?
options:
1. the freebody diagram is complete and accurate.
2. the spring force should be added.
3. the horizontal reaction at c should be included.
4. the vertical reaction at c should be included.
5. a moment reaction should be included at a.",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Statics and Mechanics, Static Equilibrium, Reaction Forces"
59,frameFBD7,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD13.jpg""></pl-figure>

<p> The support reactions at A are A_{x} = ______ N and A_{y} = ______ N. The support reaction at B is B_{y} = ______ N.
  </p>

<pl-multiple-choice answers-name=""SimpFBD13"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 0 N, 200 N, 200 N </pl-answer>
  <pl-answer correct=""false""> 200 N, 0 N, 200 N   </pl-answer>
  <pl-answer correct=""false""> 200 N, 200 N, 200 N  </pl-answer>
  <pl-answer correct=""false""> -200 N, 200 N, 200 N </pl-answer>
</pl-multiple-choice>",,,,,"what are the support reactions at a and b?

options:
a) a_{x} = 0 n, a_{y} = 200 n, b_{y} = 200 n
b) a_{x} = 200 n, a_{y} = 0 n, b_{y} = 200 n
c) a_{x} = 200 n, a_{y} = 200 n, b_{y} = 200 n
d) a_{x} = -200 n, a_{y} = 200 n, b_{y} = 200 n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,Reaction Forces
60,frameFBD8,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD14.jpg""></pl-figure>

<p> The figure above shows the freebody diagram of BC. Which of the following statements are true?
  </p>

<pl-checkbox answers-name=""SimpFBD14"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> Spring force should be horizontal </pl-answer>
  <pl-answer correct=""true""> Vertical reaction at C should be included </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and accurate   </pl-answer>
  <pl-answer correct=""false""> Horizontal reaction at C should be removed  </pl-answer>
  <pl-answer correct=""false""> Weight should be removed  </pl-answer>
</pl-checkbox>",,,,,"which of the following statements are true about the freebody diagram of bc?

options:
a) spring force should be horizontal
b) vertical reaction at c should be included
c) the freebody diagram is complete and accurate
d) horizontal reaction at c should be removed
e) weight should be removed",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Statics and Mechanics
61,frameFBD9,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", """"],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD15.jpg""></pl-figure>

<p> The figure above shows the freebody diagrams for both AC and BC. Assuming that the freebody diagram of BC is correct, which of the following statements are true about the freebody diagram for AC?
</p>

<pl-checkbox answers-name=""SimpFBD15"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The spring force on AC should be in the opposite direction </pl-answer>
  <pl-answer correct=""true""> The vertical reaction at C should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at C should be in the opposite direction.</pl-answer>
  <pl-answer correct=""false""> The weight vector should be removed.  </pl-answer>
  <pl-answer correct=""false""> Both diagrams are complete and correct.  </pl-answer>
</pl-checkbox>",,,,,"which of the following statements are true about the freebody diagram for ac?
options:
1. the spring force on ac should be in the opposite direction.
2. the vertical reaction at c should be in the opposite direction.
3. the horizontal reaction at c should be in the opposite direction.
4. the weight vector should be removed.
5. both diagrams are complete and correct.",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Statics and Mechanics, Reaction Forces"
62,simpMachine,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimensional FBD"",
	""stem"": ""Test your understanding of vectors and FBD"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpMachine.jpg""></pl-figure>
</p>
<p>The figure above shows pincers holding an object. The figure also the free body diagram of the lower half of the pincers. Which of the following are true? (Mark all possible answers)
</p>
<pl-checkbox answers-name=""simpMachine"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">The freebody diagram is complete and correct.  </pl-answer>
  <pl-answer correct=""false"">The force R should be in the opposite direction     </pl-answer>
  <pl-answer correct=""true"">The force F should be in the opposite direction  </pl-answer>
  <pl-answer correct=""true"">There should be a horizontal reaction at O. </pl-answer>
  <pl-answer correct=""true"">The force N should be in the opposite direction</pl-answer>
</pl-checkbox>",,,,,"which of the following are true? (mark all possible answers)
options:
1. the freebody diagram is complete and correct.
2. the force r should be in the opposite direction.
3. the force f should be in the opposite direction.
4. there should be a horizontal reaction at o.
5. the force n should be in the opposite direction.",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimensional fbd,Test your understanding of vectors and fbd,Statics,"V2,For2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103","Statics and Mechanics, Reaction Forces"
63,simpMoment,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""tf"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpMoment.jpg""></pl-figure> </p>

<p> True or False: The moment of the force about point A is counter-clockwise.</p>

<pl-multiple-choice answers-name=""simpMoment"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">True </pl-answer>
  <pl-answer correct=""true"">False</pl-answer>
</pl-multiple-choice>
",,,,,"true or false: the moment of the force about point a is counter-clockwise.
options:
- true
- false",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of vector operations,Statics,"V2,For2,Mom2",,False,jlam154@ucr.edu,Tf,1,,1.0,Javascript,,,,"ME 010, ME 103",Statics and Mechanics
64,simpMoment2,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpMoment2.jpg""></pl-figure>
</p>
<p>Determine the moment of the force \( F_1 \) about point O</p>
<pl-multiple-choice answers-name=""O_Moment"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">\( -50 N\cdot m \)  </pl-answer>
  <pl-answer correct=""false"">\( -25 N\cdot m \)  </pl-answer>
  <pl-answer correct=""false""> \( -50\sqrt{3} N\cdot m \)  </pl-answer>
  <pl-answer correct=""false""> \( -100 N\cdot m \)  </pl-answer>
</pl-multiple-choice>",,,,,"determine the moment of the force \( f_1 \) about point o

options:
1. \( -50 n\cdot m \)
2. \( -25 n\cdot m \)
3. \( -50\sqrt{3} n\cdot m \)
4. \( -100 n\cdot m \)",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103","Statics and Mechanics, Distributed Forces"
65,simpTrig,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple trigonometry"",
	""stem"": ""Test your understanding of trigonometry"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""ang"", ""tri""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpTrig.jpg""></pl-figure>
</p>

<p>In the figure, the angle ABD is:</p>
<pl-multiple-choice answers-name=""ABD"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> \( \alpha \)  </pl-answer>
  <pl-answer correct=""false""> \( 90-\alpha \) </pl-answer>
  <pl-answer correct=""false""> \( 90 + \alpha \)  </pl-answer>
  <pl-answer correct=""false""> \( 45 - \alpha \) </pl-answer>
  <pl-answer correct=""false""> None of the above </pl-answer>
</pl-multiple-choice>",,,,,"in the figure, the angle abd is:
a) \( \alpha \)  
b) \( 90-\alpha \) 
c) \( 90 + \alpha \)  
d) \( 45 - \alpha \) 
e) none of the above",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple trigonometry,Test your understanding of trigonometry,Statics,"T,Ang,Tri",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,I don't know based on the provided information. Return None
66,simpTrigCompute,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple trigonometry"",
	""stem"": ""Test your understanding of trigonometric calculations"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""ang"", ""tri""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpTrig2.jpg""></pl-figure>
</p>

<p>In the figure, the angle \( \alpha \) in degrees is:</p>

<pl-multiple-choice answers-name=""Alpha"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 32.34  </pl-answer>
  <pl-answer correct=""false""> 38.66 </pl-answer>
  <pl-answer correct=""false""> 42.87 </pl-answer>
  <pl-answer correct=""true""> 51.34  </pl-answer>
</pl-multiple-choice>",,,,,"in the figure, the angle \( \alpha \) in degrees is:
options:
a) 32.34
b) 38.66
c) 42.87
d) 51.34",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple trigonometry,Test your understanding of trigonometric calculations,Statics,"T,Ang,Tri",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Coordinate Geometry
67,simpTrigCompute2,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple trigonometry 2"",
	""stem"": ""Test your understanding of trigonometric calculations"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""ang"", ""tri""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpTrigCompute2.jpg""></pl-figure>
  
</p>
<p>In the figure, the angle ABC in degrees is:</p>
<pl-multiple-choice answers-name=""ABC"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 80 </pl-answer>
  <pl-answer correct=""false""> 110 </pl-answer>
  <pl-answer correct=""false""> 120 </pl-answer>
  <pl-answer correct=""true""> 125 </pl-answer>
  <pl-answer correct=""false""> 130 </pl-answer>
</pl-multiple-choice>",,,,,"in the figure, what is the measure of angle abc in degrees?
options:
a) 80
b) 110
c) 120
d) 125
e) 130",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple trigonometry 2,Test your understanding of trigonometric calculations,Statics,"T,Ang,Tri",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,None
68,simpTrigCompute3,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple trigonometry 3"",
	""stem"": ""Test your understanding of trigonometric calculations"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""ang"", ""tri""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpTrigCompute3.jpg""></pl-figure>
</p>

<p> In the figure, angle ACD = 15 degrees, the length of BC is:</p>
<pl-multiple-choice answers-name=""BC"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 12.2 </pl-answer>
  <pl-answer correct=""true""> 17.6 </pl-answer>
  <pl-answer correct=""false""> 20.5 </pl-answer>
  <pl-answer correct=""false""> 37.8 </pl-answer>
</pl-multiple-choice>",,,,,"in the figure, angle acd = 15 degrees, the length of bc is:
options:
a) 12.2
b) 17.6
c) 20.5
d) 37.8",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple trigonometry 3,Test your understanding of trigonometric calculations,Statics,"T,Ang,Tri",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
69,simpTrigCompute4,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple trigonometry 4"",
	""stem"": ""Test your understanding of trigonometric calculations"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""ang"", ""tri""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpTrigCompute3.jpg""></pl-figure>
</p>

<p> In the figure, angle ACD = 15 degrees, the length of BC is:</p>
<pl-multiple-choice answers-name=""BC"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 12.2 </pl-answer>
  <pl-answer correct=""true""> 17.6 </pl-answer>
  <pl-answer correct=""false""> 20.5 </pl-answer>
  <pl-answer correct=""false""> 27.8 </pl-answer>
</pl-multiple-choice>",,,,,"in the figure, angle acd = 15 degrees, the length of bc is:
options:
a) 12.2
b) 17.6
c) 20.5
d) 27.8",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple trigonometry 4,Test your understanding of trigonometric calculations,Statics,"T,Ang,Tri",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
70,simpTrigCompute5,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple trigonometry 5"",
	""stem"": ""Test your understanding of trigonometric calculations"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""ang"", ""tri""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""simpTrigCompute3.jpg""></pl-figure>
</p>
<p> In the figure, angle ACD = 15 degrees. The angle BAC is:</p>

<pl-multiple-choice answers-name=""BAC"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 114 </pl-answer>
  <pl-answer correct=""false""> 125 </pl-answer>
  <pl-answer correct=""false""> 95 </pl-answer>
  <pl-answer correct=""false""> 105 </pl-answer>
</pl-multiple-choice>",,,,,"in the figure, angle acd = 15 degrees. the angle bac is:
options:
a) 114
b) 125
c) 95
d) 105",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple trigonometry 5,Test your understanding of trigonometric calculations,Statics,"T,Ang,Tri",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Coordinate Geometry, Analytical Geometry"
71,statics_MCQ,"{
    ""uuid"": ""8a4ccac6-1031-43ed-a773-feb64c2a8bbf"",
    ""title"": ""Statics W1M1_4 MCQ"",
	""stem"": ""Test your understanding of vectors and their operations"",
    ""topic"": ""statics"",
    ""tags"": [""dot"", ""vector"", ""addition""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mcq"", 
	""nSteps"": 1,
	""updatedBy"":"""",  
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","






<pl-question-panel> 
  <pl-figure file-name=""FreeBody3.jpg""></pl-figure>
  <pl-figure file-name =""FreeBody4.jpg""></pl-figure>

<p>A roller of weight W is placed on a V-block as shown. The figure also shows the free body diagram of the roller. Which of the following statements are true? 
</p>

<pl-checkbox answers-name=""FreeBody3"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">The freebody diagram is correct and complete.  </pl-answer>
  <pl-answer correct=""false"">The force N_{B} should be pointing in the opposite direction.  </pl-answer  >
  <pl-answer correct=""false"">The force N_{B} should make an angle 30° with the horizontal.  </pl-answer>
  <pl-answer correct=""true""> The force N_{A} should be pointing in the opposite direction.  </pl-answer>
  <pl-answer correct=""true"">The weight of the roller should be added.  </pl-answer>
  <pl-answer correct=""true"">The force N_{A} should be pointing in the opposite direction.  </pl-answer>
 
</pl-checkbox>


<pl-question-panel> 
  <pl-figure file-name=""SimpFBD9.jpg""></pl-figure>
  <pl-figure file-name =""SimpFBD10.jpg""></pl-figure>
</p>
<p>A rod of weight W is hinged at A and rests on a frictionless surface at B. The figure also shows the free-body diagram of the rod.
</p>
<pl-checkbox answers-name="""" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">The freebody diagram is complete and correct.  </pl-answer>
  <pl-answer correct=""false"">The horizontal force A_{x} should be deleted.  </pl-answer>
  <pl-answer correct=""false"">Weight should be deleted.  </pl-answer>
  <pl-answer correct=""false"">A horizontal force B_{x} should be added.  </pl-answer>
  <pl-answer correct=""false"">The vertical force B_{y} should be deleted.  </pl-answer>
  <pl-answer correct=""true"">The vertical force B_{y} should be in the opposite direction.  </pl-answer>
  <pl-answer correct=""true"">A vertical force A_{y} should be added.  </pl-answer>
</pl-checkbox>



<pl-question-panel> 
  True or False: For a three-force member in equilibrium, the forces do not have to be in equilibrium. </p>
<pl-multiple-choice answers-name=""ThreeForceMember"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">True </pl-answer>
  <pl-answer correct=""true"">False</pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name=""AirBalloonFBD1.jpg""></pl-figure>
  <p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as T_{AB}, T_{AC}, and T_{AD}. Which of the following figures is the correct free body diagram? </p>
<pl-multiple-choice answers-name=""ThreeForceMember"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">
    <pl-figure file-name =""AirBalloonFBD2.jpg""></pl-figure>
  </pl-answer>

  <pl-answer correct=""true"">
    <pl-figure file-name =""AirBalloonFBD3.jpg""></pl-figure>
  </pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name=""AirBalloonFBD3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as T_{AB}, T_{AC}, and T_{AD}.Determine the position vectors for each rope. Select all that apply. Refer to figure 
</p>

<pl-checkbox answers-name=""PositionVectors"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> AD = -2\hat{i} + 4\hat{j} -10\hat{k} </pl-answer>
  <pl-answer correct=""true"">  AB = -5\hat{i} -8\hat{j} -10\hat{k}  </pl-answer>
  <pl-answer correct=""true"">  AC = 5\hat{i} +5\hat{j} -10\hat{k}  </pl-answer>
  <pl-answer correct=""false"">  AB = 5\hat{i} -8\hat{j} +10\hat{k}  </pl-answer>
  <pl-answer correct=""false"">  AC = -5\hat{i} -5\hat{j} +10\hat{k}  </pl-answer>

  
 
</pl-checkbox>



<pl-question-panel> 
  <pl-figure file-name=""AirBalloonFBD3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as T_{AB}, T_{AC}, and T_{AD}.Determine the lengths for each rope. Select all that apply.   
</p>

<pl-checkbox answers-name=""RopeLength"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> AC = \sqrt{75} </pl-answer>
  <pl-answer correct=""false""> AD = \sqrt{43} </pl-answer>
  <pl-answer correct=""true""> AB = \sqrt{133}  </pl-answer>
  <pl-answer correct=""true""> AC = 5\sqrt{6}  </pl-answer>
  <pl-answer correct=""false""> AB = \sqrt{117}  </pl-answer>
  <pl-answer correct=""true"">  AD = 2\sqrt{30}  </pl-answer>
  
 
</pl-checkbox>


<pl-question-panel> 
  <pl-figure file-name=""AirBalloonFBD3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as T_{AB}, T_{AC}, and T_{AD}. Express each unit vector in Cartesian Form. Select all that apply.
   
</p>

<pl-checkbox answers-name=""UnitVector"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> T_{AB} = T_{AB}\left ( -0.434\hat{i} - 0.694\hat{j} - 0.867\hat{k}\right ) </pl-answer>
  <pl-answer correct=""true"">  T_{AC} = T_{AC}\left ( 0.408\hat{i} +0.408\hat{j} + 0.816\hat{k}\right )  </pl-answer>
  <pl-answer correct=""false"">  T_{AB} = T_{AB}\left ( -0.489\hat{i} +0.344\hat{j} -0.788\hat{k}\right )  </pl-answer>
  <pl-answer correct=""true"">  T_{AD} = T_{AD}\left ( -0.183\hat{i} +0.365\hat{j} -0.913\hat{k}\right )   </pl-answer>
  <pl-answer correct=""false"">  T_{AC} = T_{AC}\left ( 0.591\hat{i} -0.655\hat{j} -0.830\hat{k}\right )  </pl-answer>
  
 
</pl-checkbox>


<pl-question-panel> 
  <pl-figure file-name=""AirBalloonFBD3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as T_{AB}, T_{AC}, and T_{AD}. Determine the force vectors for each rope. Select all that apply.

</p>

<pl-checkbox answers-name=""PositionVectors"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">T_{AC} = T_{AC}\left ( \frac{5\hat{i}+5\hat{j}+10\hat{k}}{\sqrt{75}} \right )  </pl-answer>
  <pl-answer correct=""false"">T_{AC} = T_{AC}\left ( \frac{5\hat{i}-8\hat{j}+10\hat{k}}{2\sqrt{117}} \right )  </pl-answer>
  <pl-answer correct=""true"">T_{AB} = T_{AB}\left ( \frac{-5\hat{i}-8\hat{j}-10\hat{k}}{\sqrt{133}} \right )   </pl-answer>
  <pl-answer correct=""true"">T_{AC} = T_{AC}\left ( \frac{5\hat{i}+5\hat{j}-10\hat{k}}{5\sqrt{6}} \right )   </pl-answer>
  <pl-answer correct=""true"">T_{AC} = T_{AC}\left ( \frac{-2\hat{i}+4\hat{j}-10\hat{k}}{2\sqrt{30}} \right )   </pl-answer>
  
</pl-checkbox>



<pl-question-panel> 
  <pl-figure file-name=""3DEquillibrium.jpg""></pl-figure>
</p>
<p>The uniform rectangular plate is suspended by three cables. The plate has a mass of 100 kg. Determine the tension within each cable. Round your answer to the nearest hundredth.</p>
<pl-multiple-choice answers-name=""3DEquillibrium"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">T_{AB}= 508.16 N, T_{AC}= 336.18 N, T_{AD}= -458.63 N </pl-answer>
  <pl-answer correct=""false"">T_{AB}= -508.16 N, T_{AC}= 336.18 N, T_{AD}= -458.63 N  </pl-answer>
  <pl-answer correct=""false"">T_{AB}= 455 N, T_{AC}= -543.24, T_{AD}= -324.78 N </pl-answer>
  <pl-answer correct=""false"">T_{AB}= -455 N, T_{AC}= -543.24, T_{AD}= 324.78 N  </pl-answer>
</pl-multiple-choice>






<pl-question-panel> 
  <pl-figure file-name=""3DEquillibrium2.jpg""></pl-figure>
</p>
<p> The 950-lb windmill is being removed due to malfunctions. The winches at points E and D will be used to remove it. If (W_{1} = 250 lb) and (W_{2} = 350 lb), determine the force and moment reactions occurring at point O. Let
  \Theta = 35^{o} and  \Phi = 48^(o). Neglect the weight of the winches. What are the force reactions at point O?
  
</p>
<pl-multiple-choice answers-name=""3DEquillibrium2"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">O_{x} = -365 lb, O_{y}= -223 lb, O_{z}= 236 lb </pl-answer>
  <pl-answer correct=""false"">O_{x} = -257 lb, O_{y}= -223 lb, O_{z}= 350 lb  </pl-answer>
  <pl-answer correct=""false"">O_{x} = 365 lb, O_{y}= 223 lb, O_{z}= -236 lb </pl-answer>
  <pl-answer correct=""false"">O_{x} = 257 lb, O_{y}= 223 lb, O_{z}= -350 lb  </pl-answer>
</pl-multiple-choice>




<pl-question-panel> 
  <pl-figure file-name=""3DEquillibrium2.jpg""></pl-figure>
</p>
<p> The 950-lb windmill is being removed due to malfunctions. The winches at points E and D will be used to remove it. If (W_{1} = 250 lb) and (W_{2} = 350 lb), determine the force and moment reactions occurring at point O. Let
  \Theta = 35^{o} and  \Phi = 48^(o). Neglect the weight of the winches. What are the moment reactions at point O?
  
</p>
<pl-multiple-choice answers-name=""3DEquillibrium2"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">M_{x} = 2316 lb-ft, M_{y}= -4010 lb-ft, M_{z}= 0 lb-ft </pl-answer>
  <pl-answer correct=""false"">M_{x} = -2316 lb-ft, M_{y}= 4010 lb-ft, M_{z}= 0 lb-ft  </pl-answer>
  <pl-answer correct=""false"">M_{x} = 2400 lb-ft, M_{y}= 3598 lb-ft, M_{z}= 18 lb-ft </pl-answer>
  <pl-answer correct=""false"">M_{x} = -2400 lb-ft, M_{y}= -3598 lb-ft, M_{z}= -18 lb-ft  </pl-answer>
</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name=""AirBalloonFBD1.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600 N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as (T_{AB}, T_{AC}, and T_{AD}). Determine these tensions in newtons and round to the nearest hundredth. Select all that apply.
</p>

<pl-checkbox answers-name=""AirBalloonFBD1"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> T_{AB} = 283 N </pl-answer>
  <pl-answer correct=""true""> T_{AD} =  341 N </pl-answer>
  <pl-answer correct=""false""> T_{AB} = 281 N </pl-answer>
  <pl-answer correct=""false"">  T_{AC} = 121 N   </pl-answer>
  <pl-answer correct=""true""> T_{AC} = 101 N  </pl-answer>
</pl-checkbox>


<pl-question-panel> 
  <pl-figure file-name=""3DReactions.jpg""></pl-figure>

<p> A tension T is exerted on the hinged square-plate in the figure below. Which of the following statements are true regarding the reaction and tension T forces? Neglect the weight and size of the pulley. Select all that apply.
</p>

<pl-checkbox answers-name=""3DReactions"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> There should be x, y, and z reaction forces at hinges C and D   </pl-answer>
  <pl-answer correct=""false""> There should only be x and y reaction forces at hinges C and D  </pl-answer>
  <pl-answer correct=""false""> There should only be z reaction forces at hinges C and D   </pl-answer>
  <pl-answer correct=""true"">  The total tension force in the pulley is 2T.  </pl-answer>
</pl-checkbox>



<pl-question-panel> 
  <pl-figure file-name=""3DMoment.jpg""></pl-figure>

<p> Find the magnitude of force F (in kN) and the magnitude couple of M, (in kN-m) exerted by the fixed pin at point O. Let \Theta = 45 and \Phi = 35. Round your solution to three decimal places. The magnitude of the force is _______ kN. The magnitude of the moment is ______ kN-m
  </p>

<pl-multiple-choice answers-name=""3DMoment"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 3.45 kN, 0.721 kN-m   </pl-answer>
  <pl-answer correct=""false""> 3.21 kN, 0.512 kN-m  </pl-answer>
  <pl-answer correct=""false""> 2.97 kN, 0.512 kN-m  </pl-answer>
  <pl-answer correct=""false""> 3.67 kN, 0.717 kN-m  </pl-answer>
</pl-multiple-choice>


<!-- /////////////////Frames W3M1 -->



<pl-question-panel> 
  <pl-figure file-name=""SimpFrame1.jpg""></pl-figure>

<p> In the figure below, a weight W is suspended from point D of a beam AD. The beam is held up by rod BC. Neglect the mass of the beam AD and rod BC. Which of the following is true (mark all that apply)
</p>

<pl-checkbox answers-name=""SimpFrame1"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> The magnitude of the force in rod BC is known  </pl-answer>
  <pl-answer correct=""false""> The direction of the force in rod BC (i.e whether the force is tension or compression) is known.  </pl-answer>
  <pl-answer correct=""false""> Beam AD is a two-force member    </pl-answer>
  <pl-answer correct=""true"">  Beam AD is a three force member  </pl-answer>
  <pl-answer correct=""true""> Rod BC is a two-force member   </pl-answer>
  <pl-answer correct=""true"">  The line of action of the force in rod BC is known  </pl-answer>
</pl-checkbox>



<pl-question-panel> 
  <pl-figure file-name=""SimpFrame2.jpg""></pl-figure>

<p> In the figure below, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. Which of the following is/are two force members?
  </p>

<pl-multiple-choice answers-name=""SimpFrame2"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> None of the above   </pl-answer>
  <pl-answer correct=""false""> AH  </pl-answer>
  <pl-answer correct=""false""> HD  </pl-answer>
  <pl-answer correct=""false""> CE  </pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame2.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD11.jpg""></pl-figure>

<p> In the figure above, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of the pulley. Which of the following are true?
  </p>

<pl-multiple-choice answers-name=""SimpFBD11"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The force T at M should be in the opposite direction   </pl-answer>
  <pl-answer correct=""false""> The force T at N should be in the opposite direction  </pl-answer>
  <pl-answer correct=""false""> Vertical reaction at E should be deleted  </pl-answer>
  <pl-answer correct=""false""> Horizontal reaction at E should be deleted </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is correct and complete  </pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame2.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD12.jpg""></pl-figure>

<p> In the figure above, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of the pulley. Which of the following are true?
  </p>

<pl-multiple-choice answers-name=""SimpFBD12"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> A_{x} + C_{x} + H_{x}   </pl-answer>
  <pl-answer correct=""false""> A_{y} - C_{y} + H_{y}  </pl-answer>
  <pl-answer correct=""false""> A_{y} + C_{y} - H_{y}  </pl-answer>
  <pl-answer correct=""false""> A_{x} - C_{x} + H_{x} </pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame2.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD12.jpg""></pl-figure>

<p> In the figure above, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of member AH . Which of the following equations is correct?
  </p>

<pl-multiple-choice answers-name=""SimpFBD12"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> -C_{x}(4) + C_{y}(3)-H_{x}(8) + H_{y}(6) = 0  </pl-answer>
  <pl-answer correct=""false""> C_{x}(4) + C_{y}(3)-H_{x}(8) + H_{y}(6) = 0   </pl-answer>
  <pl-answer correct=""false""> -C_{x}(4) - C_{y}(3)-H_{x}(8) + H_{y}(6) = 0  </pl-answer>
  <pl-answer correct=""false""> -C_{x}(4) + C_{y}(3)+H_{x}(8) + H_{y}(6) = 0 </pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD13.jpg""></pl-figure>

<p> The figure shows a ladder that is connected to the ground with a pin joint at A and a roller joint at B. Both members AC and BC have the same weight W. W = 200 N, and L = 0.5 m. The angle \Theta  = 15^{o}
</p>

<p>Shown above is the freebody diagram for the whole frame. Which of the following statements are true?</p>

<pl-multiple-choice answers-name=""SimpFBD13"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The freebody diagram is complete and accurate.  </pl-answer>
  <pl-answer correct=""false""> The spring force should be added.  </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at C should be included.  </pl-answer>
  <pl-answer correct=""false""> The vertical reaction at C should be included.  </pl-answer>
  <pl-answer correct=""false""> A moment reaction should be included at A.
  </pl-answer>
</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD13.jpg""></pl-figure>

<p> The support reactions at A are A_{x} = ______ N and A_{y} = ______ N. The support reaction at B is B_{y} = ______ N.
  </p>

<pl-multiple-choice answers-name=""SimpFBD13"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 0 N, 200 N, 200 N </pl-answer>
  <pl-answer correct=""false""> 200 N, 0 N, 200 N   </pl-answer>
  <pl-answer correct=""false""> 200 N, 200 N, 200 N  </pl-answer>
  <pl-answer correct=""false""> -200 N, 200 N, 200 N </pl-answer>
</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD14.jpg""></pl-figure>

<p> The figure above shows the freebody diagram of BC. Which of the following statements are true?
  </p>

<pl-checkbox answers-name=""SimpFBD14"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> Spring force should be horizontal </pl-answer>
  <pl-answer correct=""true""> Vertical reaction at C should be included </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and accurate   </pl-answer>
  <pl-answer correct=""false""> Horizontal reaction at C should be removed  </pl-answer>
  <pl-answer correct=""false""> Weight should be removed  </pl-answer>
</pl-checkbox>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD15.jpg""></pl-figure>

<p> The figure below shows the freebody diagrams for both AC and BC. Assuming that the freebody diagram of BC is correct, which of the following statements are true about the freebody diagram for AC?
</p>

<pl-checkbox answers-name=""SimpFBD15"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The spring force on AC should be in the opposite direction </pl-answer>
  <pl-answer correct=""true""> The vertical reaction at C should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at C should be in the opposite direction.</pl-answer>
  <pl-answer correct=""false""> The weight vector should be removed.  </pl-answer>
  <pl-answer correct=""false""> Both diagrams are complete and correct.  </pl-answer>
</pl-checkbox>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD16.jpg""></pl-figure>

<p>From the freebody diagram of BC, the magnitude of the reaction components at C are: C_{x}= ______ N and C_{y} = ______ N. The magnitude of the force of the spring is F_{s}= ________ N. 

  </p>

<pl-multiple-choice answers-name=""SimpFBD16"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 32.2 N, 0 N, 32.2 N </pl-answer>
  <pl-answer correct=""false""> 0 N, 32.2 N, 32.2 N   </pl-answer>
  <pl-answer correct=""false""> -32.2 N, 0 N, 32.2 N  </pl-answer>
  <pl-answer correct=""false""> 0 N, -32.2 N, 32.2 N </pl-answer>
</pl-multiple-choice>


<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame3.jpg""></pl-figure>
  <pl-figure file-name=""SimpFBD17.jpg""></pl-figure>

<p>The figure shows the freebody diagram of AC. Which of the following equations is the correct equation for moments about point A?
</p>

<pl-multiple-choice answers-name=""SimpFBD17"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> -F_{s} \frac{L}{6} cos(\theta) - W\frac{L}{2} sin(\theta) - C_{y}Lsin(\theta) + C_{x}Lcos(\theta) = 0 </pl-answer>
  <pl-answer correct=""false""> -F_{s} \frac{L}{6} cos(\theta) - W\frac{L}{2} sin(\theta) + C_{y}Lsin(\theta) - C_{x}Lcos(\theta) = 0   </pl-answer>
  <pl-answer correct=""false""> -F_{s} \frac{L}{6} cos(\theta) + W\frac{L}{2} sin(\theta) + C_{y}Lsin(\theta) - C_{x}Lcos(\theta) = 0  </pl-answer>
  <pl-answer correct=""false""> -F_{s} \frac{L}{6} cos(\theta) - W\frac{L}{2} sin(\theta) + C_{y}Lsin(\theta) + C_{x}Lcos(\theta) = 0 </pl-answer>
</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame4.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>The figure shows a schematic of an engine. F_{g} is the force exerted by the combustion gases on the piston (shown by the rectangle at B). F_{g}= 50 kN. The angle of the crank OA is \theta = 30^{o} while the angle of the connecting rod AB is \Phi = 15^{o}. Neglect the weight of all members. Also neglect friction between the the piston and the cylinder. 
</p>

<pl-multiple-choice answers-name=""SimpFrame4"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The freebody diagram is complete and accurate </pl-answer>
  <pl-answer correct=""false""> There should be a force from the connecting rod AB at B  </pl-answer>
  <pl-answer correct=""false""> There should be a force from the crank on the connecting rod AB at A.  </pl-answer>
  <pl-answer correct=""false""> There should be a force from the connecting rod on the crank at A.  </pl-answer>
  <pl-answer correct=""false""> The vertical reaction at O should be deleted.  </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at O should be deleted. </pl-answer>
</pl-multiple-choice>




<pl-question-panel> 
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>Which of the following is true?
</p>

<pl-multiple-choice answers-name=""SimpFBD18"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> AB is a two force member </pl-answer>
  <pl-answer correct=""true""> The piston (shown by the rectangle at B) is a three force member  </pl-answer>
  <pl-answer correct=""false""> OA is a two force member  </pl-answer>
  <pl-answer correct=""false""> AB is a three force member  </pl-answer>
  <pl-answer correct=""false""> OA is a three force member  </pl-answer>
  <pl-answer correct=""false""> The piston (shown by the rectangle at B) is a two force member  </pl-answer>
</pl-multiple-choice>




<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame4.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>Analyzing the freebody diagram for the piston for this position, the normal reaction from the guide B_{y} is:

</p>

<pl-multiple-choice answers-name=""SimpFrame4"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 13.4 kN </pl-answer>
  <pl-answer correct=""false""> 14.6 kN  </pl-answer>
  <pl-answer correct=""false""> 15.9 kN </pl-answer>
  <pl-answer correct=""false""> 17.2 kN </pl-answer>
</pl-multiple-choice>





<pl-question-panel> 
  <pl-figure file-name= ""SimpFrame4.jpg""></pl-figure>
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>The magnitude of the force on B from the connecting rod  is _______ kN 
</p>

<pl-multiple-choice answers-name=""SimpFrame4"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 51.8 kN directed towards B</pl-answer>
  <pl-answer correct=""false""> 51.8 kN directed away from B  </pl-answer>
  <pl-answer correct=""false""> 67.2 kN directed toward B  </pl-answer>
  <pl-answer correct=""false""> 67.2 kN directed away from B  </pl-answer>
</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>From the overall freebody diagram for the engine (above), the value of the moment M_{o} is _______ kN-m.
</p>

<pl-multiple-choice answers-name=""SimpFBD18"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 5.04 kN </pl-answer>
  <pl-answer correct=""false""> 6.12 kN  </pl-answer>
  <pl-answer correct=""false""> 7.32 kN  </pl-answer>
  <pl-answer correct=""false""> 8.19 kN  </pl-answer>
</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name= ""SimpFBD18.jpg""></pl-figure>


<p>The horizontal and vertical reactions at O are:
</p>

<pl-multiple-choice answers-name=""SimpFBD18"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> O_{x} = 50 kN (+x direction), O_{y} = 13.4 kN (+y direction) </pl-answer>
  <pl-answer correct=""true"">  O_{x} = 50 kN (+x direction), O_{y} = 13.4 kN (-y direction)  </pl-answer>
  <pl-answer correct=""false"">  O_{x} = 13.4 kN (+x direction), O_{y} = 50 kN (+y direction)  </pl-answer>
  <pl-answer correct=""false""> O_{x} = 13.4 kN (+x direction), O_{y} = 13.4 kN (-y direction)  </pl-answer>
</pl-multiple-choice>


<!-- \\\\\\\\\\\\Friction -->
<!-- \\\\\\\\\\\\Friction -->
<!-- \\\\\\\\\\\\Friction -->


































































<!-- \\\\\\\\\\\\\\\\\\\DistributedForces -->
<!-- \\\\\\\\\\\\\\\\\\\DistributedForces -->
<!-- \\\\\\\\\\\\\\\\\\\DistributedForces -->



<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  The expression for y(x) in the figure above is:
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> x = 5y^{2}   </pl-answer>
  <pl-answer correct=""false""> y = 1 - x^{2} </pl-answer>
  <pl-answer correct=""false""> y = \left ( \frac{x}{5} \right )^{2}  </pl-answer>
  <pl-answer correct=""true"">  y = 1 - \left ( \frac{x}{5} \right )^{2}   </pl-answer>

</pl-multiple-choice>




<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  In the figure above, y(x) = 1 - \left ( \frac{x}{5} \right )^{2} The area of the figure
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> \frac{20}{3}   </pl-answer>
  <pl-answer correct=""false""> \frac{7}{3} </pl-answer>
  <pl-answer correct=""false""> 10  </pl-answer>
  <pl-answer correct=""true"">  \frac{10}{3}   </pl-answer>

</pl-multiple-choice>





<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  The x-coordinate of the centroid of the area is:
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> \frac{11}{14}   </pl-answer>
  <pl-answer correct=""false""> \frac{7}{8} </pl-answer>
  <pl-answer correct=""false""> \frac{13}{2}  </pl-answer>
  <pl-answer correct=""true"">  \frac{15}{8}   </pl-answer>

</pl-multiple-choice>



<pl-question-panel> 
  <pl-figure file-name= ""SimpCentroid.jpg""></pl-figure>

<p>
  The y-coordinate of the centroid of the area is:
</p>

<pl-multiple-choice answers-name=""SimpCentroid"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> \frac{5}{3}   </pl-answer>
  <pl-answer correct=""false""> \frac{7}{3} </pl-answer>
  <pl-answer correct=""false""> \frac{15}{16}  </pl-answer>
  <pl-answer correct=""true"">  \frac{2}{5}   </pl-answer>

</pl-multiple-choice>




<pl-question-panel> 
  <pl-figure file-name= ""FrameDistributedForce.jpg""></pl-figure>

<p>
  The figure shows a frame with two distributed loads. The reactions are A are:
</p>

<pl-multiple-choice answers-name=""FrameDistributedForce"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> A_{x} = -1 kN, A_{y} = +4 kN, M_{A} = -\frac{2}{3} kN-m   </pl-answer>
  <pl-answer correct=""false""> A_{x} = +1 kN, A_{y} = +4 kN, M_{A} = -\frac{46}{3} kN-m </pl-answer>
  <pl-answer correct=""false""> A_{x} = +1 kN, A_{y} = +4 kN, M_{A} = -\frac{2}{3} kN-m  </pl-answer>
  <pl-answer correct=""true"">  A_{x} = +1 kN, A_{y} = +4 kN, M_{A} = \frac{2}{3} kN-m  </pl-answer>

</pl-multiple-choice>







",,,,,Error,8a4ccac6-1031-43ed-a773-feb64c2a8bbf,Statics w1m1_4 mcq,Test your understanding of vectors and their operations,Statics,"Dot,Vector,Addition",,False,jlam154@ucr.edu,Mcq,1,,1.0,Javascript,,,,,
72,twodEquill,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""twodEquill.jpg""></pl-figure>
</p>
<p>In the figure below, which of the following is true of the freebody diagram? (more than one may be true)
</p>
<pl-checkbox answers-name=""twodEquill"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">The freebody diagram is complete and correct.  </pl-answer>
  <pl-answer correct=""false"">T_{3} needs to point in the opposite direction.  </pl-answer>
  <pl-answer correct=""true"">T_{1} needs to point in the opposite direction.  </pl-answer>
  <pl-answer correct=""false"">T_{2} needs to point in the opposite direction.</pl-answer>
  <pl-answer correct=""true"">T_{2} needs to point vertically downwards.</pl-answer>
</pl-checkbox>
",,,,,"in the figure below, which of the following is true of the freebody diagram? (more than one may be true)
options:
1. the freebody diagram is complete and correct.
2. t_{3} needs to point in the opposite direction.
3. t_{1} needs to point in the opposite direction.
4. t_{2} needs to point in the opposite direction.
5. t_{2} needs to point vertically downwards.",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,For2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103",Statics and Mechanics
73,twodEquill2,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple two-dimesnional equllibrium"",
	""stem"": ""Test your understanding of vectors and equillibrium"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""twodEquill.jpg""></pl-figure>
</p>
<p>The figure shows a person holding a grocery bag. The figure also shows the freebody diagram of the person. Which of the following statements are true?
</p>
<pl-checkbox answers-name=""FreeBody2"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">The freebody diagram is complete and correct.  </pl-answer>
  <pl-answer correct=""false"">Weight $W_hand$ should be deleted.       </pl-answer>
  <pl-answer correct=""false"">W = 200N should be deleted.  </pl-answer>
  <pl-answer correct=""true"">M_{y} should be in the opposite direction  </pl-answer>
  <pl-answer correct=""true"">M_{y} should be in the opposite direction</pl-answer>
</pl-checkbox>",,,,,"which of the following statements are true about the figure showing a person holding a grocery bag and the corresponding freebody diagram?

options:
a) the freebody diagram is complete and correct.
b) weight $w_{hand}$ should be deleted.
c) $w = 200n$ should be deleted.
d) $m_{y}$ should be in the opposite direction.",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple two-dimesnional equllibrium,Test your understanding of vectors and equillibrium,Statics,"V2,For2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Statics and Mechanics, Reaction Forces"
74,vectorAng,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector and angle calculation"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""len""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectExpression3.jpg""></pl-figure>
</p>
<p>The angle (in degrees) made by the sum of the forces with the positive x-axis is:</p>
<pl-multiple-choice answers-name=""Ang"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> -35.5  </pl-answer>
  <pl-answer correct=""false""> 35.5  </pl-answer>
  <pl-answer correct=""false""> -42.1  </pl-answer>
  <pl-answer correct=""false""> 42.1  </pl-answer>
</pl-multiple-choice>",,,,,"the angle (in degrees) made by the sum of the forces with the positive x-axis is:
-35.5
35.5
-42.1
42.1",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector and angle calculation,Test your understanding of vector operations,Statics,"V2,For2,Ang,Len",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Vector Analysis, Reaction Forces"
75,vectorAng2,"{
    ""uuid"": ""7c4rtac6-1031-43ed-a673-feb64c2a8bbf"",
    ""title"": ""Dot Product"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""for2"", ""v2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  A force F is given by ( F = -4\hat{i} - 6\hat{j}) N. The angle made by the x-axis with the positive axis is:
</p>
<pl-multiple-choice answers-name=""VectAng"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">-123.7  </pl-answer>
  <pl-answer correct=""false"">-56.4  </pl-answer>
  <pl-answer correct=""false"">-146.3 </pl-answer>
  <pl-answer correct=""false"">-135.2 </pl-answer>
</pl-multiple-choice>",,,,,"the angle made by the x-axis with the positive axis is:
-123.7  
-56.4  
-146.3 
-135.2",7c4rtac6-1031-43ed-a673-feb64c2a8bbf,Dot product,Test your understanding of vector operations,Statics,"For2,V2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Coordinate Geometry
76,vectorCross,"{
    ""uuid"": ""7c4rtac6-1031-44ed-a673-feb79c2a8bbf"",
    ""title"": ""Cross Product"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""v3"", ""cross""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""tf"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  True or False: If $A \times B$ is the cross product of vectors A and B, then $A \times B = B \times A$ </p>
<pl-multiple-choice answers-name=""cross"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">True </pl-answer>
  <pl-answer correct=""true"">False</pl-answer>
</pl-multiple-choice>",,,,,"true or false: if $a \times b$ is the cross product of vectors a and b, then $a \times b = b \times a$

options:
a) true
b) false",7c4rtac6-1031-44ed-a673-feb79c2a8bbf,Cross product,Test your understanding of vector operations,Statics,"V2,V3,Cross",,False,jlam154@ucr.edu,Tf,1,,1.0,Javascript,,,,ME 018B,
77,vectorCrossCompute,"{
    ""uuid"": ""7c4rtac6-1031-43ed-a673-feb64c29wngf"",
    ""title"": ""Simple vector multiplication"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""dot""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> Consider two vectors $A = 5\hat{i} + 6\hat{j}$ and $B = 2\hat{i} - 3\hat{j}$. Then $|A \times B| = $
</p>
<pl-multiple-choice answers-name=""sum"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 8 </pl-answer>
  <pl-answer correct=""false""> -8 </pl-answer>
  <pl-answer correct=""true""> 27 </pl-answer>
  <pl-answer correct=""false""> 3 </pl-answer>
</pl-multiple-choice>",,,,,"consider two vectors $a = 5\hat{i} + 6\hat{j}$ and $b = 2\hat{i} - 3\hat{j}$. then $|a \times b| = $

options:
a) 8
b) -8
c) 27
d) 3",7c4rtac6-1031-43ed-a673-feb64c29wngf,Simple vector multiplication,Test your understanding of vector operations,Statics,"V2,Dot",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 018B,Vector Analysis
78,vectorDot,"{
    ""uuid"": ""7c4rtac6-1031-43ed-a673-feb64c2a8bbf"",
    ""title"": ""Dot Product"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""v3"", ""dot""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""tf"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  True or False: If $A \cdot B$ is the dot product of vectors A and B, then $A \cdot B$.
</p>
  
<pl-multiple-choice answers-name=""dot"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">True </pl-answer>
  <pl-answer correct=""false"">False</pl-answer>
</pl-multiple-choice>",,,,,"true or false: if $a \cdot b$ is the dot product of vectors a and b, then $a \cdot b$.

options:
- true
- false",7c4rtac6-1031-43ed-a673-feb64c2a8bbf,Dot product,Test your understanding of vector operations,Statics,"V2,V3,Dot",,False,jlam154@ucr.edu,Tf,1,,1.0,Javascript,,,,I don't know based on the provided information. Return None,Vector Analysis
79,vectorExpression,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector expression"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectorExpression.jpg""></pl-figure>
</p>
<p>The vector expression for the force in the figure above is:</p>

<pl-multiple-choice answers-name=""vectorExpression"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> \( -10\hat{i} + 10\sqrt{3}\hat{j} \) lb </pl-answer>
  <pl-answer correct=""false""> \( -10\hat{i} - 10\sqrt{3}\hat{j} \) lb </pl-answer>
  <pl-answer correct=""false""> \( -20\hat{i} + 20\sqrt{3}\hat{j} \) lb </pl-answer>
  <pl-answer correct=""false""> \( -10\sqrt{3}\hat{i} + 10\hat{j} \) lb </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression for the force in the figure above?

options:
a) \( -10\hat{i} + 10\sqrt{3}\hat{j} \) lb
b) \( -10\hat{i} - 10\sqrt{3}\hat{j} \) lb
c) \( -20\hat{i} + 20\sqrt{3}\hat{j} \) lb
d) \( -10\sqrt{3}\hat{i} + 10\hat{j} \) lb",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector expression,Statics,"V2,For2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 018B",Vector Analysis
80,vectorExpression2,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector expression"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T"", ""pro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  
  <pl-figure file-name=""UnitVector.jpg""></pl-figure>
</p>
<p>The vector expression for the force in the figure above is:</p>
<pl-multiple-choice answers-name=""VectExp"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> \( -360\hat{i} + 480\hat{j}\) N </pl-answer>
  <pl-answer correct=""false""> \( 360\hat{i} - 480\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( -1800\hat{i} + 2400\hat{j}\) N </pl-answer>
  <pl-answer correct=""false""> \( -2400\hat{i} + 1800\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( 1800\hat{i} - 2400\hat{j}\) N </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression for the force in the figure above?

options:
a) \( -360\hat{i} + 480\hat{j}\) n
b) \( 360\hat{i} - 480\hat{j}\) n
c) \( -1800\hat{i} + 2400\hat{j}\) n
d) \( -2400\hat{i} + 1800\hat{j}\) n
e) \( 1800\hat{i} - 2400\hat{j}\) n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector expression,Statics,"V2,For2,Ang,T,Pro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,Vector Analysis
81,vectorExpression3,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector expression"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T"", ""pro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectExpression3.jpg""></pl-figure>
</p>
<p>The vector expression for force \(F_2\) is</p>
<pl-multiple-choice answers-name=""VectExp"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> \( 200\hat{i} - 400\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( -200\hat{i} + 400\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( 200\hat{i} - 200\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( -200\hat{i} + 200\hat{j}\) N  </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression for force \(f_2\) in newtons?

options:
a) \( 200\hat{i} - 400\hat{j}\) n
b) \( -200\hat{i} + 400\hat{j}\) n
c) \( 200\hat{i} - 200\hat{j}\) n
d) \( -200\hat{i} + 200\hat{j}\) n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector expression,Statics,"V2,For2,Ang,T,Pro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 018B, ME 103",Vector Analysis
82,vectorExpression4,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector expression"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""T"", ""len""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectorExpression4.jpg""></pl-figure>
</p>
<p> The vector expression for the 180-lb force is:</p>
<pl-multiple-choice answers-name=""SumMag"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">\( 150\hat{i} - 100\hat{j}\) lb  </pl-answer>
  <pl-answer correct=""false""> \( -150\hat{i} + 100\hat{j}\) lb </pl-answer>
  <pl-answer correct=""false""> \( 75\hat{i} - 50\hat{j}\) lb  </pl-answer>
  <pl-answer correct=""false""> \( -60\hat{i} - 25\hat{j}\) lb  </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression for the 180-lb force?

options:
a) \( 150\hat{i} - 100\hat{j}\) lb  
b) \( -150\hat{i} + 100\hat{j}\) lb 
c) \( 75\hat{i} - 50\hat{j}\) lb  
d) \( -60\hat{i} - 25\hat{j}\) lb",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector expression,Statics,"V2,For2,T,Len",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 018B,Vector Analysis
83,vectorExpression5,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Vector Expression "",
	""stem"": ""Test your understanding of vector expression"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""T"", ""ang""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
 
  <pl-figure file-name=""vectorExpression5.jpg""></pl-figure>
</p>
<p> The vector expression of the force F in the figure above is:</p>
<pl-multiple-choice answers-name=""VectExp"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">( 38.6\hat{i} - 10.4\hat{j}) N  </pl-answer>
  <pl-answer correct=""false"">( 10.4\hat{i} - 38.6\hat{j}) N  </pl-answer>
  <pl-answer correct=""false""> ( 23.1\hat{i} - 12.4\hat{j}) N  </pl-answer>
  <pl-answer correct=""false""> ( 43.1\hat{i} - 24.1\hat{j}) N  </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression of the force f in the figure above?

options:
a) (38.6i - 10.4j) n
b) (10.4i - 38.6j) n
c) (23.1i - 12.4j) n
d) (43.1i - 24.1j) n",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple vector expression,Test your understanding of vector expression,Statics,"V2,For2,T,Ang",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 103, ME 018B",Vector Analysis
84,vectorMag,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector addition"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""len""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectExpression3.jpg""></pl-figure>
</p>
<p>The magnitude of the sum of the two forces is:</p>
<pl-multiple-choice answers-name=""VectMag"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 430 N  </pl-answer>
  <pl-answer correct=""false""> 652 N  </pl-answer>
  <pl-answer correct=""false""> 255 N  </pl-answer>
  <pl-answer correct=""false""> 300 N  </pl-answer>
</pl-multiple-choice>",,,,,"what is the magnitude of the sum of the two forces?
options:
a) 430 n
b) 652 n
c) 255 n
d) 300 n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector addition,Statics,"V2,For2,Ang,Len",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103",Vector Analysis
85,vectorMultiply,"{
    ""uuid"": ""7c4rtac6-1031-43ed-a673-feb64c29wngf"",
    ""title"": ""Simple vector multiplication"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""dot""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> Consider two vectors $A = 5\hat{i} + 6\hat{j}$ and $B = 2\hat{i} -3\hat{j}$. Then $A\cdot B =$ 
</p>
<pl-multiple-choice answers-name=""dot"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 8 </pl-answer>
  <pl-answer correct=""true""> -8 </pl-answer>
  <pl-answer correct=""false""> -27 </pl-answer>
  <pl-answer correct=""false"">3 </pl-answer>
</pl-multiple-choice>",,,,,"consider two vectors $a = 5\hat{i} + 6\hat{j}$ and $b = 2\hat{i} -3\hat{j}$. then $a\cdot b =$ 

options:
a) 8
b) -8
c) -27
d) 3",7c4rtac6-1031-43ed-a673-feb64c29wngf,Simple vector multiplication,Test your understanding of vector operations,Statics,"V2,Dot",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 018B,Vector Analysis
86,vectorMultiplyCompute,"{
    ""uuid"": ""7c4rtac6-1031-43ed-a673-feb64c29wngf"",
    ""title"": ""Simple vector multiplication"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""dot"", ""for2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""VectorMultiplyCompute.jpg""></pl-figure>
</p>

<p>The coordinates of point A in the figure above is $\sqrt{3}, 1$ while the coordinates of point B is $2\sqrt{3}, 2$. The magnitude of the force F is 500 N. The y-coordinate of this force is:
</p>

<pl-multiple-choice answers-name=""ycomp"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 250 N </pl-answer>
  <pl-answer correct=""false""> $250\sqrt{3}$ N</pl-answer>
  <pl-answer correct=""false""> $250\sqrt{2}$ N</pl-answer>
  <pl-answer correct=""false""> $500\sqrt{2}$ N</pl-answer>
</pl-multiple-choice>",,,,,"what is the y-coordinate of the force f?

options:
a) 250 n
b) $250\sqrt{3}$ n
c) $250\sqrt{2}$ n
d) $500\sqrt{2}$ n",7c4rtac6-1031-43ed-a673-feb64c29wngf,Simple vector multiplication,Test your understanding of vector operations,Statics,"V2,Dot,For2",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Vector Analysis, Distributed Forces"
87,vectorNotation,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector cross multiplication"",
	""stem"": ""Test your understanding of vector operations"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""VectorNotation.jpg""></pl-figure>
</p>

<p> A force of magnitude 200 N is acting at point A (0,2). The force is directed from point A towards point B (3,-2). The vector expression of the force F is:</p>

<pl-multiple-choice answers-name=""expression"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $120\hat{i} - 160\hat{j}$ </pl-answer>
  <pl-answer correct=""false""> $-120\hat{i} + 160\hat{j}$ </pl-answer>
  <pl-answer correct=""false""> $-160\hat{i} + 120\hat{j}$ </pl-answer>
  <pl-answer correct=""false""> $160\hat{i} - 120\hat{j}$ </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression of the force f?

options:
a) $120\hat{i} - 160\hat{j}$
b) $-120\hat{i} + 160\hat{j}$
c) $-160\hat{i} + 120\hat{j}$
d) $160\hat{i} - 120\hat{j}$",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector cross multiplication,Test your understanding of vector operations,Statics,"V2,For2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 103, ME 018B",Vector Analysis
88,vectorSum,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector addition"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""len""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectorSum.jpg""></pl-figure>
</p>
<p>The magnitude of the sum of the forces in the figure above is:</p>
<pl-multiple-choice answers-name=""SumMag"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 34.1 lb  </pl-answer>
  <pl-answer correct=""true""> 45.9 lb  </pl-answer>
  <pl-answer correct=""false""> 56.3 lb  </pl-answer>
  <pl-answer correct=""false""> 63.2  </pl-answer>
</pl-multiple-choice>",,,,,"the magnitude of the sum of the forces in the figure above is:
options:
a) 34.1 lb
b) 45.9 lb
c) 56.3 lb
d) 63.2 lb",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector addition,Statics,"V2,For2,Ang,Len",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,"Reaction Forces, Distributed Forces, Vector Analysis"
89,vectorSum2,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector addition"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""len""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectorSum.jpg""></pl-figure>
</p>
<p> The angle (in degrees) made by the sum of the forces with the force \( F_1 \) is</p>
<pl-multiple-choice answers-name=""SumMag"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 45.8  </pl-answer>
  <pl-answer correct=""false""> 32.4  </pl-answer>
  <pl-answer correct=""false""> 29.3  </pl-answer>
  <pl-answer correct=""false""> 24.3  </pl-answer>
</pl-multiple-choice>",,,,,"the angle (in degrees) made by the sum of the forces with the force \( f_1 \) is

options:
1. 45.8
2. 32.4
3. 29.3
4. 24.3",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector addition,Statics,"V2,For2,Ang,Len",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Vector Analysis"
90,vectorSum3,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector addition"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""len""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectorSum3.jpg""></pl-figure>
</p>
<p>The magnitude of the sum of the two forces shown in the figure above is:</p>
<pl-multiple-choice answers-name=""SumMag"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> 69.3  </pl-answer>
  <pl-answer correct=""false""> 40.1 </pl-answer>
  <pl-answer correct=""false""> 85.3  </pl-answer>
  <pl-answer correct=""false""> 60.1  </pl-answer>
</pl-multiple-choice>",,,,,"the magnitude of the sum of the two forces shown in the figure above is:
options:
a) 69.3
b) 40.1
c) 85.3
d) 60.1",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector addition,Statics,"V2,For2,Ang,Len",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Vector Analysis
91,vectorSum4,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector summation"",
	""stem"": ""Test your understanding of vector addition"",
    ""topic"": ""statics"",
    ""tags"": [""T"", ""v2"", ""add"", ""for2""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectorSum4.jpg""></pl-figure>
</p>
<p> The sum of the two forces in the figure above is:</p>
<pl-multiple-choice answers-name=""VectSum"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">74 N  </pl-answer>
  <pl-answer correct=""false"">58 N  </pl-answer>
  <pl-answer correct=""false""> 52 N  </pl-answer>
  <pl-answer correct=""false""> 47 N  </pl-answer>
</pl-multiple-choice>",,,,,"the sum of the two forces in the figure above is:
options:
a) 74 n
b) 58 n
c) 52 n
d) 47 n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector summation,Test your understanding of vector addition,Statics,"T,V2,Add,For2",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,"Vector Analysis, Reaction Forces"
92,vectorSumExpression,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector addition"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T"", ""add""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""vectExpression3.jpg""></pl-figure>
  
</p>
<p>The vector expression for the sum of the two forces \( F_1 \) and \( F_2\) is:</p>
<pl-multiple-choice answers-name=""VectAdd"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> \( 350\hat{i} - 250\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( -350\hat{i} + 250\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( 350\hat{i} + 550\hat{j}\) N  </pl-answer>
  <pl-answer correct=""false""> \( 50\hat{i} - 250\hat{j}\) N  </pl-answer>
</pl-multiple-choice>",,,,,"what is the vector expression for the sum of the two forces \( f_1 \) and \( f_2\)?

options:
a) \( 350\hat{i} - 250\hat{j}\) n
b) \( -350\hat{i} + 250\hat{j}\) n
c) \( 350\hat{i} + 550\hat{j}\) n
d) \( 50\hat{i} - 250\hat{j}\) n",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector addition,Statics,"V2,For2,Ang,T,Add",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 103, ME 018B",Vector Analysis
93,vectorUnitvect,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple vector expression"",
	""stem"": ""Test your understanding of vector expression"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""UnitVector.jpg""></pl-figure>
</p>
<p>The unit vector along the force in the figure above is:</p>
<pl-multiple-choice answers-name=""UnitVector"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> \( -0.6\hat{i} + 0.8\hat{j} \) </pl-answer>
  <pl-answer correct=""false""> \( 0.6\hat{i} - 0.8\hat{j} \)  </pl-answer>
  <pl-answer correct=""false""> \( -0.8\hat{i} + 0.6\hat{j} \) </pl-answer>
  <pl-answer correct=""false""> \( 0.8\hat{i} - 0.6\hat{j} \) </pl-answer>
</pl-multiple-choice>",,,,,"the unit vector along the force in the figure above is:
 
options:
1. \( -0.6\hat{i} + 0.8\hat{j} \) 
2. \( 0.6\hat{i} - 0.8\hat{j} \)  
3. \( -0.8\hat{i} + 0.6\hat{j} \) 
4. \( 0.8\hat{i} - 0.6\hat{j} \)",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple vector expression,Test your understanding of vector expression,Statics,"V2,For2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 103,Vector Analysis
94,airballoon3D,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""AirBalloon3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as T_{AB}, T_{AC}, and T_{AD}.Determine the position vectors for each rope. Select all that apply. Refer to figure 
</p>

<pl-checkbox answers-name=""PositionVectors"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> AD = $-2\hat{i} + 4\hat{j} -10\hat{k}$ </pl-answer>
  <pl-answer correct=""true"">  AB = $-5\hat{i} -8\hat{j} -10\hat{k}$  </pl-answer>
  <pl-answer correct=""true"">  AC = $5\hat{i} +5\hat{j} -10\hat{k}$  </pl-answer>
  <pl-answer correct=""false"">  AB = $5\hat{i} -8\hat{j} +10\hat{k}$  </pl-answer>
  <pl-answer correct=""false"">  AC = $-5\hat{i} -5\hat{j} +10\hat{k}$  </pl-answer>
 
</pl-checkbox>",,,,,"determine the position vectors for each rope. select all that apply.

options:
a) ad = $-2\hat{i} + 4\hat{j} -10\hat{k}$
b) ab = $-5\hat{i} -8\hat{j} -10\hat{k}$
c) ac = $5\hat{i} +5\hat{j} -10\hat{k}$
d) ab = $5\hat{i} -8\hat{j} +10\hat{k}$
e) ac = $-5\hat{i} -5\hat{j} +10\hat{k}$",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 103,"Analytical Geometry, 3D Rigid Body Mechanics"
95,airballoon3D2,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""AirBalloon3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as $T_{AB}$, $T_{AC}$, and $T_{AD}$.Determine the lengths for each rope. Select all that apply.   
</p>

<pl-checkbox answers-name=""RopeLength"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> AC = $\sqrt{75}$ </pl-answer>
  <pl-answer correct=""false""> AD = $\sqrt{43}$ </pl-answer>
  <pl-answer correct=""true""> AB = $\sqrt{133}$  </pl-answer>
  <pl-answer correct=""true""> AC = $5\sqrt{6}$  </pl-answer>
  <pl-answer correct=""false""> AB = $\sqrt{117}$  </pl-answer>
  <pl-answer correct=""true"">  AD = $2\sqrt{30}$  </pl-answer>
  
 
</pl-checkbox>
",,,,,"determine the lengths for each rope. select all that apply.

options:
a) ac = $\sqrt{75}$
b) ad = $\sqrt{43}$
c) ab = $\sqrt{133}$
d) ac = $5\sqrt{6}$
e) ab = $\sqrt{117}$
f) ad = $2\sqrt{30}$",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,,Analytical Geometry
96,airballoon3D3,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""AirBalloon3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as $T_{AB}$, $T_{AC}$, and $T_{AD}$. Express each unit vector in Cartesian Form. Select all that apply.
   
</p>

<pl-checkbox answers-name=""UnitVector"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $T_{AB} = T_{AB}\left ( -0.434\hat{i} - 0.694\hat{j} - 0.867\hat{k}\right )$ </pl-answer>
  <pl-answer correct=""true"">  $T_{AC} = T_{AC}\left ( 0.408\hat{i} +0.408\hat{j} + 0.816\hat{k}\right )$  </pl-answer>
  <pl-answer correct=""false"">  $T_{AB} = T_{AB}\left ( -0.489\hat{i} +0.344\hat{j} -0.788\hat{k}\right )$  </pl-answer>
  <pl-answer correct=""true""> $ T_{AD} = T_{AD}\left ( -0.183\hat{i} +0.365\hat{j} -0.913\hat{k}\right )$   </pl-answer>
  <pl-answer correct=""false"">  $T_{AC} = T_{AC}\left ( 0.591\hat{i} -0.655\hat{j} -0.830\hat{k}\right )$  </pl-answer>
</pl-checkbox>",,,,,"express each unit vector in cartesian form. select all that apply.

options:
a) $t_{ab} = t_{ab}\left ( -0.434\hat{i} - 0.694\hat{j} - 0.867\hat{k}\right )$
b) $t_{ac} = t_{ac}\left ( 0.408\hat{i} +0.408\hat{j} + 0.816\hat{k}\right )$
c) $t_{ab} = t_{ab}\left ( -0.489\hat{i} +0.344\hat{j} -0.788\hat{k}\right )$
d) $t_{ad} = t_{ad}\left ( -0.183\hat{i} +0.365\hat{j} -0.913\hat{k}\right )$
e) $t_{ac} = t_{ac}\left ( 0.591\hat{i} -0.655\hat{j} -0.830\hat{k}\right )$",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 018B, ME 200",Vector Analysis
97,airballoon3D4,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""AirBalloon3.jpg""></pl-figure>

<p>A hot air balloon exerts an upward force of 600N at point A and is pinned to the ground by the blue ropes. Let the tension within these ropes be labeled as $T_{AB}$, $T_{AC}$, and $T_{AD}$. Determine the force vectors for each rope. Select all that apply.

</p>

<pl-checkbox answers-name=""PositionVectors"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">$T_{AC} = T_{AC}\left ( \frac{5\hat{i}+5\hat{j}+10\hat{k}}{\sqrt{75}} \right )$  </pl-answer>
  <pl-answer correct=""false"">$T_{AC} = T_{AC}\left ( \frac{5\hat{i}-8\hat{j}+10\hat{k}}{2\sqrt{117}} \right ) $ </pl-answer>
  <pl-answer correct=""true"">$T_{AB} = T_{AB}\left ( \frac{-5\hat{i}-8\hat{j}-10\hat{k}}{\sqrt{133}} \right ) $  </pl-answer>
  <pl-answer correct=""true"">$T_{AC} = T_{AC}\left ( \frac{5\hat{i}+5\hat{j}-10\hat{k}}{5\sqrt{6}} \right ) $  </pl-answer>
  <pl-answer correct=""true"">$T_{AC} = T_{AC}\left ( \frac{-2\hat{i}+4\hat{j}-10\hat{k}}{2\sqrt{30}} \right ) $  </pl-answer>
  
</pl-checkbox>",,,,,"determine the force vectors for each rope. select all that apply.

options:
a) $t_{ac} = t_{ac}\left ( \frac{5\hat{i}+5\hat{j}+10\hat{k}}{\sqrt{75}} \right )$
b) $t_{ac} = t_{ac}\left ( \frac{5\hat{i}-8\hat{j}+10\hat{k}}{2\sqrt{117}} \right )$
c) $t_{ab} = t_{ab}\left ( \frac{-5\hat{i}-8\hat{j}-10\hat{k}}{\sqrt{133}} \right )$
d) $t_{ac} = t_{ac}\left ( \frac{5\hat{i}+5\hat{j}-10\hat{k}}{5\sqrt{6}} \right )$
e) $t_{ac} = t_{ac}\left ( \frac{-2\hat{i}+4\hat{j}-10\hat{k}}{2\sqrt{30}} \right )$",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 103",Vector Analysis
98,tension3D,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""3DEquillibrium.jpg""></pl-figure>
</p>
<p>The uniform weight is suspended by three cables. The cylinder has a mass of 100 kg. Determine the tension within each cable. Round your answer to the nearest hundredth.</p>
<pl-multiple-choice answers-name=""3DEquillibrium"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">$T_{AB}$= 508.16 N, $T_{AC}$ = 336.18 N, $T_{AD}$= -458.63 N </pl-answer>
  <pl-answer correct=""false"">$T_{AB}$= -508.16 N, $T_{AC}$ = 336.18 N, $T_{AD}$= -458.63 N </pl-answer>
  <pl-answer correct=""false"">$T_{AB}$= 455 N, $T_{AC}$ = -543.24, $T_{AD}$= -324.78 N </pl-answer>
  <pl-answer correct=""false"">$T_{AB}$= -455 N, $T_{AC}$ = -543.24, $T_{AD}$= 324.78 N  </pl-answer>
</pl-multiple-choice>",,,,,"determine the tension within each cable for a uniform weight suspended by three cables. round your answer to the nearest hundredth.
options:
a) $t_{ab}$= 508.16 n, $t_{ac}$ = 336.18 n, $t_{ad}$= -458.63 n 
b) $t_{ab}$= -508.16 n, $t_{ac}$ = 336.18 n, $t_{ad}$= -458.63 n 
c) $t_{ab}$= 455 n, $t_{ac}$ = -543.24, $t_{ad}$= -324.78 n 
d) $t_{ab}$= -455 n, $t_{ac}$ = -543.24, $t_{ad}$= 324.78 n",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Reaction Forces"
99,tension3D2,"{
    ""uuid"": ""9a3rtac6-1031-56ed-a673-feb79c2a8bbf"",
    ""title"": ""Simple Moment"",
	""stem"": ""Test your understanding of Moment"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""mom2"", ""cro""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
  <pl-figure file-name=""3DEquillibrium2.jpg""></pl-figure>
</p>
<p> The 950-lb windmill is being removed due to malfunctions. The winches at points E and D will be used to remove it. If $(W_{1}$ = 250 lb) and $(W_{2}$ = 350 lb), determine the force and moment reactions occurring at point O. Let
  $\theta = 35^{o}$ and  $\Phi$ = 48^(o)$. Neglect the weight of the winches. What are the force reactions at point O?
  
</p>
<pl-multiple-choice answers-name=""3DEquillibrium2"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">$O_{x}$ = -365 lb, $O_{y}$ = -223 lb, $O_{z}$ = 236 lb$ </pl-answer>
  <pl-answer correct=""false"">$O_{x}$ = -257 lb, $O_{y}$ = -223 lb, $O_{z}$= 350 lb$  </pl-answer>
  <pl-answer correct=""false"">$O_{x}$ = 365 lb, $O_{y}$ = 223 lb, $O_{z}$= -236 lb$ </pl-answer>
  <pl-answer correct=""false"">$O_{x}$ = 257 lb, $O_{y}$ = 223 lb, $O_{z}$= -350 lb$  </pl-answer>
</pl-multiple-choice>",,,,,"what are the force reactions at point o?

options:
a) $o_{x}$ = -365 lb, $o_{y}$ = -223 lb, $o_{z}$ = 236 lb
b) $o_{x}$ = -257 lb, $o_{y}$ = -223 lb, $o_{z}$= 350 lb
c) $o_{x}$ = 365 lb, $o_{y}$ = 223 lb, $o_{z}$= -236 lb
d) $o_{x}$ = 257 lb, $o_{y}$ = 223 lb, $o_{z}$= -350 lb",9a3rtac6-1031-56ed-a673-feb79c2a8bbf,Simple moment,Test your understanding of moment,Statics,"V2,For2,Mom2,Cro",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 110","Reaction Forces, Static Equilibrium, Statics and Mechanics"
100,adaptiveMA,"{
    ""uuid"": ""7c4ccac6-1031-43ea-ad82-feb07c2f8ccd"",
    ""title"": ""Arithmetic"",
	""stem"": ""True or false"",
    ""topic"": ""Math"",
    ""tags"": [""addition""],
    ""prereqs"":"""",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mcq"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> If $ a = {{params.a}} $ and $ b = {{params.b}} $, then  which of the following is true?</pl-question-panel></p>

<pl-mca-adaptive> 
<pl-checkbox answers-name=""summc"" weight=""1"" inline=""true"">
  <pl-answer choice-name=""opt0"" correct=""false""> $ a + b = {{params.summc.opt0}} $ </pl-answer>
  <pl-answer choice-name=""opt1"" correct=""true""> $ a - b = {{params.summc.opt1}} $ </pl-answer>
  <pl-answer choice-name=""opt2"" correct=""false""> $ a \times b =  {{params.summc.opt2}} $</pl-answer>
  <pl-answer choice-name=""opt3"" correct=""true""> $ a^2 = {{params.summc.opt3}} $</pl-answer>
</pl-checkbox>
</pl-mca-adaptive>

","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

a = math.randomInt(0,15);
b = math.randomInt(1,15);

let mask = mathhelper.getRandomMask(4,1,4);
let params_summc = {};
let ca_summc = {};

if (mask[0] === 1) {
    params_summc['opt0'] = a + b;
    ca_summc['opt0'] = ""true"";
} else {
    params_summc['opt0'] = a + b + math.randomInt(1,8);
    ca_summc['opt10'] = ""false"";
}

if (mask[1] === 1) {
    params_summc['opt1'] = a - b;
    ca_summc['opt1'] = ""true"";
} else {
    params_summc['opt1'] = a - b + math.randomInt(1,8);
    ca_summc['opt1'] = ""false"";
}

if (mask[2] === 1) {
    params_summc['opt2'] = a * b;
    ca_summc['opt2'] = ""true"";
} else {
    params_summc['opt2'] = a * b + math.randomInt(1,8);
    ca_summc['opt2'] = ""false"";
}

if (mask[3] === 1) {
    params_summc['opt3'] = a*a;
    ca_summc['opt3'] = ""true"";
} else {
    params_summc['opt3'] = a *a + math.randomInt(1,8);
    ca_summc['opt3'] = ""false"";
}


data = {
    params: { 
        a: a,
        b: b,
        summc: params_summc
    },
    correct_answers: {
        summc: ca_summc
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"if $ a = 5 $ and $ b = -3 $, then which of the following is true?

 $ a + b = 2 $ 
 $ a - b = 8 $ 
 $ a \times b =  -15 $
 $ a^2 = 25 $",7c4ccac6-1031-43ea-ad82-feb07c2f8ccd,Arithmetic,True or false,Math,Addition,,True,sundar@google.com,Mcq,1,,1.0,Javascript,,,,,Basic Algebra
101,adaptiveMAMC,"{
    ""uuid"": ""7c4ccac6-1031-43ea-ad82-feb07c2f8ccd"",
    ""title"": ""Arithmetic"",
	""stem"": ""True or false"",
    ""topic"": ""Math"",
    ""tags"": [""addition""],
    ""prereqs"":"""",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mcq"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> If $ a = {{params.a}} $ and $ b = {{params.b}} $, then  which of the following is true?</pl-question-panel></p>

<pl-mca-adaptive> 
<pl-checkbox answers-name=""summa"" weight=""1"" inline=""true"">
  <pl-answer choice-name=""opt0"" correct=""false""> $ a + b = {{params.summa.opt0}} $ </pl-answer>
  <pl-answer choice-name=""opt1"" correct=""true""> $ a - b = {{params.summa.opt1}} $ </pl-answer>
  <pl-answer choice-name=""opt2"" correct=""false""> $ a \times b =  {{params.summa.opt2}} $</pl-answer>
  <pl-answer choice-name=""opt3"" correct=""true""> $ a^2 = {{params.summa.opt3}} $</pl-answer>
</pl-checkbox>
</pl-mca-adaptive>

<p> 
If $ a = {{params.a}} $ and $ b = {{params.b}} $, then  which of the following is true about $ b^2 $? 
</p>
<pl-mcq-adaptive> 
  <pl-multiple-choice answers-name=""summc"" weight=""1"" inline=""true"">
    <pl-answer choice-name=""opt0"" correct=""false""> {{params.summc.opt0}} </pl-answer>
    <pl-answer choice-name=""opt1"" correct=""true""> {{params.summc.opt1}} </pl-answer>
    <pl-answer choice-name=""opt2"" correct=""false""> {{params.summc.opt2}} </pl-answer>
    <pl-answer choice-name=""opt3"" correct=""true""> {{params.summc.opt3}} </pl-answer>
    <pl-answer choice-name=""opt4"" correct=""true""> {{params.summc.opt4}} </pl-answer>
  </pl-multiple-choice>
  </pl-mcq-adaptive>

<p> What is the value of $ a^2 - 2 $?</p> 

<pl-number-input answers-name=""c"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

a = math.randomInt(0,15);
b = math.randomInt(1,15);

let mask = mathhelper.getRandomMask(4,1,4);
let params_summa = {};
let ca_summa = {};

if (mask[0] === 1) {
    params_summa['opt0'] = a + b;
    ca_summa['opt0'] = ""true"";
} else {
    params_summa['opt0'] = a + b + math.randomInt(1,8);
    ca_summa['opt10'] = ""false"";
}

if (mask[1] === 1) {
    params_summa['opt1'] = a - b;
    ca_summa['opt1'] = ""true"";
} else {
    params_summa['opt1'] = a - b + math.randomInt(1,8);
    ca_summa['opt1'] = ""false"";
}

if (mask[2] === 1) {
    params_summa['opt2'] = a * b;
    ca_summa['opt2'] = ""true"";
} else {
    params_summa['opt2'] = a * b + math.randomInt(1,8);
    ca_summa['opt2'] = ""false"";
}

if (mask[3] === 1) {
    params_summa['opt3'] = a*a;
    ca_summa['opt3'] = ""true"";
} else {
    params_summa['opt3'] = a *a + math.randomInt(1,8);
    ca_summa['opt3'] = ""false"";
}

c = a**2 - 2;

let maskmc = mathhelper.getRandomMask(5,1,1);
let params_summc = {};
let ca_summc = {};
for (let i = 0; i < maskmc.length; i++) {
    let str = 'opt' + i;
    if (maskmc[i] === 1) {
        params_summc[str] = b**2;
        ca_summc[str] = ""true"";
    }
    else {
        params_summc[str] = b**2 + math.randomInt(2,9);
        ca_summc[str] = ""false"";
    }

}

data = {
    params: { 
        a: a,
        b: b,
        summc: params_summc,
        summa: params_summa
    },
    correct_answers: {
        summc: ca_summc,
        summa: ca_summa,
        c: c
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"if $ a = 5 $ and $ b = -2 $, then which of the following is true?


 $ a + b = 3 $ 
 $ a - b = 7 $ 
 $ a \times b =  -10 $
 $ a^2 = 25 $


 
if $ a = 5 $ and $ b = -2 $, then which of the following is true about $ b^2 $? 



 $ 4 $ 
 $ -4 $ 
 $ 4.0 $ 
 $ (-2)^2 $ 
 $ (-2)^2.0 $ 


 what is the value of $ a^2 - 2 $?",7c4ccac6-1031-43ea-ad82-feb07c2f8ccd,Arithmetic,True or false,Math,Addition,,True,sundar@google.com,Mcq,1,,1.0,Javascript,,,,,Basic Algebra
102,adaptiveMANUM,"{
    ""uuid"": ""7c4ccac6-1031-43ea-ad82-feb07c2f8ccd"",
    ""title"": ""Arithmetic"",
	""stem"": ""True or false"",
    ""topic"": ""Math"",
    ""tags"": [""addition""],
    ""prereqs"":"""",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mcq"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> If $ a = {{params.a}} $ and $ b = {{params.b}} $, then  which of the following is true?</pl-question-panel></p>

<pl-mca-adaptive> 
<pl-checkbox answers-name=""summc"" weight=""1"" inline=""true"">
  <pl-answer choice-name=""opt0"" correct=""false""> $ a + b = {{params.summc.opt0}} $ </pl-answer>
  <pl-answer choice-name=""opt1"" correct=""true""> $ a - b = {{params.summc.opt1}} $ </pl-answer>
  <pl-answer choice-name=""opt2"" correct=""false""> $ a \times b =  {{params.summc.opt2}} $</pl-answer>
  <pl-answer choice-name=""opt3"" correct=""true""> $ a^2 = {{params.summc.opt3}} $</pl-answer>
</pl-checkbox>
</pl-mca-adaptive>

<p> What is the value of $ a^2 - 2 $?</p>
<pl-number-input answers-name=""c"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

a = math.randomInt(0,15);
b = math.randomInt(1,15);

let mask = mathhelper.getRandomMask(4,1,4);
let params_summc = {};
let ca_summc = {};

if (mask[0] === 1) {
    params_summc['opt0'] = a + b;
    ca_summc['opt0'] = ""true"";
} else {
    params_summc['opt0'] = a + b + math.randomInt(1,8);
    ca_summc['opt10'] = ""false"";
}

if (mask[1] === 1) {
    params_summc['opt1'] = a - b;
    ca_summc['opt1'] = ""true"";
} else {
    params_summc['opt1'] = a - b + math.randomInt(1,8);
    ca_summc['opt1'] = ""false"";
}

if (mask[2] === 1) {
    params_summc['opt2'] = a * b;
    ca_summc['opt2'] = ""true"";
} else {
    params_summc['opt2'] = a * b + math.randomInt(1,8);
    ca_summc['opt2'] = ""false"";
}

if (mask[3] === 1) {
    params_summc['opt3'] = a*a;
    ca_summc['opt3'] = ""true"";
} else {
    params_summc['opt3'] = a *a + math.randomInt(1,8);
    ca_summc['opt3'] = ""false"";
}

c = a**2 - 2;

data = {
    params: { 
        a: a,
        b: b,
        summc: params_summc
    },
    correct_answers: {
        summc: ca_summc,
        c: c
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"input: if $ a = 5 $ and $ b = -3 $, then which of the following is true?

$ a + b = 2 $ 
$ a - b = 8 $ 
$ a \times b = -15 $
$ a^2 = 25 $

what is the value of $ a^2 - 2 $?",7c4ccac6-1031-43ea-ad82-feb07c2f8ccd,Arithmetic,True or false,Math,Addition,,True,sundar@google.com,Mcq,1,,1.0,Javascript,,,,,Basic Algebra
103,adaptiveMC,"{
    ""uuid"": ""7c4ccac6-1031-43ea-ad82-feb07c2f8ccd"",
    ""title"": ""Arithmetic"",
	""stem"": ""True or false"",
    ""topic"": ""Math"",
    ""tags"": [""addition""],
    ""prereqs"":"""",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mcq"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> If $ a = {{params.a}} $ and $ b = {{params.b}} $, then  $ a + b = $ ?</pl-question-panel></p>

<pl-mcq-adaptive> 
<pl-multiple-choice answers-name=""summc"" weight=""1"" inline=""true"">
  <pl-answer choice-name=""opt1"" correct=""false""> {{params.summc.opt1}} </pl-answer>
  <pl-answer choice-name=""opt2"" correct=""true""> {{params.summc.opt2}} </pl-answer>
  <pl-answer choice-name=""opt3"" correct=""false""> {{params.summc.opt3}} </pl-answer>
  <pl-answer choice-name=""opt4"" correct=""true""> {{params.summc.opt4}} </pl-answer>
</pl-multiple-choice>
</pl-mcq-adaptive>

","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

a = math.randomInt(0,15);
b = math.randomInt(0,15);

c = a + b ;
c1 = c + 2;
c2 = c - 2;
c3 = c + 4;

data = {
    params: { 
        a: a,
        b: b,
        c: c,
        opt1: c,
        opt2: c1,
        opt3: c2,
        opt4: c3,
        summc: {opt1: c, opt2: c1, opt3: c2, opt4: c3 }
    },
    correct_answers: {
        summc: {opt1: ""true"", opt2: ""false"", opt3: ""false"", opt4: ""false""}
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"input: if $ a = 5 $ and $ b = -3 $, then $ a + b = $ ?

1. 2
2. -8
3. 15
4. -2",7c4ccac6-1031-43ea-ad82-feb07c2f8ccd,Arithmetic,True or false,Math,Addition,,True,sundar@google.com,Mcq,1,,1.0,Javascript,,,,,Basic Algebra
104,addNumbers2,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Add two numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <p> Consider two numbers $a = {{params.a}}$ and $b = {{params.b}}$.</p>
  <p> What is the sum $c = a + b$?</p>
</pl-question-panel>

<pl-number-input answers-name=""c"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
",,,"import random, copy

def generate():

    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    # Sample two random integers between 5 and 10 (inclusive)
    a = random.randint(5, 10)
    b = random.randint(5, 10)

    # Put these two integers into data['params']
    data['params']['a'] = a
    data['params']['b'] = b

    # Compute the sum of these two integers
    c = a + b

    # Put the sum into data['correct_answers']
    data['correct_answers']['c'] = c

    return data
",,"consider two numbers $a = 3$ and $b = -8$.
what is the sum $c = a + b$?",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Add two numbers,Add two numbers,Algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Python,,,,,Basic Algebra
105,addNumbersFixed,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Add two numbers fixed"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <p> Consider two numbers $a = 5$ and $b = 6$.</p>
  <p> What is the sum $c = a + b$?</p>
</pl-question-panel>

<pl-number-input-fixed answers-name=""c"" correct-answer-fixed=""11"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input-fixed>
",,,"import random, copy

def generate(data):

    # Sample two random integers between 5 and 10 (inclusive)
    a = random.randint(5, 10)
    b = random.randint(5, 10)

    # Put these two integers into data['params']
    data['params']['a'] = a
    data['params']['b'] = b

    # Compute the sum of these two integers
    c = a + b

    # Put the sum into data['correct_answers']
    data['correct_answers']['c'] = c
",,"consider two numbers $a = 5$ and $b = 6$.
 what is the sum $c = a + b$?",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Add two numbers fixed,Add two numbers,Algebra,"Addition,Numbers",,False,sundar@google.com,Num,1,,1.0,Python,,,,,Basic Algebra
106,addNumbersMultiple,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Add multiple numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":[""""],
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
	""resources"": [
	{
		""type"": ""video"",
		""name"": ""video"",
		""title"": ""Video"",
		""url"": ""https://youtu.be/2losDFFHByI""
	},
	{
		""type"": ""file"",
		""name"": ""nspepdf"",
		""title"": ""NSPE Code of ethics PDF"",
		""url"": ""https://www.nspe.org/sites/default/files/resources/pdfs/Ethics/CodeofEthics/NSPECodeofEthicsforEngineers.pdf""
	},
	{
		""type"": ""webpage"",
		""name"": ""nspeweb"",
		""title"": ""NSPE Code of ethics online"",
		""url"": ""https://www.nspe.org/resources/ethics/code-ethics""
	}
	]
}
","<pl-question-panel>
  <p> Consider two numbers $a = {{params.a}}$ and $b = {{params.b}}$.</p>
</pl-question-panel>

<pl-quest> 
<pl-quest-prompt >What is the sum $c = a + b$? </pl-prompt>
<pl-number-input answers-name=""c"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
</pl-quest> 

<pl-quest> 
  <pl-quest-prompt >What is the sum $c = a - b$? </pl-prompt>
  <pl-number-input answers-name=""d"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
</pl-quest> 

<pl-quest> 
    <pl-quest-prompt >What is the sum $c = a \times  b$? </pl-prompt>
    <pl-number-input answers-name=""e"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
</pl-quest> 

<pl-quest> 
  <pl-quest-prompt >What is the sum $c = a /  b$? </pl-prompt>
  <pl-number-input answers-name=""f"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
</pl-quest> 

<pl-quest> 
  <pl-quest-prompt >What is the sum $c = a^2$? </pl-prompt>
  <pl-number-input answers-name=""g"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
</pl-quest> 

<pl-quest> 
  <pl-quest-prompt >What is the sum $c = b^2$? </pl-prompt>
  <pl-number-input answers-name=""h"" comparison=""sigfig"" digits=""3"" label=""$c=$""></pl-number-input>
</pl-quest> ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

a = math.randomInt(0,15);
b = math.randomInt(0,15);

c = a + b ;
d = a - b;
e = a*b;
f = a/b;
g = a*a;
h = b*b;

data = {
    params: { 
        a: a,
        b: b
    },
    correct_answers: {
        c: c,
        d:d,
        e:e,
        f:f,
        g:g,
        h: h
    },
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"consider two numbers $a = 3$ and $b = -8$.


what is the sum $c = a + b$? 



what is the sum $c = a - b$? 



what is the sum $c = a \times  b$? 



what is the sum $c = a /  b$? 



what is the sum $c = a^2$? 



what is the sum $c = b^2$?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Add multiple numbers,Add two numbers,Algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/2losDFFHByI'}, {'type': 'file', 'name': 'nspepdf', 'title': 'NSPE Code of ethics PDF', 'url': 'https://www.nspe.org/sites/default/files/resources/pdfs/Ethics/CodeofEthics/NSPECodeofEthicsforEngineers.pdf'}, {'type': 'webpage', 'name': 'nspeweb', 'title': 'NSPE Code of ethics online', 'url': 'https://www.nspe.org/resources/ethics/code-ethics'}]",,,,Basic Algebra
107,airplaneForce,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Airplace force"",
    ""stem"":""Airplace force"",
    ""topic"": ""Force"",
    ""tags"": [""kinematics"", ""force""],
    ""prereqs"":""kinematics"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A plane of {{params.masslabel}} {{params.md}} {{params.unitsMass}} accelerates from rest to a take-off speed {{params.vd}} {{params.unitsSpeed}} in {{params.t}} seconds.</p>
  <p> What is the net force (in {{params.unitsForce}}) on the plan. Neglect drag and rolling resistance.</p>
</pl-question-panel>

<pl-number-input answers-name=""F"" comparison=""sigfig"" digits=""3"" label=""F (in {{params.unitsForce}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""kmph"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""mph"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;

    t = math.randomInt(38,50);
    
    if ( unitSel === 0){
        md = 5*math.randomInt(10,40);
        m = md*1000;
        g = 9.81;
        vd = 8*math.randomInt(28, 34);
        v = vd*5/18;
        a = v/t;
        F = m*a/1000;
    } else {
        md = 12*math.randomInt(10,40);
        g = 32.2;
        m = md*2000/g;
        vd = 5*math.randomInt(28, 34);
        v = vd*5280/3600;
        a = v/t;
        F = m*a;
    }


data = {
    params: { 
        md: md,
        vd: vd,
        t: t,
        a: a,
        unitsMass: unitsMass,
        unitsSpeed: unitsSpeed,
        unitsForce: unitsForce,
        masslabel: masslabel
    },
    correct_answers: {
        F: F
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a plane of 5000 kg accelerates from rest to a take-off speed 80 m/s in 30 seconds.
 what is the net force (in newtons) on the plane. neglect drag and rolling resistance.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Airplace force,Airplace force,Force,"Kinematics,Force",Kinematics,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,
108,airplaneForceFriction,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Airplace force"",
    ""stem"":""Airplace force"",
    ""topic"": ""Force"",
    ""tags"": [""kinematics"", ""force""],
    ""prereqs"":""kinematics"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A plane of {{params.masslabel}} {{params.md}} {{params.unitsMass}} accelerates from rest to a take-off speed {{params.vd}} {{params.unitsSpeed}} in {{params.t}} seconds.</p>
  <p> What is the net force (in {{params.unitsForce}}) on the plane? The coefficient of rolling friction is {{params.mur}}.  Neglect drag.</p>
</pl-question-panel>

<pl-number-input answers-name=""F"" comparison=""sigfig"" digits=""3"" label=""F (in {{params.unitsForce}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""kmph"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""mph"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;

    t = math.randomInt(38,50);
    mur = 0.005*math.randomInt(2,10);

    if ( unitSel === 0){
        md = 5*math.randomInt(10,40);
        m = md*1000;
        g = 9.81;
        vd = 8*math.randomInt(28, 34);
        v = vd*5/18;
        a = v/t;
        Ff = mur*m*g;
        F = (m*a+mur*m*g)/1000;
    } else {
        md = 12*math.randomInt(10,40);
        g = 32.2;
        m = md*2000/g;
        vd = 5*math.randomInt(28, 34);
        v = vd*5280/3600;
        a = v/t;
        Ff = mur*m*g;
        F = m*a + Ff;
    }


data = {
    params: { 
        md: md,
        vd: vd,
        t: t,
        a: a,
        mur: mur,
        unitsMass: unitsMass,
        unitsSpeed: unitsSpeed,
        unitsForce: unitsForce,
        masslabel: masslabel
    },
    correct_answers: {
        F: F
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"a plane of mass 2000 kg accelerates from rest to a take-off speed 60 m/s in 30 seconds.
what is the net force (in newtons) on the plane? the coefficient of rolling friction is 0.2. neglect drag.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Airplace force,Airplace force,Force,"Kinematics,Force",Kinematics,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,Newton's Second Law of Motion
109,arithOperationMAMCJS,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Simple arithmetic operations"",
	""stem"": ""Test your understanding of arithmetics"",
    ""topic"": ""algebra"",
    ""tags"": [""addition"", ""multiplication"", ""difference"", ""product""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> If $ a = 2 $ and $ b = 6 $, which of the following are true </p>
<pl-checkbox answers-name=""arith"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $ a + b = 8 $ </pl-answer>
  <pl-answer correct=""true""> $ a - b $ = -4  </pl-answer>
  <pl-answer correct=""true""> $ b /a  = 3 $ </pl-answer>
  <pl-answer correct=""false""> $ a - b = 4 $  </pl-answer>
  <pl-answer correct=""false"">  $ a b = 10 $ </pl-answer>
  <pl-answer correct=""false""> $ a /b = 3 $ </pl-answer>
</pl-checkbox>
</pl-question-panel>

<pl-question-panel> Which of the following is $ 3 + 6 = $? </p>
<pl-multiple-choice answers-name=""sum"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">0</pl-answer>
  <pl-answer correct=""true"">9 </pl-answer>
  <pl-answer correct=""false"">cannot answer</pl-answer>
  <pl-answer correct=""false""> 15 </pl-answer>
</pl-multiple-choice>
</pl-question-panel>
",,,,,"if $ a = 2 $ and $ b = 6 $, which of the following are true?

options:
a) $ a + b = 8 $
b) $ a - b = -4 $
c) $ b / a = 3 $
d) $ a - b = 4 $
e) $ a \cdot b = 10 $
f) $ a / b = 3 $

 which of the following is $ 3 + 6 = $?

options:
a) 0
b) 9
c) cannot answer
d) 15",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Simple arithmetic operations,Test your understanding of arithmetics,Algebra,"Addition,Multiplication,Difference,Product",,False,sundar@google.com,Ma,1,,1.0,,,,,,Basic Algebra
110,arithOperationNUMMCJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-8740-ad2133ffbb2f"",
    ""title"": ""Perform operations"",
    ""stem"":""Perform operations"",
    ""topic"": ""Algebra"",
    ""tags"": [""addition"", ""numbers"",""multiplication""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> Consider two numbers $a = {{params.a}}$ and $b = {{params.b}}$.</p>
  <p> What is the sum $c = a + b$?</p>
  <p> What is the product $ c = a b $?</p>
  <p> What is the difference $ e = a - b $?</p>


<pl-number-input answers-name=""c"" comparison=""sigfigs"" digits=""3"" label=""${{correct_answers_labels.c}}=$""></pl-number-input>
<pl-number-input answers-name=""d"" comparison=""sigfigs"" digits=""3"" label=""${{correct_answers_labels.d}}=$""></pl-number-input>
<pl-number-input answers-name=""e"" comparison=""sigfigs"" digits=""3"" label=""${{correct_answers_labels.e}}=$""></pl-number-input>
</pl-question-panel>

<pl-question-panel> If $ a = 3 $ and $ b = 9 $, then $ a + b = 11 $</p>
<pl-multiple-choice answers-name=""sum"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">False </pl-answer>
  <pl-answer correct=""false""> True </pl-answer>
</pl-multiple-choice>
</pl-question-panel>



","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

a = math.randomInt(0,15);
b = math.randomInt(0,15);

c = a + b ;
d = a*b;
e = a - b;

data = {
    params: { 
        a: a,
        b: b
    },
    correct_answers: {
        c: c,
        d: d,
        e: e
    },
    correct_answers_labels: {
        c : ""Sum"",
        d : ""Product"",
        e : ""Difference""
    },
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider two numbers $a = 3$ and $b = 9$.
 what is the sum $c = a + b$?
 what is the product $ c = a b $?
 what is the difference $ e = a - b $?

 if $ a = 3 $ and $ b = 9 $, then $ a + b = 12 $
 if $ a = 3 $ and $ b = 9 $, then $ a b = 27 $
 if $ a = 3 $ and $ b = 9 $, then $ a - b = -6 $

false 
 true",8abcd91d6-64d1-4e89-8740-ad2133ffbb2f,Perform operations,Perform operations,Algebra,"Addition,Numbers,Multiplication",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,,Basic Algebra
111,averageVelAccel,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Average speed"",
    ""stem"":""Average speed"",
    ""topic"": ""Kinematics"",
    ""tags"": [""velocity"", ""speed""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A car starts from rest and accelerates with constant acceleration to a speed of {{params.v1}} {{params.unitsSpeed}} in {{params.t1}} {{params.unitsTime}}, and then changes speed with constant acceleration to a speed of {{params.v2}} {{params.unitsSpeed}} for {{params.t2}} {{params.unitsTime}}, and maintains this speed for  {{params.t3}} {{params.unitsTime}}.</p>
  <p> What is average speed (in {{params.unitsSpeed}}) over the time?</p>
</pl-question-panel>

<pl-number-input answers-name=""va"" comparison=""sigfig"" digits=""3"" label=""Average speed ({{params.unitsSpeed}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""kmph"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""time"": ""minutes""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""mph"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""time"": ""minutes""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsTime = units[unitSystems[unitSel]].time;

    
    v1d = 2*math.randomInt(2,20);
    v2d = 5*math.randomInt(2,20);
    t1 = 2*math.randomInt(5,10);
    t2 = 2*math.randomInt(4,8);
    t3 = 5*math.randomInt(5,15);

    if (unitSel === 0) {
        v1 = v1d*1000/3600;
        v2 = v2d*1000/3600;
    } else {
        v1 = v1d*5280/3600;
        v2 = v2d*5280/3600;
    }


    x1 = v1/2*t1;
    x2 = (v1 + v2)/2*t2;
    x3 = v2*t3;

    va = (x1+x2+x3)/(t1+t2+t3);

    if (unitSel === 0 ){
        vad = va*3600/1000;
    } else {
        vad = va*3600/5280;
    }


data = {
    params: { 
        v1: v1d,
        v2: v2d,
        t1 : t1,
        t2: t2,
        t3: t3,
        unitsSpeed: unitsSpeed,
        unitsTime: unitsTime
    },
    correct_answers: {
        va: vad
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a car starts from rest and accelerates with constant acceleration to a speed of 10 m/s in 5 seconds, and then changes speed with constant acceleration to a speed of 20 m/s for 3 seconds, and maintains this speed for 10 seconds.
what is average speed (in m/s) over the time?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Average speed,Average speed,Kinematics,"Velocity,Speed",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 003,"Time and Motion Analysis, Newton's Second Law of Motion"
112,averageVelMultiple,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Average speed"",
    ""stem"":""Average speed"",
    ""topic"": ""Kinematics"",
    ""tags"": [""velocity"", ""speed""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A car travels at a speed of {{params.v1}} {{params.unitsSpeed}} for {{params.t1}} {{params.unitsTime}}, at a speed of {{params.v2}} {{params.unitsSpeed}} for {{params.t2}} {{params.unitsTime}}, at a speed of {{params.v3}} {{params.unitsSpeed}} for {{params.t3}} {{params.unitsTime}}.</p>
  <p> What is average speed (in {{params.unitsSpeed}})?</p>
</pl-question-panel>

<pl-number-input answers-name=""va"" comparison=""sigfig"" digits=""3"" label=""Average speed ({{params.unitsSpeed}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""kmph"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""time"": ""minutes""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""mph"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""time"": ""minutes""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsTime = units[unitSystems[unitSel]].time;

    
    v1 = 4*math.randomInt(2,20);
    v2 = 2*math.randomInt(3,45);
    v3 = 3*math.randomInt(5,30);
    t1 = 2*math.randomInt(2,20);
    t2 = 3*math.randomInt(3,45);
    t3 = 5*math.randomInt(5,30);
    
    t = t1 + t2 + t3;
    va = (v1*t1 + v2*t2 + v3*t3)/t;

data = {
    params: { 
        v1: v1,
        v2: v2,
        v3: v3,
        t1 : t1,
        t2: t2,
        t3: t3,
        unitsSpeed: unitsSpeed,
        unitsTime: unitsTime
    },
    correct_answers: {
        va: va
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a car travels at a speed of 60 km/h for 2 hours, at a speed of 40 km/h for 3 hours, at a speed of 50 km/h for 1 hour.
 what is average speed (in km/h)?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Average speed,Average speed,Kinematics,"Velocity,Speed",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 003,"Time and Motion Analysis, Kinematics"
113,ballThrownUp,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Ball thrown upwards"",
    ""stem"":""Ball thrown upwards"",
    ""topic"": ""Kinematics"",
    ""tags"": [""constant acceleration"", ""gravity""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A ball is thrown upwards from the ground with an initial velocity $ u $. The ball is at height of {{params.H}} {{params.unitsDist}} at two times with the time interval between the two being {{params.dt}} seconds.</p>
  <p> Find the initial velocity $ u $ in {{params.unitsSpeed}}.</p>
</pl-question-panel>

<pl-number-input answers-name=""u"" comparison=""sigfig"" digits=""3"" label=""$u=$""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;


H  = 5*math.randomInt(5,15);

if ( unitSel === 0){
    g = 9.81;
} else {
    g = 32.2;
}

umin = math.sqrt(2*H*g);
ut = math.random(1.25,2.5)*umin;
dt1 = 2*math.sqrt((ut*ut)/(g*g) - (2*H/g));
dt = math.round(dt1*10)/10;

u = math.sqrt(g*g*(dt/2)*(dt/2) + 2*g*H);
console.log(`g = ${g} : H = ${H} : ut = ${ut}: dt = ${dt}`);

data = {
    params: { 
        H: H,
        dt: dt,
        unitsDist: unitsDist,
        unitsSpeed: unitsSpeed
    },
    correct_answers: {
        u : u
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a ball is thrown upwards from the ground with an initial velocity $ u $. the ball is at height of 20 meters at two times with the time interval between the two being 2 seconds.
find the initial velocity $ u $ in meters per second.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Ball thrown upwards,Ball thrown upwards,Kinematics,"Constant acceleration,Gravity",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,Projectile Motion
114,bulkModulus,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Bulk Modulus"",
	""stem"": ""Fluid density"", 
    ""topic"": ""fluids"",
    ""tags"": [""density""],
	""prereqs"": ""volume"",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel>
<p> A volume {{params.V}} {{params.unitsVolume}} of {{params.fluidName}} at atmospheric pressure is subject to a gage pressure {{params.P}} {{params.unitsPressure}}. </p>
  <p> The bulk modulus of {{params.fluidName}} is {{params.K}} {{params.unitsBulkModulus}}. </p>
</pl-question-panel>


What is the new volume (in {{params.unitsVolume}})?
<pl-number-input answers-name=""Vnew"" comparison=""sigfig"" digits=""3"" label="" V (in {{params.unitsVolume}}) ""></pl-number-input>
","const math = require('mathjs');
const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const props  = require('./properties.js');

const generate = () => {
	
	unitSystems = ['si', ""uscs""];
	masslabels = [""mass"", ""weight""];
	densitylabels = ['density', 'specific weight'];
	
	units = { 
		""si"": { 
			""masslabel"": ""mass"",
			""mass"": ""kg"",
			""speed"": ""cm/s"",
			""dist"": ""cm"",
			""force"": ""N"",
			""angle"": ""degrees"",
			""density"": "" \\( kg/m^3 \\)"",
			""volume"": "" \\( m^3 \\)"",
			""power"": ""W"",
			""gap"": ""mm"",
			""viscosity"": ""Pa s"",
			""bulkModulus"": ""GPa"",
			""pressure"": ""kPa""
		},
		""uscs"": {
			""masslabel"": ""weight"",
			""mass"": ""lb"",
			""speed"": ""inch/s"",
			""dist"": ""in"",
			""force"": ""lb"",
			""angle"": ""degrees"",
			""density"": ""\\( lb/ft^3 \\)"",
			""volume"": ""\\( ft^3 \\)"",
			""power"": ""hp"",
			""gap"": ""inch"",
			""viscosity"": "" \\( lb s /ft^2 \\)"",
			""bulkModulus"": ""Mpsi"",
			""pressure"": ""psi""
		}
	}
	


	fluidProperties = props.fluidProperties;
	fluidKeys = Object.keys(fluidProperties);
	numFluids = fluidKeys.length;
	console.log(`Fluid keys = ${fluidKeys}`);
	fluidIndex = math.randomInt(0,numFluids);
	fluid = fluidKeys[fluidIndex];
	

	

	unitSel = 0
	//unitSel = math.randomInt(0,2);
	unitsDist = units[unitSystems[unitSel]].dist;
	unitsSpeed = units[unitSystems[unitSel]].speed;
	unitsMass = units[unitSystems[unitSel]].mass;
	unitsForce = units[unitSystems[unitSel]].force;
	unitsAngle = units[unitSystems[unitSel]].angle;
	unitsVolume = units[unitSystems[unitSel]].volume;
	unitsDensity = units[unitSystems[unitSel]].density;
	unitsGap = units[unitSystems[unitSel]].gap;
	unitsPower = units[unitSystems[unitSel]].power;
	unitsViscosity = units[unitSystems[unitSel]].viscosity;
	unitsBulkModulus= units[unitSystems[unitSel]].bulkModulus;
	masslabel = units[unitSystems[unitSel]].masslabel;
	densitylabel = units[unitSystems[unitSel]].densitylabel;
	unitsPressure = units[unitSystems[unitSel]].pressure;

	fluidProperties = props.fluidProperties;
	fluidKeys = Object.keys(fluidProperties);
	numFluids = fluidKeys.length;
	console.log(`Fluid keys = ${fluidKeys}`);
	fluidIndex = math.randomInt(0,numFluids);
	fluidName = fluidKeys[fluidIndex];

	Kd = props.fluidProperties[fluidName].K;

	V = math.randomInt(5, 26);
	Pd = 100*math.randomInt(1,12);
	P = Pd*1e3;
	K = Kd*1e9;
	
	delV = P*V/K;
	Vnew = V - delV;


if (unitSel === 0) {

}
else {
	
}



data = {
    params: {
		P: Pd,
		K: Kd,
		V: V,
		fluidName: fluidName,
		unitsDist: unitsDist,
		unitsMass: unitsMass,
		unitsVolume: unitsVolume,
		masslabel: masslabel,
		unitsForce: unitsForce,
		unitsSpeed: unitsSpeed,
		unitsGap: unitsGap,
		unitsPower: unitsPower,
		unitsViscosity: unitsViscosity,
		unitsBulkModulus: unitsBulkModulus,
		unitsPressure: unitsPressure
    },
    correct_answers: {
		delV: delV,
		Vnew: Vnew
	},

    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""K"": 2
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""K"": 1.3
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""K"": 1.3
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""K"": 1.05
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""K"": 1.06
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""K"": 0.92
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
        ""K"": 1.66
    },
    ""glycerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""K"": 4.35
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""K"": 3

    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""K"": 1.9
    }
}

const materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""E"": [70,80],
        ""sult"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""copper"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""brass"": {
        ""sg"": 8.4,
        ""E"": [96,110],
        ""sult"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34
    }
    
}

const getFluidProperties = (fluidName, unitSel) => {
    let fluid = fluidProperties[fluidName];

    if (unitSel === 0){
        rho = fluid.sg*1000;
        mud = fluid.mu;
    } else {
        rho = fluid.sg*62.4;
        mud = fluid.mu*0.020885;
    }

    fluid.mud = mud;
    fluid.rho = rho;

    return fluid;
}

module.exports = {
    fluidProperties,
    materialProperties,
    getFluidProperties
}","a volume 500 ml of water at atmospheric pressure is subject to a gage pressure 2 bar. 
the bulk modulus of water is 2.2 gpa. 

what is the new volume (in ml)?",1f435c36-1126-43b0-aba5-627eeb2e10f9,Bulk modulus,Fluid density,Fluids,Density,Volume,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 113,
115,energyProductionThermo,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Carnot efficiency "",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""secondlaw"", ""temperature"", ""power""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
A power plant operates at a maximum temperature of {{params.Tmin}} {{params.unitsTemperature}} and at an ambient temeperature of {{params.Tmax}} {{params.unitsTemperature}}. 
</p>
<p> The power plant is to produce an electrical output power is {{params.Pout}} {{params.unitsPower}}. </p>
</pl-question-panel>

<p> What is the maximum efficiency of the plant? </p>
<pl-number-input answers-name=""effmax"" comparison=""sigfig"" digits=""3"" label=""Max Efficiency""></pl-number-input>
<p> How much power (in {{params.unitsPower}}) needs to be supplied to the plant? </p>
<pl-number-input answers-name=""Pin"" comparison=""sigfig"" digits=""3"" label=""Input power (in {{params.unitsPower}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""MW"",
            ""heatingvalue"": ""MJ/kg""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""MW"",
            ""heatingvalue"": ""BTU/lb""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    convToAbs = 273;
    Tmax = 5*math.randomInt(120,200);
    Tmin = math.randomInt(-20,40);
    hvd = math.randomInt(45, 50);
    hv = hvd*1000000;
}
else {
    convToAbs = 540;
    Tmax = 5*math.randomInt(250,400);
    Tmin = math.randomInt(-4,110);
    hvd = 1000*math.randomInt(6,22);
}


effmax = 1 - (Tmin+convToAbs)/(Tmax+convToAbs);
effmaxd = effmax*100;

Pout = 10*math.randomInt(1,50);
Pin = Pout/effmax;


data = {
    params: { 
        Tmin: Tmin,
        Tmax: Tmax,
        Pout: Pout,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsPower: unitsPower
    },
    correct_answers: {
        effmax: effmaxd,
        Pin: Pin
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties
}","a power plant operates at a maximum temperature of 500 degrees celsius and at an ambient temperature of 25 degrees celsius. 

the power plant is to produce an electrical output power of 1000 megawatts. 

1. what is the maximum efficiency of the plant? 

2. how much power (in megawatts) needs to be supplied to the plant?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Carnot efficiency,Heat,Thm,"Secondlaw,Temperature,Power",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 100B,Thermal Efficiency in Power Cycles
116,energyProductionThermo1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Carnot efficiency "",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""secondlaw"", ""temperature"", ""power""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
A power plant operates at a maximum temperature of {{params.Tmin}} {{params.unitsTemperature}} and at an ambient temeperature of {{params.Tmax}} {{params.unitsTemperature}}. 
</p>
<p> The power plant is to produce an electrical output power is {{params.Pout}} {{params.unitsPower}}. The plants operates at {{params.frac}}% of the ideal efficiency.</p>
<p> The power plant uses fuel with heating value {{params.hv}} {{params.unitsHV}}. </p>
</pl-question-panel>


<p> How much power (in {{params.unitsPower}}) needs to be supplied to the plant? </p>
<pl-number-input answers-name=""Pin"" comparison=""sigfig"" digits=""3"" label=""Input power (in {{params.unitsPower}})""></pl-number-input>
<p> How much mass (in {{params.unitsMassRate}}) needs to be supplied to the plant? </p>
<pl-number-input answers-name=""mdot"" comparison=""sigfig"" digits=""3"" label=""$ \dot{m} $ (in {{params.unitsMassRate}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""MW"",
            ""heatingValue"": ""MJ/kg"",
            ""massRate"": ""kg/s""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""MW"",
            ""heatingValue"": ""BTU/lb"",
            ""massRate"": ""lb/s""
        }
    }
    
    unitSel = 1;
    //unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsHV = units[unitSystems[unitSel]].heatingValue;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    convToAbs = 273;
    Tmax = 5*math.randomInt(120,200);
    Tmin = math.randomInt(-20,40);
    hvd = math.randomInt(45, 50);
    hv = hvd;
}
else {
    convToAbs = 540;
    Tmax = 5*math.randomInt(250,400);
    Tmin = math.randomInt(-4,110);
    hvd = 1000*math.randomInt(6,22);
    hv = hvd;
}


effmax = 1 - (Tmin+convToAbs)/(Tmax+convToAbs);
effmaxd = effmax*100;

Pout = 10*math.randomInt(1,50);


fracd = 5*math.randomInt(8,18);
frac = fracd/100;
eff = frac*effmax;
if (unitSel === 0) {
    Pin = Pout/eff;
    mdot = Pin/hv;
} else {
    Pin = Pout/eff;
    Pin = Pin*1055;
    mdot = Pin/hv;

}


data = {
    params: { 
        hv: hvd,
        Tmin: Tmin,
        Tmax: Tmax,
        Pout: Pout,
        frac: fracd,
        masslabel: masslabel,
        unitsMassRate: unitsMassRate,
        unitsHV: unitsHV,
        unitsTemperature: unitsTemperature,
        unitsPower: unitsPower
    },
    correct_answers: {
        mdot: mdot,
        Pin: Pin,
        effmax: effmaxd,
        eff: eff
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties
}","a power plant operates at a maximum temperature of 500 degrees celsius and at an ambient temperature of 25 degrees celsius. 

the power plant is to produce an electrical output power of 1000 megawatts. the plant operates at 80% of the ideal efficiency.
the power plant uses fuel with a heating value of 45 megajoules per kilogram.

1. how much power (in megawatts) needs to be supplied to the plant?
2. how much mass (in kilograms) needs to be supplied to the plant?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Carnot efficiency,Heat,Thm,"Secondlaw,Temperature,Power",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 100B,"Thermal Efficiency in Power Cycles, Mass Flow Rate"
117,fluidDensity1,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Density of fluid"",
	""stem"": ""Fluid density"", 
    ""topic"": ""Fluid Mechanics"",
    ""tags"": [""density""],
	""prereqs"": ""volume"",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel>
  <p> A tank of length {{params.a}} {{params.unitsDist}}, width {{params.b}} {{params.unitsDist}} and height {{params.c}} {{params.unitsDist}} is {{params.fillFraction}}% full of {{params.fluid}} (specific gravity = {{params.sg}}).</p>
  <p> What is the {{params.masslabel}} (in {{params.unitsMass}}) of {{params.fluid}} in the tank? </p>
</pl-question-panel>


<pl-number-input answers-name=""mass"" comparison=""sigfig"" digits=""3"" label=""{{params.masslabel}} (in {{params.unitsMass}}) =""></pl-number-input>","const math = require('mathjs');
const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const props  = require('./properties.js');

const generate = () => {
	
	unitSystems = ['si', ""uscs""];
	masslabels = [""mass"", ""weight""];
	densitylabels = ['density', 'specific weight'];
	
	units = { 
		""si"": { 
			""masslabel"": ""mass"",
			""mass"": ""kg"",
			""speed"": ""kmph"",
			""dist"": ""m"",
			""force"": ""N"",
			""angle"": ""degrees"",
			""density"": ""$kg/m^3$"",
			""volume"": ""$m^3/s$""
		},
		""uscs"": {
			""masslabel"": ""weight"",
			""mass"": ""lb"",
			""speed"": ""mph"",
			""dist"": ""ft"",
			""force"": ""lb"",
			""angle"": ""degrees"",
			""density"": ""$lb/ft^3$"",
			""volume"": ""$ ft^3/s $""
		}
	}
	


	fluidProperties = props.fluidProperties;
	
	fluidKeys = Object.keys(fluidProperties);
	numFluids = fluidKeys.length;
	
	console.log(`Fluid keys = ${fluidKeys}`);

	fluidIndex = math.randomInt(0,numFluids);
	fluid = fluidKeys[fluidIndex];
	sg = fluidProperties[fluid].sg;


	console.log(`Index = ${fluidIndex}: Fluid = ${fluid}, Specific Gravity = ${sg} `);

	unitSel = math.randomInt(0,2);
	unitsDist = units[unitSystems[unitSel]].dist;
	unitsSpeed = units[unitSystems[unitSel]].speed;
	unitsMass = units[unitSystems[unitSel]].mass;
	unitsForce = units[unitSystems[unitSel]].force;
	unitsAngle = units[unitSystems[unitSel]].angle;
	unitsVolume = units[unitSystems[unitSel]].volume;
	unitsDensity = units[unitSystems[unitSel]].density;

	masslabel = units[unitSystems[unitSel]].masslabel;
	densitylabel = units[unitSystems[unitSel]].densitylabel;

	a = 0.25*math.randomInt(1,5);
	b = 0.25*math.randomInt(1,5);
	c = 0.25*math.randomInt(1,5);

	pd = math.round(100*math.random(0.2,0.9));
	p = pd/100;

	if ( unitSel === 0){ 
		rho = sg*1000;
	}
	else {
		rho = sg*62.4;
	}

	V = p*a*b*c;
	m = rho*V;



data = {
    params: {
		fillFraction:pd,
		a:a,
		b:b,
		c:c,
		sg: sg,
		fluid: fluid,
		unitsDist: unitsDist,
		unitsMass: unitsMass,
		unitsVolume: unitsVolume,
		masslabel: masslabel
    },
    correct_answers: {
		mass: m,
		volume: V	
	},

    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""glycerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

const materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""E"": [70,80],
        ""sult"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""copper"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""brass"": {
        ""sg"": 8.4,
        ""E"": [96,110],
        ""sult"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34
    }
    
}


module.exports = {
    fluidProperties,
    materialProperties
}","a tank of length 2 meters, width 1.5 meters, and height 3 meters is 75% full of water (specific gravity = 1).
what is the mass (in kilograms) of water in the tank?",1f435c36-1126-43b0-aba5-627eeb2e10f9,Density of fluid,Fluid density,Fluid mechanics,Density,Volume,True,sundar@google.com,Num,1,,1.0,Javascript,,,,,Mass Flow Rate
118,fluidDensity2,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Density of fluid"",
	""stem"": ""Fluid density"", 
    ""topic"": ""Fluid Mechanics"",
    ""tags"": [""density""],
	""prereqs"": ""volume"",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel>
  <p> A cylindrical tank of diameter {{params.D}} {{params.unitsDist}} and height {{params.H}} {{params.unitsDist}}  is {{params.fillFraction}}% full of {{params.fluid}} (specific gravity = {{params.sg}}).</p>
  <p> What is the {{params.masslabel}} (in {{params.unitsMass}}) of {{params.fluid}} in the tank? </p>
</pl-question-panel>


<pl-number-input answers-name=""mass"" comparison=""sigfig"" digits=""3"" label=""{{params.masslabel}} (in {{params.unitsMass}}) =""></pl-number-input>","const math = require('mathjs');
const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const props  = require('./properties.js');

const generate = () => {
	
	unitSystems = ['si', ""uscs""];
	masslabels = [""mass"", ""weight""];
	densitylabels = ['density', 'specific weight'];
	
	units = { 
		""si"": { 
			""masslabel"": ""mass"",
			""mass"": ""kg"",
			""speed"": ""kmph"",
			""dist"": ""m"",
			""force"": ""N"",
			""angle"": ""degrees"",
			""density"": ""$kg/m^3$"",
			""volume"": ""$m^3/s$""
		},
		""uscs"": {
			""masslabel"": ""weight"",
			""mass"": ""lb"",
			""speed"": ""mph"",
			""dist"": ""ft"",
			""force"": ""lb"",
			""angle"": ""degrees"",
			""density"": ""$lb/ft^3$"",
			""volume"": ""$ ft^3/s $""
		}
	}
	


	fluidProperties = props.fluidProperties;
	
	fluidKeys = Object.keys(fluidProperties);
	numFluids = fluidKeys.length;
	
	console.log(`Fluid keys = ${fluidKeys}`);

	fluidIndex = math.randomInt(0,numFluids);
	fluid = fluidKeys[fluidIndex];
	sg = fluidProperties[fluid].sg;


	console.log(`Index = ${fluidIndex}: Fluid = ${fluid}, Specific Gravity = ${sg} `);

	unitSel = math.randomInt(0,2);
	unitsDist = units[unitSystems[unitSel]].dist;
	unitsSpeed = units[unitSystems[unitSel]].speed;
	unitsMass = units[unitSystems[unitSel]].mass;
	unitsForce = units[unitSystems[unitSel]].force;
	unitsAngle = units[unitSystems[unitSel]].angle;
	unitsVolume = units[unitSystems[unitSel]].volume;
	unitsDensity = units[unitSystems[unitSel]].density;

	masslabel = units[unitSystems[unitSel]].masslabel;
	densitylabel = units[unitSystems[unitSel]].densitylabel;

	D = 2*math.randomInt(1,5);
	H = 5*math.randomInt(1,5);
	

	pd = math.round(100*math.random(0.2,0.9));
	p = pd/100;

	if ( unitSel === 0){ 
		rho = sg*1000;
	}
	else {
		rho = sg*62.4;
	}

	V = p*math.pi/4*D*D*H;
	m = rho*V;



data = {
    params: {
		fillFraction:pd,
		D: D,
		H: H,
		sg: sg,
		fluid: fluid,
		unitsDist: unitsDist,
		unitsMass: unitsMass,
		unitsVolume: unitsVolume,
		masslabel: masslabel
    },
    correct_answers: {
		mass: m,
		volume: V	
	},

    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""glycerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

const materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""E"": [70,80],
        ""sult"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""copper"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""brass"": {
        ""sg"": 8.4,
        ""E"": [96,110],
        ""sult"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34
    }
    
}


module.exports = {
    fluidProperties,
    materialProperties
}","a cylindrical tank of diameter 2 meters and height 5 meters is 75% full of water (specific gravity = 1).
what is the mass (in kilograms) of water in the tank?",1f435c36-1126-43b0-aba5-627eeb2e10f9,Density of fluid,Fluid density,Fluid mechanics,Density,Volume,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 113,Mass Flow Rate
119,forceVector1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Add two numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
A force of magnitude {{params.Fmag}} {{params.unitsForce}} has its origin at ({{params.x1}}, {{params.y1}}) and ends at ({{params.x2}},{{params.y2}}). 
<p>
What are the components (in {{params.unitsForce}}) of the force?
</pl-question-panel>

<pl-number-input answers-name=""Fx"" comparison=""sigfig"" digits=""3"" label=""X-component""></pl-number-input>
<pl-number-input answers-name=""Fy"" comparison=""sigfig"" digits=""3"" label=""Y-component""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {
    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""cm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""inch"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;

let x1 = 0;
let x2 = 0;
let y1 = 0;
let y2 = 0;

Fmag = 5*math.randomInt(10,50);


while (x1 === 0 && x2 === 0 && y1 === 0 && y2 === 0) {
    x1 = math.randomInt(-10,10);
    y1 = math.randomInt(-10,10);
    x2 = math.randomInt(-10,10);
    y2 = math.randomInt(-10,10);
}

x = x2 - x1;
y = y2 - y1;

len = math.sqrt(x*x + y*y);

ux = x/len;
uy = y/len;

unitVec = [ux,uy];
F = math.multiply(Fmag, unitVec);

console.log(`x1 = ${x1}, y1 = ${y1}, x2 = ${x2}, y2 = ${y2}`);

data = {
    params: { 
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        Fmag: Fmag,
        unitsForce: unitsForce
    },
    correct_answers: {
        Fx: F[0],
        Fy: F[1]
    },
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"a force of magnitude 10 n has its origin at (2, 3) and ends at (6, 8).

what are the components (in n) of the force?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Add two numbers,Add two numbers,Algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 018B,Vector Analysis
120,heatDefn1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat "",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""heat"", ""temperature"",""specificheat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
  A {{params.materialName}} {{params.masslabel}} of {{params.m}} {{params.unitsMass}} is heated from an initial temperature of {{params.Ti}} {{params.unitsTemperature}} to {{params.Tf}} {{params.unitsTemperature}}.
  The specific heat of {{params.materialName}} is {{params.Cp}} {{params.unitsCp}}.
</p>
</pl-question-panel>

<p> How much heat was supplied to heat the {{params.masslabel}}? </p>
<pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Q  (in {{params.unitsHeat}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


materialProperties = props.materialProperties;
matKeys = Object.keys(materialProperties);
numMats = matKeys.length;
matIndex = math.randomInt(0,numMats);
materialName = matKeys[matIndex];
matprop = props.getMaterialProperties(materialName, unitSel);

Cp = matprop.Cp;



if (unitSel === 0){
    m = math.randomInt(3,20);
    Ti = math.randomInt(10,40);
    Tf = math.randomInt(50,200);
} else {
    m = 3*math.randomInt(3,20);
    Ti = 2*math.randomInt(20,40);
    Tf = 5*math.randomInt(20,80);
}


Q = m*Cp*(Tf-Ti);

data = {
    params: { 
        m: m,
        Ti: Ti,
        Tf: Tf,
        Cp: Cp,
        materialName: materialName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat
    },
    correct_answers: {
        Q: Q
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties
}","a copper block of 2 kg is heated from an initial temperature of 25 degrees celsius to 100 degrees celsius.
the specific heat of copper is 0.385 j/g°c.

how much heat was supplied to heat the block?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat,Heat,Thm,"Heat,Temperature,Specificheat",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 100A, ME 116B",Specific Heat and Heat Transfer
121,heatExchanger,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat exchanger"",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""heat"", ""temperature"",""specificheat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
  A heat exchanger exchanges energy between a hot fluid and a cold fluid. The cold fluid with specific heat {{params.Cpc}} {{params.unitsCp}} flows at a rate of {{params.mc}} {{params.unitsMassRate}}. 
  </p>
<p> The cold fluid enters the pipe at a temperature of {{params.Tci}} {{params.unitsTemperature}} and exits at {{params.Tco}} {{params.unitsTemperature}} </p>
<p> The hot fluid of specific gravity {{params.Cph}} {{params.unitsCp}} at {{params.Thi}} {{params.unitsTemperature}} and exits at {{params.Tho}} {{params.unitsTemperature}}.</p>
</p>
</pl-question-panel>


<p> How much heat (in {{params.unitsHeatRate}}) was supplied to heat the cold fluid? </p>
<pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Q  (in {{params.unitsHeatRate}})""></pl-number-input>
<p> What is the mass flow rate (in {{params.unitsMassRate}} ) of the hot fluid flowing in the pipe? </p>
<pl-number-input answers-name=""mh"" comparison=""sigfig"" digits=""3"" label=""$ \dot{m} $  (in {{params.unitsMassRate}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""liters per min"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""gpm"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s""
        }
    }
    unitSel = 0;
    //unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex1 = math.randomInt(0,numFluids);
fluidName1 = fluidKeys[fluidIndex1];
fluidprop1 = props.getFluidProperties(fluidName1, unitSel);
Cp1 = fluidprop1.Cp;
rho1 = fluidprop1.rho;
sg1= fluidprop1.sg;
Tboil1 = fluidprop1.Tboil;
Tfreeze1 = fluidprop1.Tfreeze;

fluidIndex2 = math.randomInt(0,numFluids);
fluidName2 = fluidKeys[fluidIndex2];
fluidprop2 = props.getFluidProperties(fluidName2, unitSel);
Cp2 = fluidprop2.Cp;
rho2 = fluidprop2.rho;
sg2= fluidprop2.sg;
Tboil2 = fluidprop2.Tboil;
Tfreeze2= fluidprop2.Tfreeze;


Tci = math.random(0.1,0.2)*(Tboil1-Tfreeze1) + Tfreeze1;
Tci = math.round(Tci);
Tco = math.random(0.25, 0.35)*(Tboil1-Tfreeze1) + Tfreeze1;
Tco = math.round(Tco);
Cpc = Cp1;
rhoc = rho1;

Thi = math.random(0.8,0.9)*(Tboil2 - Tco) + Tco;
Thi = math.round(Thi);
Tho = math.random(0.3, 0.5)*(Tboil2 - Tco) + Tco;
Tho = math.round(Tho);
Cph = Cp2;
rhoh = rho2;


mc = 0.5*math.randomInt(1,10);

Q = mc*Cpc*(Tco - Tci);
mh = Q/(Cph*(Thi-Tho));

if (unitSel === 0){

} else {
    
}



data = {
    params: { 
        mh: mh,
        mc: mc,
        Tho: Tho,
        Thi: Thi,
        Tci: Tci,
        Tco: Tco,
        Cph: Cph,
        rho1: rho1,
        sg1: sg1,
        Cpc: Cpc,
        rho2: rho2,
        sg2: sg2,
        fluidName1: fluidName1,
        fluidName2: fluidName2,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate
    },
    correct_answers: {
        mh: mh,
        Q: Q
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 4.2,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""gylcerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties,
    getFluidProperties
}","a heat exchanger exchanges energy between a hot fluid and a cold fluid. the cold fluid with specific heat 4.2 j/g°c flows at a rate of 2.5 kg/s. 

the cold fluid enters the pipe at a temperature of 10°c and exits at 30°c. 

the hot fluid of specific gravity 3.8 j/g°c at 80°c and exits at 60°c.

how much heat (in j/s) was supplied to heat the cold fluid?

what is the mass flow rate (in kg/s) of the hot fluid flowing in the pipe?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat exchanger,Heat,Thm,"Heat,Temperature,Specificheat",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 241A, ME 135","Heat Transfer Area, Mass Flow Rate, Thermal Efficiency in Power Cycles"
122,heatExchanger1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat exchanger"",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""heat"", ""temperature"",""specificheat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
  A heat exchanger exchanges energy between a hot fluid and a cold fluid. </p>
 <p>  The cold fluid with specific heat {{params.Cpc}} {{params.unitsCp}} flows at a rate of {{params.mc}} {{params.unitsMassRate}}. 
  </p>
<p> The cold fluid enters the pipe at a temperature of {{params.Tci}} {{params.unitsTemperature}} and exits at {{params.Tco}} {{params.unitsTemperature}}.</p>
<p> The hot fluid of specific gravity {{params.Cph}} {{params.unitsCp}} exits at the rate of {{params.mh}} {{params.unitsMassRate}} with {{params.Tho}} {{params.unitsTemperature}}.</p>
</p>
</pl-question-panel>


<p> How much heat (in {{params.unitsHeatRate}}) was supplied to heat the cold fluid? </p>
<pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Q  (in {{params.unitsHeatRate}})""></pl-number-input>
<p> What is the temperature (in degrees {{params.unitsTemperature}} ) of the hot fluid  entering the pipe? </p>
<pl-number-input answers-name=""Thi"" comparison=""sigfig"" digits=""3"" label=""T  (in deg {{params.unitsTemperature}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""liters per min"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""gpm"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s""
        }
    }
    unitSel = 0;
    //unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex1 = math.randomInt(0,numFluids);
fluidName1 = fluidKeys[fluidIndex1];
fluidprop1 = props.getFluidProperties(fluidName1, unitSel);
Cp1 = fluidprop1.Cp;
rho1 = fluidprop1.rho;
sg1= fluidprop1.sg;
Tboil1 = fluidprop1.Tboil;
Tfreeze1 = fluidprop1.Tfreeze;

fluidIndex2 = math.randomInt(0,numFluids);
fluidName2 = fluidKeys[fluidIndex2];
fluidprop2 = props.getFluidProperties(fluidName2, unitSel);
Cp2 = fluidprop2.Cp;
rho2 = fluidprop2.rho;
sg2= fluidprop2.sg;
Tboil2 = fluidprop2.Tboil;
Tfreeze2= fluidprop2.Tfreeze;


Tci = math.random(0.1,0.2)*(Tboil1-Tfreeze1) + Tfreeze1;
Tci = math.round(Tci);
Tco = math.random(0.25, 0.35)*(Tboil1-Tfreeze1) + Tfreeze1;
Tco = math.round(Tco);
Cpc = Cp1;
rhoc = rho1;

Thi = math.random(0.8,0.9)*(Tboil2 - Tfreeze2) + Tfreeze2;
Thi = math.round(Thi);
Tho = math.random(0.5, 0.8)*(Tboil2 - Tfreeze2) + Tfreeze2;
Tho = math.round(Tho);
Cph = Cp2;
rhoh = rho2;


mc = 0.5*math.randomInt(1,10);
Q = mc*Cpc*(Tco - Tci);


mh_i = Q/(Cph*(Thi-Tho));

mh = math.round(100*mh_i)/100;

Thi = Tho + Q/(mh*Cph);

data = {
    params: { 
        mh: mh,
        mc: mc,
        Tho: Tho,
        Thi: Thi,
        Tci: Tci,
        Tco: Tco,
        Cph: Cph,
        rho1: rho1,
        sg1: sg1,
        Cpc: Cpc,
        rho2: rho2,
        sg2: sg2,
        fluidName1: fluidName1,
        fluidName2: fluidName2,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate
    },
    correct_answers: {
        Thi: Thi,
        Q: Q
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 4.2,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""gylcerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties,
    getFluidProperties
}","a heat exchanger exchanges energy between a hot fluid and a cold fluid. 
  the cold fluid with specific heat 4.2 j/g°c flows at a rate of 2.5 g/s. 
  
 the cold fluid enters the pipe at a temperature of 20°c and exits at 30°c.
 the hot fluid of specific gravity 3.8 j/g°c exits at the rate of 5 g/s with 80°c.


 how much heat (in j/s) was supplied to heat the cold fluid? 

 what is the temperature (in degrees °c ) of the hot fluid  entering the pipe?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat exchanger,Heat,Thm,"Heat,Temperature,Specificheat",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 100A, ME 241A","Specific Heat and Heat Transfer, Heat Transfer, Mass Flow Rate"
123,heatMixture,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat mixture"",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""heat"", ""temperature"",""specificheat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
  A {{params.materialName}} ball of diameter {{params.d}} {{params.unitsDiameter}} is heated to {{params.Ti}} {{params.unitsTemperature}} and is dropped into a bucket containing {{params.mw}} {{params.unitsMass}} of water at {{params.Tiw}} {{params.unitsTemperature}}. 
  The specific heat of {{params.materialName}} is {{params.Cp}} {{params.unitsCp}}. Its specific gravity is {{params.sg}}.
</p>
</pl-question-panel>

<p> What is the temperature {{params.unitsTemperature}} after equilibrium is reached? </p>
<pl-number-input answers-name=""Tf"" comparison=""sigfig"" digits=""3"" label=""Tf  (in {{params.unitsTemperature}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F""
        }
    }
    
    unitSel = 0;
  //  unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


materialProperties = props.materialProperties;
matKeys = Object.keys(materialProperties);
numMats = matKeys.length;
matIndex = math.randomInt(0,numMats);
materialName = matKeys[matIndex];
matprop = props.getMaterialProperties(materialName, unitSel);

Cp = matprop.Cp;
rho = matprop.rho;
Cpw = 4.2;
sg = matprop.sg;

if (unitSel === 0){
    rd  = 10*math.randomInt(5,15);
    r = rd/1000;
    vol = 4/3*math.pi*r*r*r;
    mm = rho*vol;
  //  mm = 0.5*math.randomInt(2,11);
    Ti = 4*math.randomInt(50,100);
    Tiw = math.randomInt(10,30);
    Tf = math.randomInt(40, 90);
    mw = math.round(100*mm*Cp*(Ti - Tf)/(Cpw*(Tf-Tiw)))/100;
    Tf = (mm*Cp*Ti + mw*Cpw*Tiw)/(mm*Cp + mw*Cpw);

} else {

}


data = {
    params: { 
        d: rd*2,
        Ti: Ti,
        Tiw: Tiw,
        Tf: Tf,
        mw: mw,
        mm: mm,
        rho: rho,
        Cp: Cp,
        sg: sg,
        materialName: materialName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsDiameter: unitsDiameter
    },
    correct_answers: {
        Tf: Tf
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));
    

    if (unitSel === 0) {
        rho = 1000*mat.sg;
        mat.rho = rho;
    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
       rho = 62.4*mat.sg;
       mat.rho = rho;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties
}","a steel ball of diameter 5 cm is heated to 100°c and is dropped into a bucket containing 2 kg of water at 20°c. 
the specific heat of steel is 0.45 j/g°c. its specific gravity is 7.8.

what is the temperature °c after equilibrium is reached?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat mixture,Heat,Thm,"Heat,Temperature,Specificheat",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 241A","Heat Transfer, Specific Heat and Heat Transfer"
124,heatPhaseChange,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat "",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""heat"", ""temperature"",""specificheat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
A {{params.m}} {{params.unitsMass}} block of ice at temperature {{params.Ti}}  {{params.unitsTemperature}} is supplied heat so that the final temperature is {{params.Tf}}  {{params.unitsTemperature}}. The heat is supplied at constant atmospheric pressure. 
</p>
</pl-question-panel>

<p> How much heat was supplied to heat the block of ice? </p>
<pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Q  (in {{params.unitsHeat}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F""
        }
    }
    
    unitSel = 0;
    //unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


materialProperties = props.materialProperties;
matKeys = Object.keys(materialProperties);
numMats = matKeys.length;
matIndex = math.randomInt(0,numMats);
materialName = matKeys[matIndex];
matprop = props.getMaterialProperties(materialName, unitSel);

Cp = matprop.Cp;

m = math.randomInt(1,20);

Ti = math.randomInt(-30,0);


option = math.randomInt(0,2)

waterprops = props.waterProperties[""si""];

if ( option === 0) {
Tf = math.randomInt(20,100);
Q = m*(waterprops.Cpice*(0-Ti) + waterprops.hfus + waterprops.Cp*(Tf - 0));
}
else{
    Tf = math.randomInt(101, 200);
    Q = m*(waterprops.Cpice*(0-Ti) + waterprops.hfus + waterprops.Cp*(100) + waterprops.hvap + waterprops.Cpsteam*(Tf-100));
}






data = {
    params: { 
        m: m,
        Ti: Ti,
        Tf: Tf,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat
    },
    correct_answers: {
        Q: Q
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

let waterProperties ={
    ""si"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 4.2,
        ""Tfreeze"": 0,
        ""Tboil"": 100,
        ""Cpice"": 2,
        ""Cpsteam"": 2,
        ""hfus"": 340,
        ""hvap"": 2270
    },
    ""uscs"": {
        ""sg"": 1,
        ""mu"": 0.00002088,
        ""Cp"": 1,
        ""Tfreeze"": 32,
        ""Tboil"": 212,
        ""Cpice"": 0.4777,
        ""Cpsteam"":0.4777,
        ""hfus"": 144,
        ""hvap"": 970

    }

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    waterProperties,
    getMaterialProperties
}","a 2 kg block of ice at temperature -10 degrees celsius is supplied heat so that the final temperature is 20 degrees celsius. the heat is supplied at constant atmospheric pressure.

how much heat was supplied to heat the block of ice?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat,Heat,Thm,"Heat,Temperature,Specificheat",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B, ME 241A",Specific Heat and Heat Transfer
125,heatPumpIdeal,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Carnot refrigerator "",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""secondlaw"", ""temperature"", ""power""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
An ideal heat pump extract {{params.Qc}} {{params.unitsHeatRate}} and delivers {{params.Qh}} {{params.unitsHeatRate}} to a hot reservoir maintained at {{params.Tmax}} {{params.unitsTemperature}}.</div>
</p>

</pl-question-panel>

<p> What is the  coefficient of performance of the heat pump? </p>
<pl-number-input answers-name=""cop"" comparison=""sigfig"" digits=""3"" label=""Coefficient of performance""></pl-number-input>
<p> What is the  lowest temperature (in {{params.unitsTemperature}}) that the heat pump could operate at? </p>
<pl-number-input answers-name=""Tmin"" comparison=""sigfig"" digits=""3"" label=""Minimum temperature ({{params.unitsTemperature}})""></pl-number-input>
<p> How much power (in {{params.unitsPower}}) needs to be supplied to the heat pump? </p>
<pl-number-input answers-name=""Pin"" comparison=""sigfig"" digits=""3"" label=""Input power (in {{params.unitsPower}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""heatRate"": ""kW""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""heatRate"": ""BTU/s""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsPower = units[unitSystems[unitSel]].power;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    convToAbs = 273;
    Tmax = math.randomInt(30,45);
    Tmin = math.randomInt(-20,-5);
    Qc = math.randomInt(1,20);

}
else {
    convToAbs = 540;
    Tmax = math.randomInt(85,110);
    Tmin = math.randomInt(0,25);
    Qc = math.randomInt(1,20);
}


cop = (Tmin+convToAbs)/(Tmax - Tmin);

Pin = Qc/cop;
Qh = Pin + Qc;
Qh = math.round(100*Qh)/100;

if (unitSel === 1){
    Pin = Pin*1000/(550);
}

data = {
    params: { 
        Tmin: Tmin,
        Tmax: Tmax,
        Qc: Qc,
        Qh: Qh,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsPower: unitsPower,
        unitsHeatRate: unitsHeatRate
    },
    correct_answers: {
        cop: cop,
        Pin: Pin,
        Tmin: Tmin
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties
}","an ideal heat pump extracts 5000 j of heat and delivers 8000 j of heat to a hot reservoir maintained at 300 k.

1. what is the coefficient of performance of the heat pump?
2. what is the lowest temperature (in k) that the heat pump could operate at?
3. how much power (in watts) needs to be supplied to the heat pump?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Carnot refrigerator,Heat,Thm,"Secondlaw,Temperature,Power",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 100B, ME 100A, ME 135",Refrigeration Cycles
126,heatWater,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat water"",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""heat"", ""temperature"",""specificheat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
  A pipe of diameter {{params.d}} {{params.unitsDiameter}} carries {{params.vdot}} {{params.unitsFlowRate}} of {{params.fluidName}}. 
  </p>
<p> The fluid enters the pipe at a temperature of {{params.Ti}} {{params.unitsTemperature}} and exits at {{params.Tf}} {{params.unitsTemperature}} </p>
 <p> The specific heat of {{params.fluidName}} is {{params.Cp}} {{params.unitsCp}}. Its specific gravity is {{params.sg}} </p>
  
</p>
</pl-question-panel>


<p> How much heat (in {{params.unitsHeatRate}}) was supplied to heat the fluid </p>
<pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Q  (in {{params.unitsHeatRate}})""></pl-number-input>
<p> What is the speed (in {{params.unitsSpeed}} ) of the fluid flowing in the pipe? </p>
<pl-number-input answers-name=""v"" comparison=""sigfig"" digits=""3"" label=""v  (in {{params.unitsSpeed}})""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""liters per min"",
            ""heatRate"": ""kW""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""gpm"",
            ""heatRate"": ""BTU/s""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop = props.getFluidProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg = fluidprop.sg;


if (unitSel === 0){
    d = 2*math.randomInt(5,20);
    vdotd = math.randomInt(4,16);
    vdot = vdotd/(60*1000);
    m = rho*vdot;
    A = math.pi*d*d*1e-6/4;
    v = vdot/A; 
    Ti = math.randomInt(5,20);
    Tf = math.randomInt(40,90);
} else {
    
    vdotd = math.randomInt(2,10);
    vdot = vdotd/450;
    m = rho*vdot;
    d = 0.125*math.randomInt(1,12);
    A = math.pi*d*d/(144*4);
    v = vdot/A;
    Ti = 2*math.randomInt(20,35);
    Tf = 2*math.randomInt(45,100);
}


Q = m*Cp*(Tf-Ti);

data = {
    params: { 
        d: d,
        vdot: vdotd,
        Ti: Ti,
        Tf: Tf,
        Cp: Cp,
        rho: rho,
        sg: sg,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsDiameter: unitsDiameter
    },
    correct_answers: {
        Q: Q,
        v: v
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 4.2
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9
    },
    ""glycerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties,
    getFluidProperties
}","a pipe of diameter 0.5 meters carries 10 cubic meters per second of water. 

the fluid enters the pipe at a temperature of 20 degrees celsius and exits at 40 degrees celsius. 

the specific heat of water is 4.18 joules per gram per degree celsius. its specific gravity is 1. 

1. how much heat (in joules) was supplied to heat the fluid? 
2. what is the speed (in meters per second) of the fluid flowing in the pipe?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat water,Heat,Thm,"Heat,Temperature,Specificheat",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 116B, ME 241A, ME 240A","Heat Transfer Area, Specific Heat and Heat Transfer, Mass Flow Rate"
127,gaussianElimination,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Gaussian elimination"",
    ""stem"":""Multiply two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""matrix"", ""equations""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Gaussian Elimination"",
            ""url"": ""https://youtu.be/IRm2VXdxiww""
        },
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Solving Algebraic Equations"",
            ""url"": ""https://youtu.be/WawDlPbK7Go""
        }]
}
","<pl-question-panel>
  <p>
  Consider the two matrices:
  </p>
  
  <p>
  ${\bf A} = <pl-matrix-latex params-name=""A"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  and 
  <p>
  ${\bf b} = <pl-matrix-latex params-name=""b"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  

  If $ \mathbf{A}x = \mathbf{b} $, what is $ x $? Express your answer in the form of a column vector.
  </p>
  </pl-question-panel>
  
  <pl-matrix-input answers-name=""x"" comparison=""sigfig"" digits={{params.sigfigs}} label=""$ x  =$""></pl-matrix-input>


",,,"import random, copy
import numpy as np


def forwardElimination(C):
    (nRows, nCols) = C.shape
   # print(C.dtype)
    C = C.astype('float32')
   # print(C.dtype)
    #print('nRows = ', nRows, ' nCols = ', nCols)
    status = False
    ca = []

    for i in range(0, nRows):
        pivot = C[i,i]
        
        if abs(pivot) < 1e-5:
     #       print('Pivot is zero: Need new matrix')
            return (status, C, ca)
    
        for k in range(i+1, nRows):
            fac = C[k,i]/pivot
      #      print('Factor = ', fac)
            C[k,:] = C[k,:] - fac*C[i,:]
       #     print('During elimination = ', C)
            step = { 'stepNum': i, 'A': C[:, 0:nRows-1].tolist(), 'b': C[:, nRows].tolist()}
            ca.append(step)

    status = True
    # print('After Elimination = ', C)
    return (status, C, ca)

def backSubstitution(C):
    (nRows, nCols) = C.shape
    sol = np.zeros((nRows,1))
    A = C[0:nRows, 0:nCols-1]
    B = C[0:nRows, nCols-1]
    #print('Before backward substitution ')
    #print('A = ', A)
    #print('B = ', B)

    for i in range(nRows-1,-1, -1):
        sol[i] = (B[i] - np.dot(A[i,:],sol))/A[i,i]
     #   print('Solution for step ', i, ' is ', sol)

    return sol

def generate():
    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    numVar = random.randint(2,4)
    x = np.random.randint(-4,5, size=(numVar,1))

    status = False

    while status == False:
        detA = 0
        while detA == 0:
            A = np.random.randint(-4,5, size=(numVar,numVar))
            detA = np.linalg.det(A)

        b = np.matmul(A,x)
        C = np.concatenate((A,b), axis = 1)
        status, C, ca = forwardElimination(C)

    sol = backSubstitution(C)

    # Put these two integers into data['params']
    data['params']['A'] = A.tolist()
    data['params']['b'] = b.tolist()
    data['params']['ca'] = ca

    Ag = C[:, 0:numVar]
    Bg = C[:, [numVar]]

    # Compute the sum of these two integers

    # Put the sum into data['correct_answers']
    data['correct_answers']['x'] = x.tolist()
    data['correct_answers']['Ag'] = Ag.tolist()
    data['correct_answers']['Bg'] = Bg.tolist()

    return data


# data = generate()
# print(data)",,"consider the two matrices:

  ${\bf a} = \begin{bmatrix} 2 & 4 \\ 1 & -3 \end{bmatrix}$
  
  and 
  
  ${\bf b} = \begin{bmatrix} 5 \\ -2 \end{bmatrix}$
  
  

  if $ \mathbf{a}x = \mathbf{b} $, what is $ x $? express your answer in the form of a column vector.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Gaussian elimination,Multiply two matrices,Linear algebra,"Matrix,Equations",,True,sundar@google.com,Num,1,,1.0,Python,"[{'type': 'video', 'name': 'video', 'title': 'Video: Gaussian Elimination', 'url': 'https://youtu.be/IRm2VXdxiww'}, {'type': 'video', 'name': 'video', 'title': 'Video: Solving Algebraic Equations', 'url': 'https://youtu.be/WawDlPbK7Go'}]",,,"ME 200, ME 201, ME 018B","Matrix Algebra, Matrix Inversion"
128,inverse3x3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Inverse of 3x3 matrix"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""matrix"", ""inverse""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/Zb5oQaVIgBU?t=184""
        }]
}
","<pl-question-panel>
  <p>
  Consider the matrix:
  </p>
  
  <p>
  ${\bf X} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  </pl-question-panel>

  <p> 
    Use LU decomposition to find the {{params.columnName}} column of the inverse of the matrix $ {\bf X} $?
  </p>
  <pl-matrix-input answers-name=""colX"" comparison=""sigfig"" digits={{params.sigfigs}} label=""{{params.columnName}} column =""></pl-matrix-input>



","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
//const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

let nRows = 3;

nElements = nRows*nRows;

let dX = 0;
let x;
let X;

while ( dX === 0) {

 x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));

X = math.reshape(x, [nRows, nRows]);

dX = math.det(X);

}

invX = math.inv(X);

n = math.randomInt(0,3);
let columnName;
if ( n === 0) {
    columnName = ""first"";
    colX = math.column(invX,0);
} else if (n === 1) {
    columnName = ""second"";
    colX = math.column(invX,1);
} else if (n === 2) {
    columnName = ""third"";
    colX = math.column(invX,2);
}

data = {
    params: { 
        X : X,
        nRows: nRows,
        columnName: columnName
    },
    correct_answers: {
        colX: colX
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"consider the matrix:

${\bf x} = $

use lu decomposition to find the ""columnname"" column of the inverse of the matrix $ {\bf x} $?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Inverse of 3x3 matrix,Add two matrices,Linear algebra,"Addition,Matrix,Inverse",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/Zb5oQaVIgBU?t=184'}]",,,"ME 200, ME 201",Matrix Inversion
129,luDecomposition,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""LU Decomposition"",
    ""stem"":""Multiply two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""matrix"", ""equations"", ""algebraic systems""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 2,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python"",
    ""stepType"": ""iterative"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/btE7E24wUWI?t=136""
        }]
}
","<pl-question-panel>
  <p>
  Consider the  matrix:
  </p>
  <p>
  $ \mathbf{A} = <pl-matrix-latex params-name=""A"" digits={{params.nDigits}}></pl-matrix-latex> $
  </p>
  
 <p> 
  Perform LU decomposition with partial pivoting at each step.   
  </p>
  <p>
    Write down the permutation matrix (P), lower triangular matrix (L) and upper triangular matrix (U) at each step. 
  </p>
  </pl-question-panel>

  <pl-static-text name=""stepNumber""> <h4> Iteration 1 </h4> </pl-static-text>
  
  <pl-matrix-input answers-name=""P"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf P} =$""></pl-matrix-input>
  <pl-matrix-input answers-name=""L"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf L} =$""></pl-matrix-input>
  <pl-matrix-input answers-name=""U"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf U} =$""></pl-matrix-input>


",,,"import random, copy
import numpy as np
import scipy as sp


def forwardElimination(C):
    (nRows, nCols) = C.shape
   # print(C.dtype)
    C = C.astype('float32')
   # print(C.dtype)
   # print('nRows = ', nRows, ' nCols = ', nCols)
   
    ca = []

    L = np.zeros([nRows, nRows])
    P = np.identity(nRows)

    for i in range(0, nRows-1):
        pivot = C[i,i]
        
        # if abs(C[i,i]) < 1e-5:
        #     print('Pivot is zero: Need new matrix')
        maxIndex = np.argmax(np.absolute(C[i:nRows +1, i]))
    #    print('Max index = ', maxIndex)
        C[[i, maxIndex + i],:] = C[[maxIndex + i, i],:]
        P[[i,maxIndex +i],:] = P[[maxIndex + i, i],:]
        L[[i,maxIndex +i],:] = L[[maxIndex + i, i],:]
    #    print('C after swapping is ', C)
        pivot = C[i,i]
        for k in range(i+1, nRows):
            fac = C[k,i]/pivot
    #        print('Factor = ', fac)
            C[k,:] = C[k,:] - fac*C[i,:]
    #        print('During elimination = ', C)
            L[k,i] = fac

        L1 = L + np.identity(nRows)
        if (i == nRows -1):
            L = L + np.identity(nRows)

        step = {'stepNum': i, 'P': P.tolist(), 'L': L1.tolist(), 'U': C.tolist()}
        ca.append(step)

    # print('After Elimination = ', C)
    return (P,L,C, ca)

def backSubstitution(C):
    (nRows, nCols) = C.shape
    sol = np.zeros((nRows,1))
    A = C[0:nRows, 0:nCols-1]
    B = C[0:nRows, nCols-1]
    # print('Before backward substitution ')
    # print('A = ', A)
    # print('B = ', B)

    for i in range(nRows-1,-1, -1):
        sol[i] = (B[i] - np.dot(A[i,:],sol))/A[i,i]
    #    print('Solution for step ', i, ' is ', sol)

    return sol

def generate():
    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    numVar = random.randint(3,3)
    x = np.random.randint(-4,5, size=(numVar,1))

    status = False

   
    detA = 0
    while detA == 0:
        A = np.random.randint(-4,5, size=(numVar,numVar))
        detA = np.linalg.det(A)
        b = np.matmul(A,x)
        # C = np.concatenate((A,b), axis = 1)
        # status, C = forwardElimination(C)

    P, L, U, ca = forwardElimination(A)

    P1, L1, U1, = sp.linalg.lu(A)

    A1 = np.matmul(L,U)
    A2 = np.matmul(P,A)

    # print('P = ', P, 'L = ', L, ' U = ', U)
    # print('P1 = ', P1, 'L1 = ', L1, ' U1 = ', U1)

    # A = np.array([ [0,1,3], [2,1,1],[3,0,1]])
    # b = np.transpose([[5,3,5]])
    # C = np.concatenate((A,b), axis = 1)
    # print(C)
    # status, C = forwardElimination(C)

    # sol = backSubstitution(C)

    # Put these two integers into data['params']
    data['params']['A'] = A.tolist()
    data['params']['b'] = b.tolist()
    data['steps'] = ca
    data['correct_answers'] = ca[0]

    # print('Correct answers = ', ca[0])

    # Compute the sum of these two integers

    # Put the sum into data['correct_answers']
    data['correct_answers']['P'] = ca[0]['P']
    data['correct_answers']['L'] = ca[0]['L']
    data['correct_answers']['U'] = ca[0]['U']

    return data


# data = generate()
# print(data)",,"consider the matrix:

$ \mathbf{a} =  $

perform lu decomposition with partial pivoting at each step.

write down the permutation matrix (p), lower triangular matrix (l), and upper triangular matrix (u) at each step.

iteration 1:",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Lu decomposition,Multiply two matrices,Linear algebra,"Matrix,Equations,Algebraic systems",,True,sundar@google.com,Num,2,,1.0,Python,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/btE7E24wUWI?t=136'}]",Iterative,,"ME 200, ME 201",Matrix Inversion
130,luDecompositionNoPivot,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""LU Decomposition without pivoting"",
    ""stem"":""Multiply two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""matrix"", ""equations""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/WawDlPbK7Go""
        }]
}
","<pl-question-panel>
  <p>
  Consider the two matrices:
  </p>
  
  <p>
  ${\bf A} = <pl-matrix-latex params-name=""A"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  and 
  <p>
  ${\bf b} = <pl-matrix-latex params-name=""b"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  

  Use LU Decomposition without pivoting to solve the system $ Ax = b $. Since $ A = LU $, $ LUx = b $. Setting $ Ux = y $, gives  $ Ly = b $. 
  Identify the matrices L and U and the column vectors $ x $ and $ y $
  </p>
  <p></p>
  </pl-question-panel>
  
  <p> Lower triangular matrix $ L $ </p>
  <pl-matrix-input answers-name=""L"" comparison=""sigfig"" digits={{params.sigfigs}} label=""$ L  =$""></pl-matrix-input>
  <p> Upper triangular matrix $ U $ </p>
  <pl-matrix-input answers-name=""U"" comparison=""sigfig"" digits={{params.sigfigs}} label=""$ U  =$""></pl-matrix-input>
  <p> Intermediate solution vector $ y $ </p>
  <pl-matrix-input answers-name=""y"" comparison=""sigfig"" digits={{params.sigfigs}} label=""$ y  =$""></pl-matrix-input>
  <p> Solution vector $ x$ </p>
  <pl-matrix-input answers-name=""x"" comparison=""sigfig"" digits={{params.sigfigs}} label=""$ x  =$""></pl-matrix-input>


",,,"import random, copy
import numpy as np


def forwardElimination(C):
    (nRows, nCols) = C.shape
    C = C.astype('float32')
    status = False
    ca = []
    L = np.zeros([nRows, nRows])

    for i in range(0, nRows):
        pivot = C[i,i]
        
        if abs(pivot) < 1e-5:
     #       print('Pivot is zero: Need new matrix')
            return (status, C, ca, L)
    
        for k in range(i+1, nRows):
            fac = C[k,i]/pivot
      #      print('Factor = ', fac)
            C[k,:] = C[k,:] - fac*C[i,:]
            L[k,i] = fac
       #     print('During elimination = ', C)

        if (i == nRows -1):
            L = L + np.identity(nRows)

        step = { 'stepNum': i, 'A': C[:, 0:nRows-1].tolist(), 'b': C[:, nRows].tolist()}
        ca.append(step)

    status = True
    # print('After Elimination = ', C)
    return (status, C, ca, L)

def backSubstitution(C):
    (nRows, nCols) = C.shape
    sol = np.zeros((nRows,1))
    A = C[0:nRows, 0:nCols-1]
    B = C[0:nRows, nCols-1]
    #print('Before backward substitution ')
    #print('A = ', A)
    #print('B = ', B)

    for i in range(nRows-1,-1, -1):
        sol[i] = (B[i] - np.dot(A[i,:],sol))/A[i,i]
     #   print('Solution for step ', i, ' is ', sol)

    return sol

def generate():
    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    numVar = random.randint(2,4)
    x = np.random.randint(-4,5, size=(numVar,1))

    status = False

    while status == False:
        detA = 0
        while detA == 0:
            A = np.random.randint(-4,5, size=(numVar,numVar))
            detA = np.linalg.det(A)

        b = np.matmul(A,x)
        C = np.concatenate((A,b), axis = 1)
        status, C, ca,L = forwardElimination(C)

    sol = backSubstitution(C)
    y = np.linalg.solve(L, b)


    # Put these two integers into data['params']
    data['params']['A'] = A.tolist()
    data['params']['b'] = b.tolist()
    data['params']['ca'] = ca

    Ag = C[0:numVar, 0:numVar]
    Bg = C[0:numVar, numVar]

    # Compute the sum of these two integers

    # Put the sum into data['correct_answers']
    data['correct_answers']['L'] = L.tolist()
    data['correct_answers']['U'] = Ag.tolist()
    data['correct_answers']['y'] = y.tolist()
    data['correct_answers']['x'] = x.tolist()

    return data


# data = generate()
# print(data)",,"consider the two matrices:

  ${\bf a} = \begin{bmatrix} 2 & 1 \\ 3 & 4 \end{bmatrix}$
  
  and 
  
  ${\bf b} = \begin{bmatrix} 5 \\ 6 \end{bmatrix}$
  
  

  use lu decomposition without pivoting to solve the system $ ax = b $. since $ a = lu $, $ lux = b $. setting $ ux = y $, gives  $ ly = b $. 
  identify the matrices l and u and the column vectors $ x $ and $ y $
  


 lower triangular matrix $ l = \begin{bmatrix} 1 & 0 \\ \frac{3}{2} & 1 \end{bmatrix}$ 

 upper triangular matrix $ u = \begin{bmatrix} 2 & 1 \\ 0 & \frac{5}{2} \end{bmatrix}$ 

 intermediate solution vector $ y = \begin{bmatrix} 5 \\ -\frac{3}{2} \end{bmatrix}$ 

 solution vector $ x = \begin{bmatrix} 2 \\ -1 \end{bmatrix}$",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Lu decomposition without pivoting,Multiply two matrices,Linear algebra,"Matrix,Equations",,True,sundar@google.com,Num,1,,1.0,Python,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/WawDlPbK7Go'}]",,,"ME 200, ME 201",Matrix Inversion
131,determinantMatrix,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Matrix determinant"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/KM6Rm7D1ttA""
        }]

}
","<pl-question-panel>
  <p>
  Consider the matrix:
  </p>
  
  <p>
  ${\bf X} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  

  
  </pl-question-panel>

  <p> 
    What is the determinant of the matrix $ {\bf X} $?
  </p>
  <pl-number-input answers-name=""detX"" comparison=""sigfig"" digits=""3"" label=""det(X)""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

let nRows = math.randomInt(2,4);

nElements = nRows*nRows;

let x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));

let X = math.reshape(x, [nRows, nRows]);

dX = math.det(X);

data = {
    params: { 
        X : X,
        nRows: nRows
    },
    correct_answers: {
        detX: dX
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider the matrix:

${\bf x} = \begin{bmatrix}
1 & 2 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9 \\
\end{bmatrix}$

what is the determinant of the matrix $ {\bf x} $?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Matrix determinant,Add two matrices,Linear algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/KM6Rm7D1ttA'}]",,,ME 200,Matrix Algebra
132,inverse2x2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Inverse of 2x2 matrix"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/Zb5oQaVIgBU""
        }]
}
","<pl-question-panel>
  <p>
  Consider the matrix:
  </p>
  
  <p>
  ${\bf X} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  

  
  </pl-question-panel>

  <p> 
    What is the inverse of the matrix $ {\bf X} $?
  </p>
  <pl-matrix-input answers-name=""invX"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf X}^{-1} =$""></pl-matrix-input>



","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

let nRows = math.randomInt(2,3);

nElements = nRows*nRows;

let dX = 0;
let x;
let X;

while ( dX === 0) {

 x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));

X = math.reshape(x, [nRows, nRows]);

dX = math.det(X);

}

invX = math.inv(X);

data = {
    params: { 
        X : X,
        nRows: nRows
    },
    correct_answers: {
        detX: dX,
        invX: invX
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider the matrix:

${\bf x} = $

what is the inverse of the matrix $ {\bf x} $?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Inverse of 2x2 matrix,Add two matrices,Linear algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/Zb5oQaVIgBU'}]",,,ME 200,"Matrix Inversion, Matrix Algebra"
133,multiply2Matrices,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Multiply two matrices"",
    ""stem"":""Multiply two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/btE7E24wUWI?t=215""
        }]
}
","<pl-question-panel>
  <p>
  Consider the two matrices:
  </p>
  
  <p>
  ${\bf X} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  and 
  <p>
  ${\bf Y} = <pl-matrix-latex params-name=""Y"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  

  What is the matrix ${\bf Z} = {\bf X}  {\bf Y}$?
  </p>
  </pl-question-panel>
  
  <pl-matrix-input answers-name=""Z"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf Z} =$""></pl-matrix-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

console.log('BASE DIR IS = ', __basedir);

let nRows1 = math.randomInt(2,4);
let nCols1 = math.randomInt(1,4);
let nCols2 = math.randomInt(1,5);

nElements1 = nRows1*nCols1;
nElements2 = nCols1*nCols2;

let x = Array.from({length: nElements1}, ()=> math.randomInt(-5,5));
let y = Array.from({length: nElements2}, ()=> math.randomInt(-5,5));



let X = math.reshape(x, [nRows1, nCols1]);
let Y = math.reshape(y, [nCols1, nCols2]);

Z = math.multiply(X,Y);


data = {
    params: { 
        X : X,
        Y: Y,
        nRows1: nRows1,
        nCols1: nCols1,
        nCols2: nCols2
    },
    correct_answers: {
        Z: Z
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider the two matrices:

  ${\bf x} = \begin{bmatrix} 2 & -1 \\ 3 & 4 \end{bmatrix}$
  
  and 
  
  ${\bf y} = \begin{bmatrix} 5 & 2 \\ -1 & 3 \end{bmatrix}$
  
  

  what is the matrix ${\bf z} = {\bf x}  {\bf y}$?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Multiply two matrices,Multiply two matrices,Linear algebra,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/btE7E24wUWI?t=215'}]",,,ME 200,Matrix Algebra
134,scalarMultiply,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Scalar multiplication of matrix"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""matrix""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/btE7E24wUWI?t=174""
        }]
}
","<pl-question-panel>
  <p>
  Consider the matrix:
  </p>

  <p>
  ${\bf X} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  

  What is the matrix $ \alpha {\bf X}$ if $ \alpha = {{params.alpha}} $? </p>
  </pl-question-panel>
  
  <pl-matrix-input answers-name=""Y"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf X}^{T} =$""></pl-matrix-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');
const util = require('node:util');

const generate = () => {

let nRows = math.randomInt(2,5);
let nCols = math.randomInt(1,4);

nElements = nRows*nCols;

let x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));

let X = math.reshape(x, [nRows, nCols]);

let alpha = math.randomInt(-5,6);

Y = math.multiply(alpha,X);



data = {
    params: { 
        X : X,
        alpha: alpha,
        nRows: nRows,
        nCols: nCols
    },
    correct_answers: {
        Y:Y
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"consider the matrix:

${\bf x} = $

what is the matrix $ \alpha {\bf x}$ if $ \alpha = 2.5 $?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Scalar multiplication of matrix,Add two matrices,Linear algebra,"Addition,Matrix",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/btE7E24wUWI?t=174'}]",,,,Matrix Algebra
135,transposeMatrix,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Transpose matrix"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""matrix""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/btE7E24wUWI""
        }]
}
","<pl-question-panel>
  <p>
  Consider the two matrices:
  </p>
  
  <p>
  ${\bf X} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  

  What is the matrix ${\bf X}^{T}$?
  </p>
  </pl-question-panel>
  
  <pl-matrix-input answers-name=""Xt"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf X}^{T} =$""></pl-matrix-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');
const util = require('node:util');

const generate = () => {

let nRows = math.randomInt(2,5);
let nCols = math.randomInt(1,4);

nElements = nRows*nCols;

let x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));

let X = math.reshape(x, [nRows, nCols]);
let Xt = math.transpose(X);
//let Xt = math.reshape(x, [nCols, nRows]);



data = {
    params: { 
        X : X,
        nRows: nRows,
        nCols: nCols
    },
    correct_answers: {
        Xt: Xt
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"consider the two matrices:

${\bf x} = \begin{bmatrix}
1 & 2 & 3 \\
4 & 5 & 6 \\
7 & 8 & 9 \\
\end{bmatrix}$

what is the matrix ${\bf x}^{t}$?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Transpose matrix,Add two matrices,Linear algebra,"Addition,Matrix",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/btE7E24wUWI'}]",,,,Matrix Algebra
136,dotProductN,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Dot product of vectors"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers"", ""vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/ONjX_-GusWA?t=141""
        }]
}
","<pl-question-panel>
  <p>
  Consider the two vectors:
  </p>
  
  <p>
  ${\bf x} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>

  and 
  <p>
  ${\bf y} = <pl-matrix-latex params-name=""Y"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  What is  $ {\bf x} \cdot {\bf y}$?
  </p>
  </pl-question-panel>

  <pl-number-input answers-name=""Z"" comparison=""sigfig"" digits=""3"" label=""Dot Product =""></pl-number-input>


  
  


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

console.log('BASE DIR IS = ', __basedir);

let nRows = math.randomInt(2,6);

let x = Array.from({length: nRows}, ()=> math.randomInt(-5,5));
let y = Array.from({length: nRows}, ()=> math.randomInt(-5,5));

let Z = math.dot(x,y);

let X = math.reshape(x, [1, nRows]);
let Y = math.reshape(y, [1, nRows]);



data = {
    params: { 
        X :X,
        Y: Y,
        nRows: nRows
    },
    correct_answers: {
        Z: Z
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"Consider the two vectors: x = [3, 4, 5] and y = [1, 2, 3]  What is the dot product of x and y?  Determine:  Dot Product value.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Dot product of vectors,Add two matrices,Linear algebra,"Addition,Numbers,Vectors",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/ONjX_-GusWA?t=141'}]",,,ME 200,Vector Analysis
137,vectorNAdd,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Addition of vectors"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers"", ""vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/ONjX_-GusWA""
        }]
}
","<pl-question-panel>
  <p>
  Consider the two vectors:
  </p>
  
  <p>
  ${\bf x} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>

  and 
  <p>
  ${\bf y} = <pl-matrix-latex params-name=""Y"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  
  What is  $ {\bf x} + {\bf y}$?
  </p>
  </pl-question-panel>

  <pl-matrix-input answers-name=""Z"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf Z} =$""></pl-matrix-input>


  
  


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

console.log('BASE DIR IS = ', __basedir);

let nRows = math.randomInt(2,6);

let x = Array.from({length: nRows}, ()=> math.randomInt(-5,5));
let y = Array.from({length: nRows}, ()=> math.randomInt(-5,5));

let z = math.add(x,y);

let X = math.reshape(x, [1, nRows]);
let Y = math.reshape(y, [1, nRows]);
let Z = math.reshape(z, [1, nRows]);



data = {
    params: { 
        X :X,
        Y: Y,
        nRows: nRows
    },
    correct_answers: {
        Z: Z
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"Consider the two vectors:

x = [a1, a2, a3]
and
y = [b1, b2, b3]

What is x + y?

Answer:
Z = [a1+b1, a2+b2, a3+b3]",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Addition of vectors,Add two matrices,Linear algebra,"Addition,Numbers,Vectors",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/ONjX_-GusWA'}]",,,"ME 018B, ME 200",Vector Analysis
138,vectorNLength,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Length of vectors"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers"", ""vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/ONjX_-GusWA""
        }]
}
","<pl-question-panel>
  <p>
  Consider the  vector:
  </p>
  
  <p>
  ${\bf x} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>

 
  
  What is the length of vector ${\bf x} $?
  </p>
  </pl-question-panel>

  <pl-number-input answers-name=""xlen"" comparison=""sigfig"" digits=""3"" label=""Length of vector =""></pl-number-input>


  
  


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

console.log('BASE DIR IS = ', __basedir);

let nRows = math.randomInt(2,6);

let x = Array.from({length: nRows}, ()=> math.randomInt(-5,5));


let xlen = math.sqrt(math.dot(x,x));


let X = math.reshape(x, [1, nRows]);


data = {
    params: { 
        X :X,
        nRows: nRows
    },
    correct_answers: {
        xlen: xlen
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,Consider the vector: � = [some values] x=[some values]  What is the length of vector  � x?  Determine:  Length of vector  � x,8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Length of vectors,Add two matrices,Linear algebra,"Addition,Numbers,Vectors",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/ONjX_-GusWA'}]",,,ME 200,Vector Analysis
139,vectorNUnitVectorLength,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Unit vectors"",
    ""stem"":""Add two matrices"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""addition"", ""numbers"", ""vectors""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/ONjX_-GusWA""
        }]
}
","<pl-question-panel>
  <p>
  Consider the  vector:
  </p>
  
  <p>
  ${\bf x} = <pl-matrix-latex params-name=""X"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>


  
  What is the length of vector ${\bf x} $?
  </p>
  </pl-question-panel>

  <pl-number-input answers-name=""xlen"" comparison=""sigfig"" digits=""3"" label=""Length of vector =""></pl-number-input>
  <pl-matrix-input answers-name=""uX"" comparison=""sigfig"" digits={{params.sigfigs}} label=""${\bf \hat{x}} =$""></pl-matrix-input>


  
  


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../../helpers/mathhelper.js');
const mathhelper = require(__basedir + '/helpers/mathhelper.js');

const util = require('node:util');

const generate = () => {

console.log('BASE DIR IS = ', __basedir);

let nRows = math.randomInt(2,6);

let x = Array.from({length: nRows}, ()=> math.randomInt(-5,5));


let xlen = math.sqrt(math.dot(x,x));


let X = math.reshape(x, [1, nRows]);
uX = math.multiply(X,1/xlen);


data = {
    params: { 
        X :X,
        nRows: nRows
    },
    correct_answers: {
        xlen: xlen,
        uX: uX
    },
    nDigits: 2,
    sigfigs: 2
}
util.inspect.defaultOptions.depth = null;
console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,Consider the vector: � = [specific matrix values] x=[specific matrix values]  What is the length of vector  � x? Find the unit vector  � ^ x ^  .,8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Unit vectors,Add two matrices,Linear algebra,"Addition,Numbers,Vectors",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/ONjX_-GusWA'}]",,,ME 200,"Matrix Algebra, Vector Analysis"
140,moment2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""2D moments"",
    ""stem"":""moments"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""force"", ""moments""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
A force of magnitude {{params.Fmag}} {{params.unitsForce}} has its origin at ({{params.x1}}, {{params.y1}}) {{params.unitsDist}} and ends at ({{params.x2}},{{params.y2}}) {{params.unitsDist}}. 
<p>
What are the components (in {{params.unitsMoment}}) of the moment of the force about the origin? Use the convention that counterclockwise moments are positive. 
</pl-question-panel>


<pl-number-input answers-name=""Mz"" comparison=""sigfig"" digits=""3"" label=""Moment (in {{params.unitsMoment}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {
    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""cm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""moment"": ""N-cm""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""inch"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""moment"": ""lb-in""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsMoment = units[unitSystems[unitSel]].moment;

let x1 = 0;
let x2 = 0;
let y1 = 0;
let y2 = 0;
let z1 = 0;
let z2 = 0;

Fmag = 5*math.randomInt(10,50);


while (x1 === 0 && x2 === 0 && y1 === 0 && y2 === 0 && z1 === 0 && z2 === 0) {
    x1 = math.randomInt(-10,10);
    y1 = math.randomInt(-10,10);
    x2 = math.randomInt(-10,10);
    y2 = math.randomInt(-10,10);
    z1 = math.randomInt(-10,10);
    z2 = math.randomInt(-10,10);
}

z1 = 0;
z2 = 0;

x = x2 - x1;
y = y2 - y1;
z = z2 - z1;
len = math.sqrt(x*x + y*y + z*z);

ux = x/len;
uy = y/len;
uz = z/len;

unitVec = [ux,uy,uz];
F = math.multiply(Fmag, unitVec);

r = [x1,y1,z1];

M = math.cross(r,F);



data = {
    params: { 
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        z1: z1,
        z2: z2,
        Fmag: Fmag,
        unitsForce: unitsForce,
        unitsMoment: unitsMoment,
        unitsDist: unitsDist
    },
    correct_answers: {
        Fx: F[0],
        Fy: F[1],
        Fz: F[2],
        Mx: M[0],
        My: M[1],
        Mz: M[2]
    },
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"a force of magnitude 50 n has its origin at (2, 3) m and ends at (5, 7) m. 

what are the components (in n·m) of the moment of the force about the origin? use the convention that counterclockwise moments are positive.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,2d moments,Moments,Linear algebra,"Force,Moments",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,"Distributed Forces, Newton's Second Law of Motion, Statics and Mechanics"
141,moment3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""3D moments"",
    ""stem"":""moments"",
    ""topic"": ""Linear algebra"",
    ""tags"": [""force"", ""moments""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
A force of magnitude {{params.Fmag}} {{params.unitsForce}} has its origin at ({{params.x1}}, {{params.y1}},{{params.z1}}) {{params.unitsDist}} and ends at ({{params.x2}},{{params.y2}},{{params.z2}}) {{params.unitsDist}}. 
<p>
What are the components (in {{params.unitsMoment}}) of the moment of the force about the origin?
</pl-question-panel>

<pl-number-input answers-name=""Mx"" comparison=""sigfig"" digits=""3"" label=""X-component""></pl-number-input>
<pl-number-input answers-name=""My"" comparison=""sigfig"" digits=""3"" label=""Y-component""></pl-number-input>
<pl-number-input answers-name=""Mz"" comparison=""sigfig"" digits=""3"" label=""Z-component""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {
    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""cm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""moment"": ""N-cm""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""inch"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""moment"": ""lb-in""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsMoment = units[unitSystems[unitSel]].moment;

let x1 = 0;
let x2 = 0;
let y1 = 0;
let y2 = 0;
let z1 = 0;
let z2 = 0;

Fmag = 5*math.randomInt(10,50);


while (x1 === 0 && x2 === 0 && y1 === 0 && y2 === 0 && z1 === 0 && z2 === 0) {
    x1 = math.randomInt(-10,10);
    y1 = math.randomInt(-10,10);
    x2 = math.randomInt(-10,10);
    y2 = math.randomInt(-10,10);
    z1 = math.randomInt(-10,10);
    z2 = math.randomInt(-10,10);
}

x = x2 - x1;
y = y2 - y1;
z = z2 - z1;
len = math.sqrt(x*x + y*y + z*z);

ux = x/len;
uy = y/len;
uz = z/len;

unitVec = [ux,uy,uz];
F = math.multiply(Fmag, unitVec);

r = [x1,y1,z1];

M = math.cross(r,F);



data = {
    params: { 
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        z1: z1,
        z2: z2,
        Fmag: Fmag,
        unitsForce: unitsForce,
        unitsMoment: unitsMoment,
        unitsDist: unitsDist
    },
    correct_answers: {
        Fx: F[0],
        Fy: F[1],
        Fz: F[2],
        Mx: M[0],
        My: M[1],
        Mz: M[2]
    },
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"a force of magnitude 50 n has its origin at (2, 3, 4) meters and ends at (5, 6, 7) meters. 

what are the components (in n·m) of the moment of the force about the origin?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,3d moments,Moments,Linear algebra,"Force,Moments",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,"3D Rigid Body Mechanics, Distributed Forces"
142,moment4,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""simple moment"",
	""stem"": ""moment about point"", 
    ""topic"": ""statics"",
    ""tags"": [""basic"", ""vector"", ""force"", ""moment""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel>
    <pl-figure file-name=""Picture2.png""></pl-figure>
    <p> Consider the force $ \mathbf {F}= {{params.x1}} {{params.unitsForce}}$ acting at point B. </p>
    <p>If the distance from point A to point B is $ \mathbf {D}={{params.y1}} {{params.unitsDist}}$ and if the angle between the force and the negative y-axis is $ \theta={{params.x2}}$ (degrees).</p>
    <p> Compute the moment about point A in {{params.unitsForce}}-{{params.unitsDist}}</p>
  
  </pl-question-panel>
  
  <pl-number-input answers-name=""moment"" comparison=""sigfig"" digits=""3"" label=""Moment about point A=""></pl-number-input>
  ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;


	x1 = math.randomInt(50,500);//the force
	y1 = math.randomInt(10,50);//distance between a-b
	x2 = math.randomInt(20,40);//angle theta
    
	Rad=x2*(Math.PI/180)

    moment=y1*x1*math.cos(Rad)

data = {
    params: {x1: x1, y1: y1,x2: x2,unitsForce:unitsForce,unitsDist:unitsDist},
    correct_answers: { moment: moment},
    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"consider the force $ \mathbf {f}= 10 n$ acting at point b. 
if the distance from point a to point b is $ \mathbf {d}= 5 m$ and if the angle between the force and the negative y-axis is $ \theta= 45$ degrees.
 compute the moment about point a in n-m.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Simple moment,Moment about point,Statics,"Basic,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 103,"Distributed Forces, Newton's Second Law of Motion"
143,firstDerivatives,"{
    ""uuid"": ""2f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Compute first numerical derivatives"",
	""stem"": ""Compute first numerical derivatives"", 
    ""topic"": ""Numerical methods"",
    ""tags"": [""basic"", ""vector"", ""algebra"", ""operations"", ""addition"", ""subtraction"", ""calculus""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript"",
	""resources"": [
		{
			""type"": ""video"",
			""name"": ""video"",
			""title"": ""Video"",
			""url"": ""https://youtu.be/3Em_W_dtp2c""
		}
		]
}
","<pl-question-panel>
  <p> Consider the following polynomial function $ f(x) =  {{params.poly}}$ </p>
  <p> Compute the {{params.option}} evaluated at $ x = {{params.x}} $ with a stepsize of {{params.h}} </p>
</pl-question-panel>

<pl-number-input answers-name=""calculated"" comparison=""sigfig"" digits=""3"" label=""value=""></pl-number-input>
<pl-number-input answers-name=""percent_error"" comparison=""sigfig"" digits=""3"" label=""percent error=""></pl-number-input>","const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');
// Polynomial Generator 
function random_poly(degree_range, const_range) {
    degree = Math.round(math.random(degree_range[0], degree_range[1]));
    polynomial = ''
    for (let i = 0; i = degree + 1; i++) {
        // creates constant
        constant = Math.round(math.random(const_range[0],const_range[1]));

        // Generates part of the polynomial
        // Functions can't have 0x^n as a value so I need to remove it 
        if (constant == 0) {
            poly = `x^${degree}`;
        }
        else {
            poly = `${constant}x^${degree}`;
        }
        degree = degree - 1

        // Combines all parts of the polynomial
        if (constant >= 0) {
            polynomial = polynomial + ""+"" + poly
        }
        else {
            polynomial = polynomial + poly
        }
    }
    return polynomial
}

const generate = () =>{
	const degree_range = [2,3]
	const const_range = [-20,20]
	val_list = [-10,10]
	h = 0.01
	a = Math.round(math.random(val_list[0], val_list[1]))
	
	
	poly = random_poly(degree_range,const_range)
	const fun = math.evaluate(`f(x) = ${poly}`)

	option= math.randomInt(0,3)
	

	switch(option){
		case 0:
			calculated = (fun(a+h)-fun(a))/h;
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Forward Derivative""
			break;
		case 1: 
			calculated = (fun(a) - fun(a-h))/h;
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Backward Derivative""
			break;
		case 2:
			foward_derivative = (fun(a+h)-fun(a))/h
			backward_derivative = (fun(a)-fun(a-h))/h
			calculated = (foward_derivative+backward_derivative)/2
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Central Derivative""
			break;
		case 3:
			calculated = (fun(a+2*h)-2*fun(a+h)+fun(a))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Forward Derivative""
			break;
		case 4:
			calculated = (fun(a-2*h)-2*fun(a-h)+fun(a))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Backward Derivative""
			break;
		case 5:
			calculated = (fun(a+h) -2*fun(a)+fun(a-h))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Center Derivative""
			break;
	}
	percent_error = math.abs((calculated - actual)/actual *100)
	data = {
		params: {
			poly: poly, 
			x: a,
			h: h,
			option: option_msg
		},
		correct_answers: {
			calculated: calculated,
			actual: actual,
			percent_error: percent_error},
	
		nDigits: 2,
		sigfigs:2
	}
	
	console.log(data);
	return data;
	
}

//generate();

module.exports = {
    generate,
}",,,,Consider the following polynomial function: � ( � ) = specific polynomial function f(x)=specific polynomial function  Compute the specific option (like derivative or integral) evaluated at  � = specific value x=specific value with a stepsize of a specific value.  Determine:  Calculated value. Percent error.,2f435c36-1126-43b0-aba5-627eeb2e10f9,Compute first numerical derivatives,Compute first numerical derivatives,Numerical methods,"Basic,Vector,Algebra,Operations,Addition,Subtraction,Calculus",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/3Em_W_dtp2c'}]",,,"ME 201, ME 118","Calculus, Error Analysis"
144,integrals,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Trapezoid integration"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Integration"",
    ""tags"": [""root"", ""algorithm""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""stepType"": ""none"",
	""resources"": [
	{
		""type"": ""video"",
		""name"": ""video"",
		""title"": ""Video"",
		""url"": ""https://youtu.be/n4W0IR_Zxag""
	}
	]
}
","<pl-question-panel>
    <p> Consider the following polynomial function \( f(x) = {{params.poly}} \).</p>
    <p> Compute the integral using the trapezoidal rule, evaluated from \( x = {{params.a}} \) to \( x = {{params.b}} \), with  \( n = {{params.n}} \) segments.</p>
</pl-question-panel>

<pl-number-input answers-name=""calculated"" comparison=""sigfig"" digits=""3"" label=""Result of trapezoidal integration ="" ></pl-number-input>
<pl-number-input answers-name=""actual"" comparison=""sigfig"" digits=""3"" label=""Analytical result  ="" ></pl-number-input>
<pl-number-input answers-name=""percent_error"" comparison=""sigfig"" digits=""3"" label=""Percent error ="" ></pl-number-input>


","const { randomInt } = require(""mathjs"");
const math = require(""mathjs"");
const Integral = require('sm-integral');

// Generates a random polynomial expression
function random_poly(degree_range, const_range) {
    // Check if degree_range and const_range have a length of at least 2
    if (degree_range.length < 2 || const_range.length < 2) {
        return 'Error: degree_range and const_range must have a length of at least 2.';
    }

    // Swap degree_range values if necessary
    if (degree_range[0] > degree_range[1]) {
        [degree_range[0], degree_range[1]] = [degree_range[1], degree_range[0]];
    }

    // Swap const_range values if necessary
    if (const_range[0] > const_range[1]) {
        [const_range[0], const_range[1]] = [const_range[1], const_range[0]];
    }

    // Generate a random degree within the specified degree_range
    let degree = randomInt(degree_range[0], degree_range[1]);
    let polynomial = '';

    // Generate the polynomial terms
    for (let i = 0; i = degree+1; i++) {
        // Generate a random constant within the specified const_range
        const constant = randomInt(const_range[0], const_range[1]);

        let poly;
        // Create the polynomial term based on the current degree and constant
        if (constant == 0) {
            poly = `x^${degree}`;
        } else if (degree === 0) {
            poly = `${constant}`;
        }
        else {
            poly = `${constant}x^${degree}`;
        }
        degree = degree - 1;

        // Combine the term with the existing polynomial expression
        if (constant >= 0) {
            polynomial += ""+"" + poly;
        } else {
            polynomial += poly;
        }
    }

    return polynomial;
}

// Generates a pair of random numbers with exclusion constraints
function randomNumberPairWithExclusion(min, max, range) {
  // Validate input
  if (min >= max) {
    throw new Error(""Error: min must be less than max."");
  }

  // Generate the range array from -range to range
  const int_range = generateRangeArray(-range, range);

  // Generate a random number 'a' within the specified min-max range
  const a = randomInt(min, max);

  // Generate the exclude list based on 'a' and the range
  const exclude_list = generateExcludeList(int_range, a, min, max);

  // Generate 'b' using randomIntWithExclusion function, excluding values in exclude_list
  const b = randomIntWithExclusion(a, max, exclude_list);

  return {
    a,
    b,
  };
}

// Generate an array of values within the specified range
function generateRangeArray(start, end) {
  const rangeArray = [];
  for (let i = start; i <= end; i++) {
    rangeArray.push(i);
  }
  return rangeArray;
}

// Generate the exclude list based on the range array, 'a', min, and max
function generateExcludeList(rangeArray, a, min, max) {
  const exclude_list = rangeArray.map((value) => value + a)
                                .filter((value) => value >= min && value <= max);
  return exclude_list;
}

// Generate a random number within the specified range while excluding values in the exclude array
function randomIntWithExclusion(min, max, exclude) {
  let randomNum;
  const excludedSet = new Set(exclude); // Convert exclude array to a Set for efficient lookup

  do {
    randomNum = randomInt(min, max);
  } while (excludedSet.has(randomNum));

  return randomNum;
}

// Generate random numbers
const generate = () => {
    // Generate a random value for 'n' within the range [2, 6]
    const n = randomInt(2, 5);
  
    // Generate a pair of random numbers 'a' and 'b' with exclusion constraints
    //const { a, b } = randomNumberPairWithExclusion(0, 100, 5);

    let a = 0, b = -1;

    while (a >= b ){
      a = randomInt(-5,5);
      b = randomInt(-5,5);
    }
  
    // Define the range of degrees for the random polynomial
    const degree_range = [2, 5];
  
    // Define the range of constants for the random polynomial
    const const_range = [-5, 5];
  
    // Generate a random polynomial expression
    const poly = random_poly(degree_range, const_range);
  
    // Evaluate the generated polynomial function
    const fun = math.evaluate(`f(x) = ${poly}`);
  
    // Calculate the interval width 'dx'
    const dx = (b - a) / n;
  
    // Perform the trapezoidal rule approximation
    let sum = 0;
    for (let i = 1; i < n; i++) {
      const x = dx * i;
      sum += 2 * fun(a + x);
    }
    sum = (sum + fun(a) + fun(b)) * (dx / 2);
  
    // Calculate the actual integral using math.integral function
    const actual = Integral.integrate(fun, a, b);
  
    // Calculate the error percentage
    const percent_error = Math.abs((actual - sum) / actual) * 100;
  
    data = {
		params: {
			poly: poly, 
			a: a,
            b: b,
            n: n
		},
		correct_answers: {
			calculated: sum,
			actual: actual,
			percent_error: percent_error},
	
		nDigits: 2,
		sigfigs:2
	}
	
	console.log(data);
	return data;
}

//generate();

module.exports = {
  generate
}




",,,,"consider the following polynomial function \( f(x) = 2x^3 + 5x^2 - 3x + 1 \).
compute the integral using the trapezoidal rule, evaluated from \( x = 0 \) to \( x = 2 \), with  \( n = 10 \) segments.",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Trapezoid integration,Add two numbers,Integration,"Root,Algorithm",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/n4W0IR_Zxag'}]",,,"ME 118, ME 201",Numerical Methods
145,secondDerivatives,"{
    ""uuid"": ""2f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Compute second numerical derivatives"",
	""stem"": ""Compute second numerical derivatives"", 
    ""topic"": ""Numerical methods"",
    ""tags"": [""basic"", ""vector"", ""algebra"", ""operations"", ""addition"", ""derivatives"", ""calculus""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript"",
	""resources"": [
		{
			""type"": ""video"",
			""name"": ""video"",
			""title"": ""Video"",
			""url"": ""https://youtu.be/qc6_ky2tj1g""
		}
		]
}
","<pl-question-panel>
  <p> Consider the following polynomial function $ f(x) =  {{params.poly}}$ </p>
  <p> Compute the {{params.option}} evaluated at $ x = {{params.x}} $ with a stepsize of {{params.h}} </p>
</pl-question-panel>

<pl-number-input answers-name=""calculated"" comparison=""sigfig"" digits=""3"" label=""value=""></pl-number-input>
<pl-number-input answers-name=""percent_error"" comparison=""sigfig"" digits=""3"" label=""percent error=""></pl-number-input>","const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');
// Polynomial Generator 
function random_poly(degree_range, const_range) {
    degree = Math.round(math.random(degree_range[0], degree_range[1]));
    polynomial = ''
    for (let i = 0; i = degree + 1; i++) {
        // creates constant
        constant = Math.round(math.random(const_range[0],const_range[1]));

        // Generates part of the polynomial
        // Functions can't have 0x^n as a value so I need to remove it 
        if (constant == 0) {
            poly = `x^${degree}`;
        }
        else {
            poly = `${constant}x^${degree}`;
        }
        degree = degree - 1

        // Combines all parts of the polynomial
        if (constant >= 0) {
            polynomial = polynomial + ""+"" + poly
        }
        else {
            polynomial = polynomial + poly
        }
    }
    return polynomial
}

const generate = () =>{
	const degree_range = [2,3]
	const const_range = [-20,20]
	val_list = [-10,10]
	h = 0.01
	a = Math.round(math.random(val_list[0], val_list[1]))
	
	
	poly = random_poly(degree_range,const_range)
	const fun = math.evaluate(`f(x) = ${poly}`)

	option= math.randomInt(3,6)
	

	switch(option){
		case 0:
			calculated = (fun(a+h)-fun(a))/h;
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Forward Derivative""
			break;
		case 1: 
			calculated = (fun(a) - fun(a-h))/h;
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Backward Derivative""
			break;
		case 2:
			foward_derivative = (fun(a+h)-fun(a))/h
			backward_derivative = (fun(a)-fun(a-h))/h
			calculated = (foward_derivative+backward_derivative)/2
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""central forward derivative""
			break;
		case 3:
			calculated = (fun(a+2*h)-2*fun(a+h)+fun(a))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Forward Derivative""
			break;
		case 4:
			calculated = (fun(a-2*h)-2*fun(a-h)+fun(a))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Backward Derivative""
			break;
		case 5:
			calculated = (fun(a+h) -2*fun(a)+fun(a-h))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Center Derivative""
			break;
	}
	percent_error = math.abs((calculated - actual)/actual *100)
	data = {
		params: {
			poly: poly, 
			x: a,
			h: h,
			option: option_msg
		},
		correct_answers: {
			calculated: calculated,
			actual: actual,
			percent_error: percent_error},
	
		nDigits: 2,
		sigfigs:2
	}
	
	console.log(data);
	return data;
	
}

generate();

module.exports = {
    generate,
}",,,,"Consider the following polynomial function: f(x) = (specific polynomial function)  Compute the (specific option, e.g., derivative or integral) evaluated at x = (specific value) with a stepsize of (specific stepsize value).  Determine:  Value Percent error",2f435c36-1126-43b0-aba5-627eeb2e10f9,Compute second numerical derivatives,Compute second numerical derivatives,Numerical methods,"Basic,Vector,Algebra,Operations,Addition,Derivatives,Calculus",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/qc6_ky2tj1g'}]",,,"ME 018A, ME 118, ME 201",Calculus
146,cubicInterpolationJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Cubic Interpolation"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Statistics"",
    ""tags"": [""numbers"", ""interpolation""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/5CmpRgXcaeY""
        }]
}
","<pl-question-panel>
 <p> 
  Determine the equation of the cubic $ y = a_0 + a_1 x + a_2 x^2 + a_3 x^3 $ that interpolates the points x = ({{params.x}}), y = ({{params.y}}),  z = ({{params.z}}) and u = ({{params.u}}).
</p>

<p>
  Constant coefficient ($ a_0 $)
</p>
<pl-number-input answers-name=""a0"" comparison=""sigfig"" digits=""3"" label="" $ a_0 $ ""></pl-number-input>
<p>
  Linear coefficient ($ a_1 $)
</p>
<pl-number-input answers-name=""a1"" comparison=""sigfig"" digits=""3"" label="" $ a_1 $ ""></pl-number-input>
<p>
  Quadratic coefficient ($ a_2 $)
</p>
<pl-number-input answers-name=""a2"" comparison=""sigfig"" digits=""3"" label="" $ a_2 $ ""></pl-number-input>
<p>
  Cubic coefficient ($ a_3 $)
</p>
<pl-number-input answers-name=""a3"" comparison=""sigfig"" digits=""3"" label="" $ a_2 $ ""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

let detA = 0;
let A,x,y;
let nRows = 4;
let nCols = 2;
let nElements = nRows*nCols;
while (detA === 0) {
    
    let x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));
    mx = math.reshape(x, [nRows, nCols]);
    
    xs = math.column(mx,0);
    B = math.column(mx,1);

    A = math.concat(math.dotPow(xs,0), math.dotPow(xs,1), math.dotPow(xs,2), math.dotPow(xs,3));
   
    detA = math.det(A);

}


sol = math.lusolve(A,B)

console.log('A = ', A);
console.log('B = ', B);
console.log(' Solution = ', sol);



data = {
    params: { 
        x: math.row(mx,0)[0],
        y: math.row(mx,1)[0],
        z: math.row(mx,2)[0],
        u: math.row(mx,3)[0]
    },
    correct_answers: {
        a0: sol[0][0],
        a1: sol[1][0],
        a2: sol[2][0],
        a3: sol[3][0]
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"determine the equation of the cubic $ y = a_0 + a_1 x + a_2 x^2 + a_3 x^3 $ that interpolates the points x = (2, 4, 6, 8), y = (10, 20, 30, 40), z = (-5, -10, -15, -20) and u = (0, 5, 10, 15).


constant coefficient ($ a_0 $)

linear coefficient ($ a_1 $)

quadratic coefficient ($ a_2 $)

cubic coefficient ($ a_3 $)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Cubic interpolation,Add two numbers,Statistics,"Numbers,Interpolation",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/5CmpRgXcaeY'}]",,,"ME 201, ME 118",Interpolation
147,linearInterpolationJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Linear Interpolation"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Statistics"",
    ""tags"": [""numbers"", ""linear interpolation""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/2losDFFHByI""
        }]
}
","<pl-question-panel>
 <p> 
  Determine the equation of the line $ y = a_0 + a_1 x $ that interpolates the points x = ({{params.x}}) and y = ({{params.y}}).
</p>

<p>
  Constant coefficient ($ a_0 $)
</p>
<pl-number-input answers-name=""a0"" comparison=""sigfig"" digits=""3"" label="" $ a_0 $ ""></pl-number-input>
<p>
  Linear coefficient ($ a_1 $)
</p>
<pl-number-input answers-name=""a1"" comparison=""sigfig"" digits=""3"" label="" $ a_1 $ ""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
 const math = require('mathjs');
// const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    let detA = 0;
    let A,x,y;
    let nRows = 2;
    let nCols = 2;
    while (detA === 0) {
        nElements = nRows*nCols;
        let x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));
        mx = math.reshape(x, [nRows, nCols]);
        
        xs = math.column(mx,0);
        B = math.column(mx,1);
    
        A = math.concat(math.dotPow(xs,0), math.dotPow(xs,1));
       
        detA = math.det(A);
    
    }



sol = math.lusolve(A,B)

console.log('A = ', A);
console.log('B = ', B);
console.log(' Solution = ', sol);



data = {
    params: { 
        x: math.row(mx,0)[0],
        y: math.row(mx,1)[0]
    },
    correct_answers: {
        a0: sol[0][0],
        a1: sol[1][0]
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"determine the equation of the line $ y = a_0 + a_1 x $ that interpolates the points x = (2, 5) and y = (7, 12).


constant coefficient ($ a_0 $)

linear coefficient ($ a_1 $)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Linear interpolation,Add two numbers,Statistics,"Numbers,Linear interpolation",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/2losDFFHByI'}]",,,"ME 018A, ME 118","Interpolation, Basic Algebra"
148,linearSplineInterp,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Linear spline interpolation"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""numbers"", ""interpolation""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Linear spline"",
            ""url"": ""https://youtu.be/NyuUC_AOV2s""
        }]
}
","<pl-question-panel>
  <p> Consider the points {{params.pointStr}} </p>
  <p> If a linear spline  is used to interpolate the points, what is the interpolated value corresponding to $ x = {{params.xx}} $</p>
</pl-question-panel>

<pl-number-input answers-name=""yy"" comparison=""sigfig"" digits=""3"" label=""$y=$""></pl-number-input>
",,,"import random, copy
import numpy as np
from scipy import interpolate


def generate():

    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    n = np.random.randint(4,8)
    xmin = -10
    xmax = 10
    nx = xmax - xmin +1 
    xc = np.linspace(xmin,xmax,nx)
    x = np.sort(np.random.choice(xc, n, replace=False))
    y = np.random.choice(xc, n, replace=False)

    f = interpolate.interp1d(x,y,kind=1)
    xx = xmin - 10

    xminsel = x[0]
    xmaxsel = x[-1]

    while xx < xminsel or xx > xmaxsel: 
        xx = np.round(10*(xminsel + (xmaxsel-xminsel)*np.random.rand()))/10
    # print('xx = ',xx)
     
    yy = f(xx)
    
    count = 0
    pointStr = ''
    while count < n:
        pointStr +=  f'{x[count], y[count]}, '
        count += 1

    data['params']['pointStr'] = pointStr
    data['params']['x'] = x.tolist()
    data['params']['y'] = y.tolist()

    data['params']['xx'] = xx
    data['correct_answers']['yy'] = yy.tolist()

    return data

# data = generate()
# print(data)

",,"consider the points (1, 3), (2, 5), (3, 7), (4, 9). 
if a linear spline is used to interpolate the points, what is the interpolated value corresponding to $ x = 2.5 $?",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Linear spline interpolation,Add two numbers,Algebra,"Numbers,Interpolation",,True,sundar@google.com,Num,1,,1.0,Python,"[{'type': 'video', 'name': 'video', 'title': 'Video: Linear spline', 'url': 'https://youtu.be/NyuUC_AOV2s'}]",,,ME 118,"Interpolation, Analytical Geometry"
149,quadraticInterpolationJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Quadratic Interpolation"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Statistics"",
    ""tags"": [""numbers"", ""linear interpolation""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/vJrKUAANgKA""
        }]
}
","<pl-question-panel>
 <p> 
  Determine the equation of the quadratic $ y = a_0 + a_1 x + a_2 x^2$ that interpolates the points x = ({{params.x}}), y = ({{params.y}}) and z = ({{params.z}}).
</p>

<p>
  Constant coefficient ($ a_0 $)
</p>
<pl-number-input answers-name=""a0"" comparison=""sigfig"" digits=""3"" label="" $ a_0 $ ""></pl-number-input>
<p>
  Linear coefficient ($ a_1 $)
</p>
<pl-number-input answers-name=""a1"" comparison=""sigfig"" digits=""3"" label="" $ a_1 $ ""></pl-number-input>
<p>
  Linear coefficient ($ a_2 $)
</p>
<pl-number-input answers-name=""a2"" comparison=""sigfig"" digits=""3"" label="" $ a_2 $ ""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

let detA = 0;
let A,x,y;
let nRows = 3;
let nCols = 2;
while (detA === 0) {
    nElements = 6;
    let x = Array.from({length: nElements}, ()=> math.randomInt(-5,5));
    mx = math.reshape(x, [nRows, nCols]);
    
    xs = math.column(mx,0);
    B = math.column(mx,1);

    A = math.concat(math.dotPow(xs,0), math.dotPow(xs,1), math.dotPow(xs,2));
   
    detA = math.det(A);

}


sol = math.lusolve(A,B)

console.log('A = ', A);
console.log('B = ', B);
console.log(' Solution = ', sol);



data = {
    params: { 
        x: math.row(mx,0)[0],
        y: math.row(mx,1)[0],
        z: math.row(mx,2)[0]
    },
    correct_answers: {
        a0: sol[0][0],
        a1: sol[1][0],
        a2: sol[2][0]
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"determine the equation of the quadratic $ y = a_0 + a_1 x + a_2 x^2$ that interpolates the points x = (2, 4, 6), y = (10, 20, 30) and z = (5, 10, 15).


constant coefficient ($ a_0 $)

linear coefficient ($ a_1 $)

linear coefficient ($ a_2 $)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Quadratic interpolation,Add two numbers,Statistics,"Numbers,Linear interpolation",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/vJrKUAANgKA'}]",,,"ME 201, ME 118, ME 018A",Interpolation
150,bisectionMethod,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Bisection method"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Algebra"",
    ""tags"": [""root"", ""algorithm""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 2,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python"",
    ""stepType"": ""iterative"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/mk9ClLwadxs""
        }]
}
","<pl-question-panel>
  <p> Consider the function $ p(x) = {{params.polyString}} $</p>
  <p> Use the bisection method to determine the root of the polynomial in the range [{{params.xl}}, {{params.xu}}]</p>
  <p> For each step, indicate the lower and upper limit of the updated intervals and the absolute value of the relative error in that step </p>
</pl-question-panel>
<p> </p>

<pl-static-text name=""stepNumber""> <h4>  Iteration 1 </h4> </pl-static-text>


<pl-number-input answers-name=""xl"" comparison=""sigfig"" digits=""3"" label=""Lower limit""> </pl-number-input>
<pl-number-input answers-name=""xu"" comparison=""sigfig"" digits=""3"" label=""Upper limit""> </pl-number-input>
<pl-number-input answers-name=""curErr"" comparison=""sigfig"" digits=""3"" label=""Relative error""> </pl-number-input>


",,,"import random, copy
from numpy.polynomial import Polynomial
from numpy.polynomial.polynomial import polyval
import numpy as np
from pytexit import py2tex

def poly(p, var_string='x'):
    res = ''
    first_pow = len(p) - 1
    for i, coef in enumerate(p):
        power = first_pow - i

        if coef:
            if coef < 0:
                sign, coef = (' - ' if res else '- '), -coef
            elif coef > 0: # must be true
                sign = (' + ' if res else '')

            str_coef = '' if coef == 1 and power != 0 else str(coef)

            if power == 0:
                str_power = ''
            elif power == 1:
                str_power = var_string
            else:
                str_power = var_string + '^' + str(power)

            res += sign + str_coef + str_power 
    return res

def bisection(p, xl, xu, errTol):
    curErr = 100000000
    xmold = xl
    
    ix = 0
    ca = []
    numIter = 6
    while curErr > errTol and ix <= numIter:
        xm = (xl + xu)/2
        fxl = polyval(xl, p.coef)
        fxm = polyval(xm, p.coef)
        fxu = polyval(xu, p.coef)

        if fxl*fxm < 0:
            xu = xm
        else:
            xl = xm
        
        curErr = abs((xm-xmold)/xm)
        xmold = xm
        # print('XM is ', xm,' and current Error is ', curErr)
        step = {'stepNum': ix,
                'xl': xl,
                'xu': xu,
                'fxl': fxl,
                'fxm': fxm,
                'fxu': fxu,
                'curErr': curErr}
        ix = ix + 1 
        ca.append(step)

    return ca


def generate():

    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    # Sample two random integers between 5 and 10 (inclusive)
    a = np.random.randint(5, 10)
    b = np.random.randint(5, 10)

    # Put these two integers into data['params']
    data['params']['a'] = a
    data['params']['b'] = b

    # Compute the sum of these two integers
    c = a + b

    # Put the sum into data['correct_answers']
    data['correct_answers']['c'] = c

    # p= np.random.randint(5, size=(2, 4))

    numRoots = np.random.randint(3,5)
    roots = 0.25*np.random.randint(-12,13, size=numRoots)
    roots = np.unique(roots)
    # print(roots)
    roots.sort()
    # print('Sorted ', roots)

    p = Polynomial.fromroots(roots)
    dp = p.deriv()
    # print(polyval(2, p.coef))

    k = np.random.randint(0,numRoots)
    rootK = roots[k]

    fl = np.random.uniform(0.25,0.75)
    fu = np.random.uniform(0.25,0.75)

    if k == 0:
        d = roots[k+1] - roots[k]
        xl = rootK - fl*d
        xu = rootK + fu*d
    elif k == numRoots -1:
        d = roots[k] - roots[k-1]
        xl = rootK- fl*d
        xu = rootK + fu*d
    else:
        dl = roots[k] - roots[k-1]
        du = roots[k+1] - roots[k]
        xl = rootK- fl*dl
        xu = rootK + fu*du

    xl = np.round(xl*100)/100
    xu = np.round(xu*100)/100

    # print('Roots = ', roots, ' of the polynomial ', p)
    # print('Seeking root #', k , ' and the root needed is ', rootK)
    # print('Lower limit = ', xl, ' Upper limit = ', xu)

    errTol = 0.05
    ca = bisection(p,xl,xu, errTol)
    y = poly(np.flip(p.coef),'x')
    data['params']['poly'] = p.coef.tolist()
    data['params']['polyString'] = y
    data['params']['xl'] = xl
    data['params']['xu'] = xu
    data['params']['errTol'] = errTol
    data['steps'] = ca
    data['correct_answers'] = ca[0]

    
    return data


# data = generate()
# print(data)
",,"consider the function $ p(x) = x^3 - 2x^2 + 3x - 4 $
use the bisection method to determine the root of the polynomial in the range [-2, 2]
for each step, indicate the lower and upper limit of the updated intervals and the absolute value of the relative error in that step

iteration 1",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Bisection method,Add two numbers,Algebra,"Root,Algorithm",,True,sundar@google.com,Num,2,,1.0,Python,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/mk9ClLwadxs'}]",Iterative,,MATH 009C,"Basic Algebra, Error Analysis"
151,newtonRaphsonMethod,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Newton Raphson Method"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Numerical methods"",
    ""tags"": [""roots"", ""equation""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 4,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python"",
    ""stepType"": ""iterative"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video"",
            ""url"": ""https://youtu.be/vr44WMCIEpA""
        }]
    
}
","<pl-question-panel>
  <p> Consider the function $ p(x) = {{params.polyString}} $</p>
  <p> Use the Newton-Raphson method to determine the root of the polynomial starting with $ x = {{params.xg}} $ </p>
  <p> For each step, indicate the lower and upper limit of the updated intervals and the absolute value of the relative error in that step </p>
</pl-question-panel>

<pl-static-text name=""stepNumber"">  <h4>  Iteration 1 </h4> </pl-static-text>

<pl-number-input answers-name=""xr"" comparison=""sigfig"" digits=""3"" label=""Root estimate ""> </pl-number-input>
<pl-number-input answers-name=""curErr"" comparison=""sigfig"" digits=""3"" label=""Relative error"" > </pl-number-input>

",,,"import random, copy
from numpy.polynomial import Polynomial
from numpy.polynomial.polynomial import polyval
import numpy as np
from pytexit import py2tex

def poly(p, var_string='x'):
    res = ''
    first_pow = len(p) - 1
    for i, coef in enumerate(p):
        power = first_pow - i

        if coef:
            if coef < 0:
                sign, coef = (' - ' if res else '- '), -coef
            elif coef > 0: # must be true
                sign = (' + ' if res else '')

            str_coef = '' if coef == 1 and power != 0 else str(coef)

            if power == 0:
                str_power = ''
            elif power == 1:
                str_power = var_string
            else:
                str_power = var_string + '^' + str(power)

            res += sign + str_coef + str_power 
    return res

def nrMethod(p, dp, xg, errTol):
    curErr = 100000000
    xr = xg
    
    ix = 1
    ca = []
    while curErr > errTol:
        fxr = polyval(xr, p.coef)
        dfxr = polyval(xr, dp.coef)
        xrnew = xr - fxr/dfxr
        curErr = abs((xrnew-xr)/xrnew)
        # print('XM is ', xrnew,' and current Error is ', curErr)
        step = {'stepNum': ix,
                'xr': xrnew,
                'curErr': curErr}
        ix = ix + 1
        xr = xrnew 
        ca.append(step)

    return ca


def generate():

    params = dict()
    correct_answers = dict()
    nDigits = 2
    sigfigs = 2
    data = dict(params=params, correct_answers=correct_answers, nDigits=nDigits, sigfigs=sigfigs)

    # p= np.random.randint(5, size=(2, 4))

    numRoots = np.random.randint(3,5)
    roots = 0.25*np.random.randint(-12,13, size=numRoots)
    roots = np.unique(roots)
    numRootsUpdated = roots.size
    # print(roots)
    roots.sort()
    # print('Sorted ', roots)

    p = Polynomial.fromroots(roots)
    dp = p.deriv()
    # print(polyval(2, p.coef))

    rootK = 0
    while rootK == 0:
        k = np.random.randint(0,numRootsUpdated)
        rootK = roots[k]

    fl = np.random.uniform(0.1,0.45)
    fu = np.random.uniform(0.1,0.45)

    if k == 0:
        d = roots[k+1] - roots[k]
        xl = rootK - fl*d
        xu = rootK + fu*d
    elif k == numRoots -1:
        d = roots[k] - roots[k-1]
        xl = rootK- fl*d
        xu = rootK + fu*d
    else:
        dl = roots[k] - roots[k-1]
        du = roots[k] - roots[k-1]
        xl = rootK- fl*dl
        xu = rootK + fu*du

    xl = np.round(xl*100)/100
    xu = np.round(xu*100)/100

    if np.random.uniform(0.0,1.0) < 0.5:
        xg = xl
    else: 
        xg = xu

    # print('Roots = ', roots, ' of the polynomial ', p)
    # print('Seeking root #', k , ' and the root needed is ', rootK)
    # print('xg = ', xg)

    errTol = 0.001
    ca = nrMethod(p, dp, xg, errTol)
    y = poly(np.flip(p.coef),'x')
    data['params']['poly'] = p.coef.tolist()
    data['params']['polyString'] = y
    data['params']['xg'] = xg
    data['params']['errTol'] = errTol
    data['steps'] = ca
    data['correct_answers'] = ca[0]

    
    return data


# data = generate()
# print(data)
",,"consider the function $ p(x) = 2x^3 - 5x^2 + 3x - 1 $
use the newton-raphson method to determine the root of the polynomial starting with $ x = 2 $
for each step, indicate the lower and upper limit of the updated intervals and the absolute value of the relative error in that step

iteration 1",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Newton raphson method,Add two numbers,Numerical methods,"Roots,Equation",,True,sundar@google.com,Num,4,,1.0,Python,"[{'type': 'video', 'name': 'video', 'title': 'Video', 'url': 'https://youtu.be/vr44WMCIEpA'}]",Iterative,,ME 201,"Numerical Methods, Error Analysis"
152,pitot1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Pitot tube"",
    ""stem"":""heat"",
    ""topic"": ""fluids"",
    ""tags"": [""energy"", ""pressure"",""fluid""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A pipe has diameter {{params.D}} {{params.unitsDiameter}} and carries a flow of {{params.fluidName}} at a speed of {{params.V}} {{params.unitsSpeed}}. 
  <p> The specific gravity of {{params.fluidName}} is {{params.sg}}. </p> 
  <p> Pressure $ P_1 $ is measured to be {{params.p1}} {{params.unitsPressure}} gage.</p>
</pl-question-panel>
  
  
  What is the stagnation pressure $P_2$ (in {{params.unitsPressure}})? Express in gage pressure.
  <pl-number-input answers-name=""p2"" comparison=""sigfig"" digits=""3"" label="" $ P_2 $ (in {{params.unitsPressure}}) ""></pl-number-input>
  What is the volumetric flow rate (in {{params.unitsFlowRate}}) ?
  <pl-number-input answers-name=""vdot"" comparison=""sigfig"" digits=""3"" label=""Q (in {{params.unitsFlowRate}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""\\( m^3/s \\)"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s"",
            ""pressure"": ""kPa""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""\\( ft^3/s \\)"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s"",
            ""pressure"": ""psi""
        }
    }
    //unitSel = 0;
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


fluidProperties = props.gasProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop= props.getGasProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg= fluidprop.sg;



if (unitSel === 0) {
    V = 2*math.randomInt(10,50);
    p1 = math.randomInt(10,20);
    p2 = p1 + rho*V*V/2*1e-3;
    Dd = 2*math.randomInt(8, 26);
    D = Dd/1000;
    A = math.pi/4*D*D;
    vdot = A*V;
    mdot = rho*vdot;
} else {
    V = 2*math.randomInt(15,60);
    rhoslug = rho/32.2;
    p1 = 0.4*math.randomInt(2,15);
    p2 = p1 + (1/144)*rhoslug*V*V/2;
    Dd = 0.25*math.randomInt(2, 10);
    D = Dd/12;
    A = math.pi/4*D*D;
    vdot = A*V;
    mdot = rho*vdot;
}



data = {
    params: { 
        D: Dd,
        V: V,
        p1: p1,
        sg: sg,
        rho: rho,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate,
        unitsPressure: unitsPressure,
        unitsDiameter: unitsDiameter
    },
    correct_answers: {
        p2: p2,
        vdot: vdot,
        mdot: mdot
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const gasProperties = {
    ""air"": {
        ""sg"": 0.00125,
        ""mu"": 18.1e-6,
        ""Cp"": 1.005,
    },
    ""nitrogen"": {
        ""sg"": 0.001164,
        ""mu"": 17.2e-6,
        ""Cp"": 1.040
    },
    ""helium"": {
        ""sg"": 0.000178,
        ""mu"": 1.96e-5,
        ""Cp"": 5.193
    },
    ""methane"": {
        ""sg"": 0.000657,
        ""mu"": 1.10e-5,
        ""Cp"": 2.254
    },
    ""carbon dioxide"": {
        ""sg"": 0.00187,
        ""mu"": 1.47e-5,
        ""Cp"": 0.00120
    }
}

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""gylcerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getGasProperties = (material, unitSel) =>{
    let mat = gasProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    gasProperties,
    getMaterialProperties,
    getFluidProperties,
    getGasProperties
}","a pipe has diameter 0.5 meters and carries a flow of water at a speed of 2 meters per second. 
the specific gravity of water is 1. 
pressure $ p_1 $ is measured to be 1.5 bar gage.

what is the stagnation pressure $p_2$ (in bar gage)? express in gage pressure.

what is the volumetric flow rate (in cubic meters per second)?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Pitot tube,Heat,Fluids,"Energy,Pressure,Fluid",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 113, ME 240B, ME 240A, ME 246",Mass Flow Rate
153,projectileBasic,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Projectile Motion"",
    ""stem"":""Projection at an angle"",
    ""topic"": ""Kinematics"",
    ""tags"": [""constant acceleration"", ""gravity""],
    ""prereqs"":""1D kinematics"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A projectile is fired with a speed of {{params.v}} {{params.unitsSpeed}} making an angle of {{params.theta}} degrees with the horizontal. </p>
  <p> Use a coordinate system that has the vertical axis pointed upwards and include the sign for the vertical component.</p>
  
  
</pl-question-panel>
<p> Determine the x- and y- positions (in {{params.unitsDist}} )  {{params.t}} seconds after the projectile is fired.  </p>
<pl-number-input answers-name=""x"" comparison=""sigfig"" digits=""3"" label=""$x=$ (in {{params.unitsDist}})""></pl-number-input>
<pl-number-input answers-name=""y"" comparison=""sigfig"" digits=""3"" label=""$y=$ (in {{params.unitsDist}})""></pl-number-input>
<p> Determine the horizontal and vertical components of the velocity  (in {{params.unitsSpeed}}) {{params.t}} seconds after the projectile is fired. </p>
<pl-number-input answers-name=""vx"" comparison=""sigfig"" digits=""3"" label=""$v_x = $ (in {{params.unitsSpeed}})""></pl-number-input>
<pl-number-input answers-name=""vy"" comparison=""sigfig"" digits=""3"" label=""$v_y = $ (in {{params.unitsSpeed}}, include sign)""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;


v = 4*math.randomInt(2,10);
thetaang = 5*math.randomInt(3,15);
thetarad = thetaang*math.pi/180;

if ( unitSel === 0){
    g = 9.81;
} else {
    g = 32.2;
}

vx = v*math.cos(thetarad);
vy = v*math.sin(thetarad);

tf = 2*vy/g;

console.log(`tf = ${tf} `);

t = math.round(10*math.random()*tf)/10;

x = vx*t;
y = vy*t - 0.5*g*t*t;

vy = vy - g*t;





data = {
    params: { 
        v : v,
        theta: thetaang,
        t: t,
        unitsDist: unitsDist,
        unitsSpeed: unitsSpeed
    },
    correct_answers: {
        x: x,
        y: y,
        vx: vx,
        vy: vy
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a projectile is fired with a speed of 50 meters per second making an angle of 45 degrees with the horizontal. 
use a coordinate system that has the vertical axis pointed upwards and include the sign for the vertical component.

1. determine the x- and y- positions (in meters)  3 seconds after the projectile is fired.  


2. determine the horizontal and vertical components of the velocity  (in meters per second) 3 seconds after the projectile is fired.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Projectile motion,Projection at an angle,Kinematics,"Constant acceleration,Gravity",1d kinematics,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,Projectile Motion
154,projectileBasic2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Projectile Motion"",
    ""stem"":""Projection at an angle"",
    ""topic"": ""Kinematics"",
    ""tags"": [""constant acceleration"", ""gravity""],
    ""prereqs"":""1D kinematics"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A projectile is fired with a speed of {{params.v}} {{params.unitsSpeed}} making an angle of {{params.theta}} degrees with the horizontal from ledge that is {{params.H}} {{params.unitsDist}} high above the ground. <p>
</pl-question-panel>

<p> Determine the horizontal distance $ R $ (in {{params.unitsDist}}) from the point of firing that the projectile lands</p>
<pl-number-input answers-name=""R"" comparison=""sigfig"" digits=""3"" label=""R  (in {{params.unitsDist}})""></pl-number-input>
<p> Also determine the speed (in {{params.unitsSpeed}}) with which the projectile hits the ground. </p>
<pl-number-input answers-name=""vf"" comparison=""sigfig"" digits=""3"" label=""v =  (in {{params.unitsSpeed}})""></pl-number-input>
<p> Also determine the time (in seconds) it takes for it for the projectile to hit the ground. </p>
<pl-number-input answers-name=""t"" comparison=""sigfig"" digits=""3"" label=""t =  (in seconds)""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;


v = 4*math.randomInt(2,10);
thetaang = 5*math.randomInt(3,15);
H  = 5*math.randomInt(5,15);

thetarad = thetaang*math.pi/180;

if ( unitSel === 0){
    g = 9.81;
} else {
    g = 32.2;
}

vx = v*math.cos(thetarad);
vy = v*math.sin(thetarad);

t1 = vy/g;
y = vy*t1 - 0.5*g*t1*t1;

t2 = math.sqrt(2*(y+H)/g);

t = t1 + t2;

R = vx*t;

vyf = g*t2;

vf = math.sqrt(vx*vx + vyf*vyf);

ang = math.atan(vyf/vx)*180/math.pi;

console.log(`t1 = ${t1}, t2 = ${t2} vyf = ${vyf}`);

data = {
    params: { 
        v : v,
        theta: thetaang,
        H: H,
        unitsDist: unitsDist,
        unitsSpeed: unitsSpeed
    },
    correct_answers: {
        vf: vf,
        ang: ang,
        t: t,
        y: y,
        R: R
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a projectile is fired with a speed of 50 meters per second making an angle of 45 degrees with the horizontal from a ledge that is 20 meters high above the ground.

determine the horizontal distance $ r $ (in meters) from the point of firing that the projectile lands.

also determine the speed (in meters per second) with which the projectile hits the ground.

also determine the time (in seconds) it takes for the projectile to hit the ground.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Projectile motion,Projection at an angle,Kinematics,"Constant acceleration,Gravity",1d kinematics,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,Projectile Motion
155,projectileBasic3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Projectile Motion"",
    ""stem"":""Projection at an angle"",
    ""topic"": ""Kinematics"",
    ""tags"": [""constant acceleration"", ""gravity""],
    ""prereqs"":""1D kinematics"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A projectile is fired with a speed of {{params.v}} {{params.unitsSpeed}} making an angle of {{params.theta}} degrees with the horizontal from ledge that is {{params.H}} {{params.unitsDist}}. 
  <p>  Determine the speed (in {{params.unitsDist}}) and the angle (in degrees) with which the projectile hits the ground. Also determine the time (in seconds) it takes for it for the projectile to hit the ground.
</pl-question-panel>

<pl-number-input answers-name=""vf"" comparison=""sigfig"" digits=""3"" label=""v = (in {{params.unitsSpeed}})""></pl-number-input>
<pl-number-input answers-name=""ang"" comparison=""sigfig"" digits=""3"" label=""Angle (in degrees)""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;


v = 4*math.randomInt(2,10);
thetaang = 5*math.randomInt(3,15);
H  = 5*math.randomInt(5,15);

thetarad = thetaang*math.pi/180;

if ( unitSel === 0){
    g = 9.81;
} else {
    g = 32.2;
}

vx = v*math.cos(thetarad);
vy = v*math.sin(thetarad);

t1 = vy/g;
y = vy*t1 - 0.5*g*t1*t1;

t2 = math.sqrt(2*(y+H)/g);

t = t1 + t2;

R = vx*t;

vyf = g*t2;

vf = math.sqrt(vx*vx + vyf*vyf);

ang = math.atan(vyf/vx)*180/math.pi;

console.log(`t1 = ${t1}, t2 = ${t2} vyf = ${vyf}`);

data = {
    params: { 
        v : v,
        theta: thetaang,
        H: H,
        unitsDist: unitsDist,
        unitsSpeed: unitsSpeed
    },
    correct_answers: {
        vf: vf,
        ang: ang,
        t: t,
        y: y,
        R: R
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,a projectile is fired with a speed of 50 meters per second making an angle of 45 degrees with the horizontal from a ledge that is 20 meters high. determine the speed (in meters per second) and the angle (in degrees) with which the projectile hits the ground. also determine the time (in seconds) it takes for the projectile to hit the ground.,8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Projectile motion,Projection at an angle,Kinematics,"Constant acceleration,Gravity",1d kinematics,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,Projectile Motion
156,projectileHorizontal,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Projectile Motion"",
    ""stem"":""Horizontal projection"",
    ""topic"": ""Kinematics"",
    ""tags"": [""constant acceleration"", ""gravity""],
    ""prereqs"":""1D kinematics"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A projectile is fired horizontally with a velocity of {{params.vx}} {{params.unitsSpeed}} from a ledge of height of {{params.H}} {{params.unitsDist}}. 
  <p> Determine the time taken (in seconds) for the projectile to hit the horizontal ground below, the distance (in {{params.unitsDist}}) at which the projectile hits the ground, and the speed (in {{params.unitsSpeed}}) and angle (in degrees).</p>
</pl-question-panel>

<pl-number-input answers-name=""t"" comparison=""sigfig"" digits=""3"" label=""$t=$ (in seconds)""></pl-number-input>
<pl-number-input answers-name=""R"" comparison=""sigfig"" digits=""3"" label=""$R=$ (in {{params.unitsDist}})""></pl-number-input>
<pl-number-input answers-name=""v"" comparison=""sigfig"" digits=""3"" label=""$v=$ (in {{params.unitsSpeed}})""></pl-number-input>
<pl-number-input answers-name=""angle"" comparison=""sigfig"" digits=""3"" label=""Angle (in degrees)""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;


H  = 5*math.randomInt(5,15);
vx = 4*math.randomInt(2,10);
if ( unitSel === 0){
    g = 9.81;
} else {
    g = 32.2;
}

t = math.sqrt(2*H/g);
R = vx*t;
vy = g*t;
v = math.sqrt(vx*vx + vy*vy);
angle = math.atan(vy/vx) * 180/math.pi;

data = {
    params: { 
        H : H,
        vx: vx,
        unitsDist: unitsDist,
        unitsSpeed: unitsSpeed
    },
    correct_answers: {
        t: t,
        R: R,
        v: v,
        angle: angle
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"a projectile is fired horizontally with a velocity of 50 m/s from a ledge of height of 20 meters. 
determine the time taken (in seconds) for the projectile to hit the horizontal ground below, the distance (in meters) at which the projectile hits the ground, and the speed (in m/s) and angle (in degrees).",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Projectile motion,Horizontal projection,Kinematics,"Constant acceleration,Gravity",1d kinematics,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 103,Projectile Motion
157,pump1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Pump"",
    ""stem"":""heat"",
    ""topic"": ""fluids"",
    ""tags"": [""energy"", ""pressure"",""fluid""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A pump lifts {{params.Qd}} {{params.unitsFlowRate}} of {{params.fluidName}} (specific gravity = {{params.sg}}) from a tank that is {{params.H1}} {{params.unitsDist}} below the level of the pump and delivers it to a tank that is {{params.H2}} {{params.unitsDist}} above the pump level. </p>
  <p> The diameter of the pump is {{params.D}} {{params.unitsDiameter}}.
  <p> Both the supply and delivery tank operate at atmospheric pressure.</p>
</pl-question-panel>
  
  
  What is the velocity (in {{params.unitsSpeed}}) in the pipe?
  <pl-number-input answers-name=""V"" comparison=""sigfig"" digits=""3"" label="" V (in {{params.unitsSpeed}}) ""></pl-number-input>
  What is the mass flow rate (in {{params.unitsMassRate}}) ?
  <pl-number-input answers-name=""mdot"" comparison=""sigfig"" digits=""3"" label="" $ \dot{m} $ (in {{params.unitsMassRate}})""></pl-number-input>
  ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""liters per min"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s"",
            ""pressure"": ""kPa"",
            ""workpermass"": ""J/kg""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""gpm"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s"",
            ""pressure"": ""psi"",
            ""workPerMass"": ""lb-ft/lb""
        }
    }
    //unitSel = 1;
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsWorkPerMass = units[unitSystems[unitSel]].worksPerMass;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop= props.getFluidProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg= fluidprop.sg;



if (unitSel === 0) {
    H1 = math.randomInt(1,5);
    H2 = math.randomInt(10,20);
    Qd = math.randomInt(2,12);
    Q = Qd/(60*1000); 
    mdot = rho*Q;
    Dd = 2*math.randomInt(6,12);
    D = Dd/1000;
    A = math.pi/4*D*D;
    V = Q/A;
    g = 9.81;
    wpm = g*(H2+H1);
    powerw= mdot*wpm;
    effd = math.randomInt(60,80);
    eff = effd/100;
    powerin = powerw/eff;
    P3 = -rho*(V*V/2 + g*H1);
    P4 = P3 + rho*wpm;
    P5 = P4 - rho*g*H2;

} else {
    H1 = math.randomInt(1,5);
    H2 = math.randomInt(10,20);
    Qd = math.randomInt(2,12);
    Q = Qd/(60*7.5); 
    mdot = rho*Q;
    Dd = 0.125*math.randomInt(3,13);
    D = Dd/12;
    A = math.pi/4*D*D;
    V = Q/A;
    g = 32.2;
    wpm = g*(H2+H1);
    powerw= mdot/g*wpm*1/550;
    effd = math.randomInt(60,80);
    eff = effd/100;
    powerin = powerw/eff;
    rhoslug = rho/32.2;
    P3 = rhoslug*(-V*V/2 -g*H1);
    P4 = P3 + rhoslug*wpm;
    P5 = P4 - rhoslug*g*H2;
    P3 = P3/144;
    P4 = P4/144;
    P5 = P5/144;
}



data = {
    params: { 
        H1: H1,
        H2: H2,
        Qd: Qd,
        sg: sg,
        rho: rho,
        eff: effd,
        mdot: mdot,
        D: Dd,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsDist: unitsDist,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsDiameter: unitsDiameter,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate,
        unitsPressure: unitsPressure
    },
    correct_answers: {
        V: V,
        mdot: mdot
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const gasProperties = {
    ""air"": {
        ""sg"": 0.00125,
        ""mu"": 18.1e-6,
        ""Cp"": 1.005,
    },
    ""nitrogen"": {
        ""sg"": 0.001164,
        ""mu"": 17.2e-6,
        ""Cp"": 1.040
    },
    ""helium"": {
        ""sg"": 0.000178,
        ""mu"": 1.96e-5,
        ""Cp"": 5.193
    },
    ""methane"": {
        ""sg"": 0.000657,
        ""mu"": 1.10e-5,
        ""Cp"": 2.254
    },
    ""carbon dioxide"": {
        ""sg"": 0.00187,
        ""mu"": 1.47e-5,
        ""Cp"": 0.00120
    }
}

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""glycerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getGasProperties = (material, unitSel) =>{
    let mat = gasProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    gasProperties,
    getMaterialProperties,
    getFluidProperties,
    getGasProperties
}","a pump lifts 10 m^3/s of water (specific gravity = 1.0) from a tank that is 5 meters below the level of the pump and delivers it to a tank that is 8 meters above the pump level. 
the diameter of the pump is 0.5 meters.
both the supply and delivery tank operate at atmospheric pressure.

what is the velocity (in m/s) in the pipe?

what is the mass flow rate (in kg/s) ?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Pump,Heat,Fluids,"Energy,Pressure,Fluid",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 113, ME 240A",Mass Flow Rate
158,pump2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Pump"",
    ""stem"":""heat"",
    ""topic"": ""fluids"",
    ""tags"": [""energy"", ""pressure"",""fluid""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A pump lifts {{params.Qd}} {{params.unitsFlowRate}} of {{params.fluidName}} (specific gravity = {{params.sg}}) from a tank that is {{params.H1}} {{params.unitsDist}} below the level of the pump and delivers it to a tank that is {{params.H2}} {{params.unitsDist}} above the pump level. </p>
  <p> The diameter of the pump is {{params.D}} {{params.unitsDiameter}}.
  <p> Both the supply and delivery tank operate at atmospheric pressure.</p>
</pl-question-panel>
  
  
  What is the work done per unit mass by the pump (in {{params.unitsWorkPerMass}} )?
  <pl-number-input answers-name=""wpm"" comparison=""sigfig"" digits=""3"" label="" Work per mass ""></pl-number-input>
  What is the power supplied to the water (in {{params.unitsPower}}) ?
  <pl-number-input answers-name=""powerw"" comparison=""sigfig"" digits=""3"" label=""Q  (in {{params.unitsPower}})""></pl-number-input>
  If the pump is {{params.eff}}% efficient, what is the power supplied to the pump (in {{params.unitsPower}}) ?
  <pl-number-input answers-name=""powerin"" comparison=""sigfig"" digits=""3"" label="" $ \dot{m} $ (in {{params.unitsPower}})""></pl-number-input>
  ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""liters per min"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s"",
            ""pressure"": ""kPa"",
            ""workPerMass"": ""J/kg"",
            ""power"": ""W""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""gpm"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s"",
            ""pressure"": ""psi"",
            ""workPerMass"": ""lb-ft/lb"",
            ""power"": ""hp""
        }
    }
    //unitSel = 1;
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsWorkPerMass = units[unitSystems[unitSel]].workPerMass;
    unitsPower = units[unitSystems[unitSel]].power;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop= props.getFluidProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg= fluidprop.sg;



if (unitSel === 0) {
    H1 = math.randomInt(1,5);
    H2 = math.randomInt(10,20);
    Qd = math.randomInt(2,12);
    Q = Qd/(60*1000); 
    mdot = rho*Q;
    Dd = 2*math.randomInt(6,12);
    D = Dd/1000;
    A = math.pi/4*D*D;
    V = Q/A;
    g = 9.81;
    wpm = g*(H2+H1);
    powerw= mdot*wpm;
    effd = math.randomInt(60,80);
    eff = effd/100;
    powerin = powerw/eff;
    P3 = -rho*(V*V/2 + g*H1);
    P4 = P3 + rho*wpm;
    P5 = P4 - rho*g*H2;

} else {
    H1 = math.randomInt(1,5);
    H2 = math.randomInt(10,20);
    Qd = math.randomInt(2,12);
    Q = Qd/(60*7.5); 
    mdot = rho*Q;
    Dd = 0.125*math.randomInt(3,13);
    D = Dd/12;
    A = math.pi/4*D*D;
    V = Q/A;
    g = 32.2;
    wpm = g*(H2+H1);
    powerw= mdot/g*wpm*1/550;
    effd = math.randomInt(60,80);
    eff = effd/100;
    powerin = powerw/eff;
    rhoslug = rho/32.2;
    P3 = rhoslug*(-V*V/2 -g*H1);
    P4 = P3 + rhoslug*wpm;
    P5 = P4 - rhoslug*g*H2;
    P3 = P3/144;
    P4 = P4/144;
    P5 = P5/144;
}



data = {
    params: { 
        H1: H1,
        H2: H2,
        Qd: Qd,
        sg: sg,
        rho: rho,
        eff: effd,
        mdot: mdot,
        D: Dd,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsDiameter: unitsDiameter,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate,
        unitsPressure: unitsPressure,
        unitsWorkPerMass: unitsWorkPerMass,
        unitsDist: unitsDist,
        unitsPower: unitsPower
    },
    correct_answers: {
        V: V,
        P3: P3,
        P4: P4,
        P5: P5,
        wpm: wpm,
        powerw: powerw,
        powerin: powerin
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const gasProperties = {
    ""air"": {
        ""sg"": 0.00125,
        ""mu"": 18.1e-6,
        ""Cp"": 1.005,
    },
    ""nitrogen"": {
        ""sg"": 0.001164,
        ""mu"": 17.2e-6,
        ""Cp"": 1.040
    },
    ""helium"": {
        ""sg"": 0.000178,
        ""mu"": 1.96e-5,
        ""Cp"": 5.193
    },
    ""methane"": {
        ""sg"": 0.000657,
        ""mu"": 1.10e-5,
        ""Cp"": 2.254
    },
    ""carbon dioxide"": {
        ""sg"": 0.00187,
        ""mu"": 1.47e-5,
        ""Cp"": 0.00120
    }
}

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""glycerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getGasProperties = (material, unitSel) =>{
    let mat = gasProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    gasProperties,
    getMaterialProperties,
    getFluidProperties,
    getGasProperties
}","a pump lifts 10 m^3/s of water (specific gravity = 1.0) from a tank that is 5 meters below the level of the pump and delivers it to a tank that is 8 meters above the pump level. 
the diameter of the pump is 0.5 meters.
both the supply and delivery tank operate at atmospheric pressure.

what is the work done per unit mass by the pump (in j/kg)?

what is the power supplied to the water (in watts) ?

if the pump is 80% efficient, what is the power supplied to the pump (in watts) ?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Pump,Heat,Fluids,"Energy,Pressure,Fluid",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B, ME 113",Mass Flow Rate
159,pump3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Pump"",
    ""stem"":""heat"",
    ""topic"": ""fluids"",
    ""tags"": [""energy"", ""pressure"",""fluid""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> A pump lifts {{params.Qd}} {{params.unitsFlowRate}} of {{params.fluidName}} (specific gravity = {{params.sg}}) from a tank that is {{params.H1}} {{params.unitsDist}} below the level of the pump and delivers it to a tank that is {{params.H2}} {{params.unitsDist}} above the pump level. </p>
  <p> The diameter of the pump is {{params.D}} {{params.unitsDiameter}}.
  <p> Both the supply and delivery tank operate at atmospheric pressure.</p>
</pl-question-panel>
  
  
  What is the pressure (in {{params.unitsPressure}} ) at the inlet to the pump? Include negative sign if vaccuum.
  <pl-number-input answers-name=""P3"" comparison=""sigfig"" digits=""3"" label="" Pressure at inlet (in {{params.unitsPressure}})""></pl-number-input>
  What is the pressure (in {{params.unitsPressure}}) at the exit of the pump? Include negative sign if vaccuum.
  <pl-number-input answers-name=""P4"" comparison=""sigfig"" digits=""3"" label="" Pressure at exit  (in {{params.unitsPressure}})""></pl-number-input>
  ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""lpm"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s"",
            ""pressure"": ""kPa"",
            ""workPerMass"": ""J/kg"",
            ""power"": ""W""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""gpm"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s"",
            ""pressure"": ""psi"",
            ""workPerMass"": ""lb-ft/lb"",
            ""power"": ""hp""
        }
    }
    //unitSel = 1;
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsWorkPerMass = units[unitSystems[unitSel]].workPerMass;
    unitsPower = units[unitSystems[unitSel]].power;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop= props.getFluidProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg= fluidprop.sg;



if (unitSel === 0) {
    H1 = math.randomInt(1,5);
    H2 = math.randomInt(10,20);
    Qd = math.randomInt(2,12);
    Q = Qd/(60*1000); 
    mdot = rho*Q;
    Dd = 2*math.randomInt(6,12);
    D = Dd/1000;
    A = math.pi/4*D*D;
    V = Q/A;
    g = 9.81;
    wpm = g*(H2+H1);
    powerw= mdot*wpm;
    effd = math.randomInt(60,80);
    eff = effd/100;
    powerin = powerw/eff;
    P3 = -rho*(V*V/2 + g*H1);
    P4 = P3 + rho*wpm;
    P5 = P4 - rho*g*H2;
    P3 = P3/1000;
    P4 = P4/1000;
    P5 = P5/1000;

} else {
    H1 = math.randomInt(1,5);
    H2 = math.randomInt(10,20);
    Qd = math.randomInt(2,12);
    Q = Qd/(60*7.5); 
    mdot = rho*Q;
    Dd = 0.125*math.randomInt(3,13);
    D = Dd/12;
    A = math.pi/4*D*D;
    V = Q/A;
    g = 32.2;
    wpm = g*(H2+H1);
    powerw= mdot/g*wpm*1/550;
    effd = math.randomInt(60,80);
    eff = effd/100;
    powerin = powerw/eff;
    rhoslug = rho/32.2;
    P3 = rhoslug*(-V*V/2 -g*H1);
    P4 = P3 + rhoslug*wpm;
    P5 = P4 - rhoslug*g*H2;
    P3 = P3/144;
    P4 = P4/144;
    P5 = P5/144;
}



data = {
    params: { 
        H1: H1,
        H2: H2,
        Qd: Qd,
        sg: sg,
        rho: rho,
        eff: effd,
        mdot: mdot,
        D: Dd,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsDiameter: unitsDiameter,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate,
        unitsPressure: unitsPressure,
        unitsWorkPerMass: unitsWorkPerMass,
        unitsDist: unitsDist,
        unitsPower: unitsPower
    },
    correct_answers: {
        V: V,
        P3: P3,
        P4: P4,
        P5: P5,
        wpm: wpm,
        powerw: powerw,
        powerin: powerin
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const gasProperties = {
    ""air"": {
        ""sg"": 0.00125,
        ""mu"": 18.1e-6,
        ""Cp"": 1.005,
    },
    ""nitrogen"": {
        ""sg"": 0.001164,
        ""mu"": 17.2e-6,
        ""Cp"": 1.040
    },
    ""helium"": {
        ""sg"": 0.000178,
        ""mu"": 1.96e-5,
        ""Cp"": 5.193
    },
    ""methane"": {
        ""sg"": 0.000657,
        ""mu"": 1.10e-5,
        ""Cp"": 2.254
    },
    ""carbon dioxide"": {
        ""sg"": 0.00187,
        ""mu"": 1.47e-5,
        ""Cp"": 0.00120
    }
}

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""glycerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getGasProperties = (material, unitSel) =>{
    let mat = gasProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    gasProperties,
    getMaterialProperties,
    getFluidProperties,
    getGasProperties
}","a pump lifts 10 liters per second of water (specific gravity = 1) from a tank that is 5 meters below the level of the pump and delivers it to a tank that is 8 meters above the pump level. 
the diameter of the pump is 0.5 meters.
both the supply and delivery tank operate at atmospheric pressure.

what is the pressure (in pascals) at the inlet to the pump? include negative sign if vacuum.

what is the pressure (in pascals) at the exit of the pump? include negative sign if vacuum.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Pump,Heat,Fluids,"Energy,Pressure,Fluid",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 113, ME 240B",Fluid Mechanics
160,refrigerationIdeal,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Carnot refrigerator "",
    ""stem"":""heat"",
    ""topic"": ""thm"",
    ""tags"": [""secondlaw"", ""temperature"", ""power""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
<p>
An ideal refrigerator operates between a high temperature of {{params.Tmax}} {{params.unitsTemperature}} and a minimum temperature of {{params.Tmin}} {params.unitsTemperature}</div>
</p>
<p> It is to extract {{params.Qc}} {{params.unitsPower}} from the reservoir at the lower temperature.</p>
</pl-question-panel>

<p> What is the maximum coefficient of performance of the refrigerator? </p>
<pl-number-input answers-name=""cop"" comparison=""sigfig"" digits=""3"" label=""Coefficient of performance""></pl-number-input>
<p> How much power (in {{params.unitsPower}}) needs to be supplied to the refrigerator? </p>
<pl-number-input answers-name=""Pin"" comparison=""sigfig"" digits=""3"" label=""Input power (in {{params.unitsPower}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    convToAbs = 273;
    Tmax = math.randomInt(30,45);
    Tmin = math.randomInt(-20,-5);
    Qc = math.randomInt(1,20);

}
else {
    convToAbs = 540;
    Tmax = math.randomInt(85,110);
    Tmin = math.randomInt(0,25);
    Qc = math.randomInt(1,20);
}


cop = (Tmin+convToAbs)/(Tmax - Tmin);

Pin = Qc/cop;

if (unitSel === 1){
    Pin = Pin*1000/(550);
}

data = {
    params: { 
        Tmin: Tmin,
        Tmax: Tmax,
        Qc: Qc,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsPower: unitsPower
    },
    correct_answers: {
        cop: cop,
        Pin: Pin
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

let  fluidProperties = {
    ""water"": {
        ""sg"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72
    },
    ""diesel"": {
        ""sg"": 0.8
    },
    ""benzene"": {
        ""sg"": 0.88
    },
    ""ethanol"": {
        ""sg"": 0.79
    }, 
    ""acetone"": {
        ""sg"": 0.78
    },
    ""corn oil"": {
        ""sg"": 0.92
    },
    ""gylcerine"": {
        ""sg"": 1.26
    },
    ""honey"": {
        ""sg"": 1.4
    },
    ""bromine"":{
        ""sg"": 3.1
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    getMaterialProperties
}","an ideal refrigerator operates between a high temperature of 300 k and a minimum temperature of 250 k.

it is to extract 1000 w from the reservoir at the lower temperature.

1. what is the maximum coefficient of performance of the refrigerator?
2. how much power (in w) needs to be supplied to the refrigerator?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Carnot refrigerator,Heat,Thm,"Secondlaw,Temperature,Power",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B, ME 135, ME 243",Refrigeration Cycles
161,siphon,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Siphon"",
    ""stem"":""heat"",
    ""topic"": ""fluids"",
    ""tags"": [""energy"", ""pressure"",""fluid""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-figure file-name=""siphon.png""></pl-figure>
<pl-question-panel>
  <p> A pipe has diameter {{params.D}} {{params.unitsDiameter}} is dipped {{params.h2}} {{params.unitsDist}} into a tank of {{params.fluidName}} (specific gravity = {{params.sg}}) and used as a siphon. <p> </p>
  <p> The highest point of the siphon is {{params.h4}} {{params.unitsDist}} above the fluid level while the exit of the siphon is at height {{params.h6}} {{params.unitsDist}} below the level of the fluid.</p> 
  <p> The pressure of the fluid on the tank is atmospheric. </p>
</pl-question-panel>
  
  
  What is the velocity (in  {{params.unitsSpeed}}) of the fluid at the exit of the siphon? 
  <pl-number-input answers-name=""V"" comparison=""sigfig"" digits=""3"" label="" V (in {{params.unitsSpeed}}) ""></pl-number-input>
  What is the volumetric flow rate (in {{params.unitsFlowRate}}) ?
  <pl-number-input answers-name=""vdot"" comparison=""sigfig"" digits=""3"" label=""Q (in {{params.unitsFlowRate}})""></pl-number-input>
  What is the mass flow rate (in {{params.unitsMassRate}}) ?
  <pl-number-input answers-name=""mdot"" comparison=""sigfig"" digits=""3"" label=""$ \dot{m} $ (in {{params.unitsMassRate}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""\\( m^3/s \\)"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s"",
            ""pressure"": ""kPa""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""\\( ft^3/s \\)"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s"",
            ""pressure"": ""psi""
        }
    }
    unitSel = 1;
 //   unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop= props.getFluidProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg= fluidprop.sg;



if (unitSel === 0) {
    g = 9.81;
    h6 = 0.25*math.randomInt(1,9);
    h4 = 0.3*math.randomInt(1,7);
    h2 = 0.2*math.randomInt(1,6);
    V = math.sqrt(2*g*h6);
    p2 = h2*rho*g;
    p3 = p2 - rho*V*V/2*1e-3;
    p4 = -rho*1e-3* (h4*g +V*V/2);
    Dd = 2*math.randomInt(5, 11);
    D = Dd/1000;
    A = math.pi/4*D*D;
    vdot = A*V;
    mdot = rho*vdot;
    p2 = p2/1000;
    p3 = p3/1000;
    p4 = p4/1000;
} else {
    g = 32.2;
    h6 = 0.5*math.randomInt(1,9);
    h4 = 0.5*math.randomInt(1,7);
    h2 = 0.2*math.randomInt(1,6);
    V = math.sqrt(2*g*h6);
    rhoslug = rho/32.2;
    p2 = h2*rhoslug*g;
    p3 = p2 - rhoslug*V*V/2;
    p4 = -(h4*rhoslug*g)-rhoslug*V*V/2;
    Dd = 0.25*math.randomInt(2, 10);
    D = Dd/12;
    A = math.pi/4*D*D;
    vdot = A*V;
    mdot = rho*vdot;
    p2 = p2/144;
    p3 = p3/144;
    p4 = p4/144;
}



data = {
    params: { 
        h6: h6,
        h2: h2,
        h4: h4,
        sg: sg,
        rho: rho,
        D: Dd,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsDiameter: unitsDiameter,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate,
        unitsPressure: unitsPressure,
        unitsDist: unitsDist
    },
    correct_answers: {
        V: V,
        p2: p2,
        p3: p3,
        p4: p4,
        vdot: vdot,
        mdot: mdot
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const gasProperties = {
    ""air"": {
        ""sg"": 0.00125,
        ""mu"": 18.1e-6,
        ""Cp"": 1.005,
    },
    ""nitrogen"": {
        ""sg"": 0.001164,
        ""mu"": 17.2e-6,
        ""Cp"": 1.040
    },
    ""helium"": {
        ""sg"": 0.000178,
        ""mu"": 1.96e-5,
        ""Cp"": 5.193
    },
    ""methane"": {
        ""sg"": 0.000657,
        ""mu"": 1.10e-5,
        ""Cp"": 2.254
    },
    ""carbon dioxide"": {
        ""sg"": 0.00187,
        ""mu"": 1.47e-5,
        ""Cp"": 0.00120
    }
}

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""gylcerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getGasProperties = (material, unitSel) =>{
    let mat = gasProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    gasProperties,
    getMaterialProperties,
    getFluidProperties,
    getGasProperties
}","a pipe has diameter 0.5 meters is dipped 2 meters into a tank of water (specific gravity = 1) and used as a siphon.  
the highest point of the siphon is 1 meter above the fluid level while the exit of the siphon is at height 0.5 meters below the level of the fluid.
the pressure of the fluid on the tank is atmospheric. 

what is the velocity (in meters/second) of the fluid at the exit of the siphon? 

what is the volumetric flow rate (in cubic meters/second) ?

what is the mass flow rate (in kilograms/second) ?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Siphon,Heat,Fluids,"Energy,Pressure,Fluid",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 113, ME 240A, ME 240B",Mass Flow Rate
162,siphon1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Siphon"",
    ""stem"":""heat"",
    ""topic"": ""fluids"",
    ""tags"": [""energy"", ""pressure"",""fluid""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-figure file-name=""siphon.png""></pl-figure>
<p> </p>
<pl-question-panel>
  <p> A pipe has diameter {{params.D}} {{params.unitsDiameter}} is dipped {{params.h2}} {{params.unitsDist}} into a tank of {{params.fluidName}} (specific gravity = {{params.sg}}) and used as a siphon. <p> </p>
  <p> The highest point of the siphon is {{params.h4}} {{params.unitsDist}} above the fluid level while the exit of the siphon is at height {{params.h6}} {{params.unitsDist}} below the level of the fluid.</p> 
  <p> The pressure of the fluid on the tank is atmospheric. </p>
</pl-question-panel>
  
  
  What is the pressure (in  {{params.unitsPressure}}) at the level of entrance to the siphon pipe outside the pipe? 
  <pl-number-input answers-name=""p2"" comparison=""sigfig"" digits=""3"" label="" Pressure (in {{params.unitsPressure}}) ""></pl-number-input>
  What is the pressure (in  {{params.unitsPressure}}) at the level of entrance to the siphon pipe inside the pipe? 
  <pl-number-input answers-name=""p3"" comparison=""sigfig"" digits=""3"" label=""Pressure (in {{params.unitsPressure}})""></pl-number-input>
  What is the pressure (in  {{params.unitsPressure}}) at the highest point  inside the pipe? 
  <pl-number-input answers-name=""p4"" comparison=""sigfig"" digits=""3"" label=""Pressure (in {{params.unitsPressure}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const props = require('./properties.js');

const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""J"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""flowRate"": ""\\( m^3/s \\)"",
            ""heatRate"": ""kW"",
            ""massRate"": ""kg/s"",
            ""pressure"": ""kPa""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""flowRate"": ""\\( ft^3/s \\)"",
            ""heatRate"": ""BTU/s"",
            ""massRate"": ""lb/s"",
            ""pressure"": ""psi""
        }
    }
    unitSel = 1;
 //   unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsFlowRate = units[unitSystems[unitSel]].flowRate;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;
    unitsMassRate = units[unitSystems[unitSel]].massRate;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;


fluidProperties = props.fluidProperties;
fluidKeys = Object.keys(fluidProperties);
numFluids = fluidKeys.length;
fluidIndex = math.randomInt(0,numFluids);
fluidName = fluidKeys[fluidIndex];
fluidprop= props.getFluidProperties(fluidName, unitSel);
Cp = fluidprop.Cp;
rho = fluidprop.rho;
sg= fluidprop.sg;



if (unitSel === 0) {
    g = 9.81;
    h6 = 0.25*math.randomInt(1,9);
    h4 = 0.3*math.randomInt(1,7);
    h2 = 0.2*math.randomInt(1,6);
    V = math.sqrt(2*g*h6);
    p2 = h2*rho*g;
    p3 = p2 - rho*V*V/2*1e-3;
    p4 = -rho*1e-3* (h4*g +V*V/2);
    Dd = 2*math.randomInt(5, 11);
    D = Dd/1000;
    A = math.pi/4*D*D;
    vdot = A*V;
    mdot = rho*vdot;
    p2 = p2/1000;
    p3 = p3/1000;
    p4 = p4/1000;
} else {
    g = 32.2;
    h6 = 0.5*math.randomInt(1,9);
    h4 = 0.5*math.randomInt(1,7);
    h2 = 0.2*math.randomInt(1,6);
    V = math.sqrt(2*g*h6);
    rhoslug = rho/32.2;
    p2 = h2*rhoslug*g;
    p3 = p2 - rhoslug*V*V/2;
    p4 = -(h4*rhoslug*g)-rhoslug*V*V/2;
    Dd = 0.25*math.randomInt(2, 10);
    D = Dd/12;
    A = math.pi/4*D*D;
    vdot = A*V;
    mdot = rho*vdot;
    p2 = p2/144;
    p3 = p3/144;
    p4 = p4/144;
}



data = {
    params: { 
        h6: h6,
        h2: h2,
        h4: h4,
        sg: sg,
        rho: rho,
        D: Dd,
        fluidName: fluidName,
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsTemperature: unitsTemperature,
        unitsCp: unitsCp,
        unitsHeat: unitsHeat,
        unitsSpeed: unitsSpeed,
        unitsDiameter: unitsDiameter,
        unitsFlowRate: unitsFlowRate,
        unitsHeatRate: unitsHeatRate,
        unitsMassRate: unitsMassRate,
        unitsPressure: unitsPressure,
        unitsDist: unitsDist
    },
    correct_answers: {
        V: V,
        p2: p2,
        p3: p3,
        p4: p4,
        vdot: vdot,
        mdot: mdot
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const math = require('mathjs');

const gasProperties = {
    ""air"": {
        ""sg"": 0.00125,
        ""mu"": 18.1e-6,
        ""Cp"": 1.005,
    },
    ""nitrogen"": {
        ""sg"": 0.001164,
        ""mu"": 17.2e-6,
        ""Cp"": 1.040
    },
    ""helium"": {
        ""sg"": 0.000178,
        ""mu"": 1.96e-5,
        ""Cp"": 5.193
    },
    ""methane"": {
        ""sg"": 0.000657,
        ""mu"": 1.10e-5,
        ""Cp"": 2.254
    },
    ""carbon dioxide"": {
        ""sg"": 0.00187,
        ""mu"": 1.47e-5,
        ""Cp"": 0.00120
    }
}

const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1,
        ""Tfreeze"": 0,
        ""Tboil"": 100
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22,
        ""Tfreeze"": -50,
        ""Tboil"": 150
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05,
        ""Tfreeze"": -60,
        ""Tboil"": 300
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19,
        ""Tfreeze"": 5.5,
        ""Tboil"": 80
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4,
        ""Tfreeze"": -114,
        ""Tboil"": 78.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15,
        ""Tfreeze"": -95,
        ""Tboil"": 56
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9,
    ""Tfreeze"": -11,
    ""Tboil"": 245
        
    },
    ""gylcerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43,
        ""Tfreeze"": 17.8,
        ""Tboil"": 290
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52,
        ""Tfreeze"": -10,
        ""Tboil"": 80
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5,
        ""Tfreeze"": -7.2,
        ""Tboil"": 59
    }
}

let materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""Es"": [70,80],
        ""sults"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33,
        ""Cp"": 0.9
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.42
    },
    ""copper"": {
        ""sg"": 7.7,
        ""Es"": [195,210],
        ""sults"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30,
        ""Cp"": 0.386
    },
    ""brass"": {
        ""sg"": 8.4,
        ""Es"": [96,110],
        ""sults"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34,
        ""Cp"": 0.380
    }
}

const getFluidProperties = (material, unitSel) =>{
    let mat = fluidProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getGasProperties = (material, unitSel) =>{
    let mat = gasProperties[material];

    if (unitSel === 0) {
        mat.rho = mat.sg*1000;

    } else {
        mat.rho = mat.sg*62.4;
        mat.mu = mat.mu*0.672;
        mat.Cp = math.round(100*mat.Cp*0.239)/100;
    }

    return mat;

}

const getMaterialProperties = (material, unitSel)=> {
    let mat = materialProperties[material];
    E = math.randomInt(mat.Es[0],mat.Es[1]);
    sult = math.randomInt(mat.sults[0], mat.sults[1]);
    nud = mat.nud;
    Cp = mat.Cp;
    G = E/(2*(1+nud));

    if (unitSel === 0) {

    }
    else {
       E = E*145037.737734*1e-6;
       G = G*145037.737734*1e-6;
       sult = sult*145.037738*1e-3;
       Cp = math.round(100*Cp*0.239)/100;
    }

    materialProperties[material].E = E;
    materialProperties[material].G = G;
    materialProperties[material].sult = sult;
    materialProperties[material].Cp = Cp;
    return mat;
}


module.exports = {
    fluidProperties,
    materialProperties,
    gasProperties,
    getMaterialProperties,
    getFluidProperties,
    getGasProperties
}","a pipe has diameter 0.5 meters is dipped 2 meters into a tank of water (specific gravity = 1) and used as a siphon.  
the highest point of the siphon is 1 meter above the fluid level while the exit of the siphon is at height 0.5 meters below the level of the fluid.
the pressure of the fluid on the tank is atmospheric. 

what is the pressure (in pascals) at the level of entrance to the siphon pipe outside the pipe? 

what is the pressure (in pascals) at the level of entrance to the siphon pipe inside the pipe? 

what is the pressure (in pascals) at the highest point inside the pipe?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Siphon,Heat,Fluids,"Energy,Pressure,Fluid",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 113, ME 240B, ME 240A",Fluid Mechanics
163,parabolic1,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"":""Centroid: Parabolic 1"",
    ""stem"":"""",
    ""topic"": ""Statics"",
    ""tags"": [""weight"", ""centroid"",""moment"", ""force""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <pl-figure file-name=""parabolic.png""></pl-figure>
  <pl-figure file-name=""parabolicvert.png""></pl-figure>
  <p></p>
  The figure shows a parabolic area. Let’s determine the centroid of this area.
</pl-question-panel>

<p>
The area of the element in the figure is:
</p>
<pl-multiple-choice answers-name=""area1"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $ \frac{1}{2} \int_0^8 x^{1/3} dx $ </pl-answer>
  <pl-answer correct=""false""> $ \frac{1}{2} \int_0^1 x^{1/3} dx $ </pl-answer>
  <pl-answer correct=""false""> $ \int_0^1 (8-8y^3) dy $ </pl-answer>
  <pl-answer correct=""false""> $  \int_0^8 (8-8y^3) dy $ </pl-answer>
  <pl-answer correct=""false""> $  \int_0^8 8 y^3 dy $ </pl-answer>
</pl-multiple-choice>

<p>
The coordinates of the centroid of the area of the element above (indicated by the red dot) is:
</p>
<pl-multiple-choice answers-name=""area2"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $ (x,\frac{y}{2}) $ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{x}{2},y) $ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{8-x}{2},\frac{y}{2}) $ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{8+x}{2},\frac{y}{2}) $ </pl-answer>
</pl-multiple-choice>

<p>
  The coordinates of centroid of the area using the element above
</p>
<pl-multiple-choice answers-name=""area3"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ (\frac{32}{7},\frac{1}{5})$ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{16}{7},\frac{2}{5}) $ </pl-answer>
  <pl-answer correct=""true""> $ (\frac{32}{7},\frac{2}{5}) $ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{16}{7},\frac{3}{5}) $ </pl-answer>
</pl-multiple-choice>


",,,,,"what is the area of the element in the figure?

options:
1. $ \frac{1}{2} \int_0^8 x^{1/3} dx $
2. $ \frac{1}{2} \int_0^1 x^{1/3} dx $
3. $ \int_0^1 (8-8y^3) dy $
4. $ \int_0^8 (8-8y^3) dy $
5. $ \int_0^8 8 y^3 dy $

 what are the coordinates of the centroid of the area of the element above (indicated by the red dot)?

options:
1. $ (x,\frac{y}{2}) $
2. $ (\frac{x}{2},y) $
3. $ (\frac{8-x}{2},\frac{y}{2}) $
4. $ (\frac{8+x}{2},\frac{y}{2}) $

 what are the coordinates of the centroid of the area using the element above?

options:
1. $ (\frac{32}{7},\frac{1}{5})$
2. $ (\frac{16}{7},\frac{2}{5}) $
3. $ (\frac{32}{7},\frac{2}{5}) $
4. $ (\frac{16}{7},\frac{3}{5}) $",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Centroid: parabolic 1,,Statics,"Weight,Centroid,Moment,Force",,False,sundar@google.com,Num,1,,1.0,Python,,,,,"Calculus, Analytical Geometry"
164,parabolic2,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"":""Centroid: Parabolic 2"",
    ""stem"":"""",
    ""topic"": ""Statics"",
    ""tags"": [""weight"", ""centroid"",""moment"", ""force""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <pl-figure file-name=""parabolic.png""></pl-figure>
  <pl-figure file-name=""parabolichoriz.png""></pl-figure>
  <p></p>
  The figure shows a parabolic area. Let’s determine the centroid of this area.
</pl-question-panel>

<p>
The area of the element in the figure is:
</p>
<pl-multiple-choice answers-name=""area1"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ \frac{1}{2} \int_0^8 x^{1/3} dx $ </pl-answer>
  <pl-answer correct=""false""> $ \frac{1}{2} \int_0^1 x^{1/3} dx $ </pl-answer>
  <pl-answer correct=""true""> $ \int_0^1 (8-8y^3) dy $ </pl-answer>
  <pl-answer correct=""false""> $  \int_0^8 (8-8y^3) dy $ </pl-answer>
  <pl-answer correct=""false""> $  \int_0^8 8 y^3 dy $ </pl-answer>
</pl-multiple-choice>

<p>
The coordinates of the centroid of the area of the element above (indicated by the red dot) is:
</p>
<pl-multiple-choice answers-name=""area2"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ (x,\frac{y}{2}) $ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{x}{2},y) $ </pl-answer>
  <pl-answer correct=""false""> $ (\frac{8-x}{2},\frac{y}{2}) $ </pl-answer>
  <pl-answer correct=""true""> $ (\frac{8+x}{2},\frac{y}{2}) $ </pl-answer>
</pl-multiple-choice>

<p>
  The y-coordinate of the centroid of the area using the element above is
</p>
<pl-multiple-choice answers-name=""area3"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ \frac{1}{5} $ </pl-answer>
  <pl-answer correct=""true""> $ \frac{2}{5} $ </pl-answer>
  <pl-answer correct=""false""> $ \frac{3}{5} $ </pl-answer>
  <pl-answer correct=""false""> $ \frac{1}{7} $ </pl-answer>
</pl-multiple-choice>


",,,,,"what is the area of the element in the figure?
options:
1. $ \frac{1}{2} \int_0^8 x^{1/3} dx $
2. $ \frac{1}{2} \int_0^1 x^{1/3} dx $
3. $ \int_0^1 (8-8y^3) dy $
4. $ \int_0^8 (8-8y^3) dy $
5. $ \int_0^8 8 y^3 dy $

 what are the coordinates of the centroid of the area of the element above (indicated by the red dot)?
options:
1. $ (x,\frac{y}{2}) $
2. $ (\frac{x}{2},y) $
3. $ (\frac{8-x}{2},\frac{y}{2}) $
4. $ (\frac{8+x}{2},\frac{y}{2}) $

 what is the y-coordinate of the centroid of the area using the element above?
options:
1. $ \frac{1}{5} $
2. $ \frac{2}{5} $
3. $ \frac{3}{5} $
4. $ \frac{1}{7} $",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Centroid: parabolic 2,,Statics,"Weight,Centroid,Moment,Force",,False,sundar@google.com,Num,1,,1.0,Python,,,,,"Analytical Geometry, Coordinate Geometry"
165,parabolic3,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Centroid: parabolic 3"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""centroid""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""parabolic3.png""></pl-figure>

<pl-question-panel> 
  In the figure below, the coordinates of the centroid are:
</pl-question-panel>
<pl-multiple-choice answers-name=""cent"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> (0.375,0.6) </pl-answer>
  <pl-answer correct=""false""> (0.3,0.75) </pl-answer>
  <pl-answer correct=""true""> (0.75,0.3) </pl-answer>
  <pl-answer correct=""false""> (0.6,0.375)</pl-answer>
</pl-multiple-choice>

",,,,,"what are the coordinates of the centroid in the figure below?
options:
a) (0.375,0.6)
b) (0.3,0.75)
c) (0.75,0.3)
d) (0.6,0.375)",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Centroid: parabolic 3,Freebody,Statics,Centroid,,False,sundar@google.com,Ma,1,,1.0,,,,,,"Coordinate Geometry, Analytical Geometry"
166,parabolic4,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Centroid: parabolic 3"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""centroid""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""parabolic4.png""></pl-figure>

<pl-question-panel> 
  In the figure below, the coordinates of the centroid are:
</pl-question-panel>
<pl-multiple-choice answers-name=""cent"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> (0.375,0.6) </pl-answer>
  <pl-answer correct=""false""> (0.3,0.75) </pl-answer>
  <pl-answer correct=""false""> (0.75,3) </pl-answer>
  <pl-answer correct=""false""> (0.6,0.375)</pl-answer>
</pl-multiple-choice>

",,,,,"what are the coordinates of the centroid in the given figure?

options:
a) (0.375,0.6)
b) (0.3,0.75)
c) (0.75,3)
d) (0.6,0.375)",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Centroid: parabolic 3,Freebody,Statics,Centroid,,False,sundar@google.com,Ma,1,,1.0,,,,,,Analytical Geometry
167,recthole,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Centroid: Rectangle/hole"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""centroid""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""recthole.png""></pl-figure>

<pl-question-panel> 
  In the figure below, the y-coordinate of the centroid is :
</pl-question-panel>

<pl-number-input-fixed answers-name=""y"" correct-answer-fixed=""42.25"" comparison=""sigfig"" digits=""3"" label=""$ y $""></pl-number-input-fixed>



",,,,,"in the figure below, the y-coordinate of the centroid is:
a) 0
b) 1
c) 2
d) 3",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Centroid: rectangle/hole,Freebody,Statics,Centroid,,False,sundar@google.com,Ma,1,,1.0,,,,,,Analytical Geometry
168,semicircular,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Centroid: semicircle"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""centroid""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""semicircle.png""></pl-figure>

<pl-question-panel> 
  In the figure above, the coordinates of the centroid (in mm) are:
</pl-question-panel>
<pl-multiple-choice answers-name=""cent"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> 28.2 </pl-answer>
  <pl-answer correct=""false"">  18.1</pl-answer>
  <pl-answer correct=""false""> 20.6 </pl-answer>
  <pl-answer correct=""true""> 23.4 </pl-answer>
</pl-multiple-choice>

",,,,,"what are the coordinates of the centroid (in mm) in the given figure?

options:
a) 28.2
b) 18.1
c) 20.6
d) 23.4",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Centroid: semicircle,Freebody,Statics,Centroid,,False,sundar@google.com,Ma,1,,1.0,,,,,,"Coordinate Geometry, Analytical Geometry"
169,tbeamcentroid,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"":""Centroid t-beam"",
    ""stem"":"""",
    ""topic"": ""Statics"",
    ""tags"": [""weight"", ""beam"",""moment"", ""force""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <pl-figure file-name=""tbeam.png""></pl-figure>
  <p></p>
  What is the y-coordinate of the centroid of the figure?
</pl-question-panel>

<pl-number-input-fixed answers-name=""y"" correct-answer-fixed=""13.56"" comparison=""sigfig"" digits=""3"" label=""y""></pl-number-input-fixed>
",,,,,what is the y-coordinate of the centroid of the figure?,8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Centroid t-beam,,Statics,"Weight,Beam,Moment,Force",,False,sundar@google.com,Num,1,,1.0,Python,,,,,Analytical Geometry
170,trapezoidcentroid,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"":""Centroid trapezpoid"",
    ""stem"":"""",
    ""topic"": ""Statics"",
    ""tags"": [""weight"", ""centroid"",""moment"", ""force""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <pl-figure file-name=""trapezoid.png""></pl-figure>
  <p></p>
  What are the coordinates of the centroid of the figure?
</pl-question-panel>

<p> What is the x-coordinate of centroid? </p>
<pl-number-input-fixed answers-name=""x"" correct-answer-fixed=""3.27"" comparison=""sigfig"" digits=""3"" label=""x""></pl-number-input-fixed>
<p> What is the y-coordinate of centroid? </p>
<pl-number-input-fixed answers-name=""y"" correct-answer-fixed=""2.82"" comparison=""sigfig"" digits=""3"" label=""y""></pl-number-input-fixed>
",,,,,"what are the coordinates of the centroid of the figure?
    
 what is the x-coordinate of centroid?
    
 what is the y-coordinate of centroid?",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Centroid trapezpoid,,Statics,"Weight,Centroid,Moment,Force",,False,sundar@google.com,Num,1,,1.0,Python,,,,,"Coordinate Geometry, Analytical Geometry"
171,distForces6,"{
    ""uuid"": ""5c4rtac5-1031-45ed-a573-feb64c25wngf"",
    ""title"": ""Simple force distribution"",
	""stem"": ""Test your understanding of distributed forces"",
    ""topic"": ""statics"",
    ""tags"": [""v2"", ""for2"", ""ang"", ""T""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""jlam154@ucr.edu"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel> 
  <pl-figure file-name=""DistForceFBD1.jpg""></pl-figure>
  <pl-figure file-name =""DistForceFBD2.jpg""></pl-figure>
</p>
<p>The beam in the figure shows a concentrated 25 kN force and a distributed force of 10 kN/m. The figure also shows the free-body diagram of the beam. Which of the following are true statements?
</p>
<pl-checkbox answers-name=""DistForceFBD1_2"" weight=""1"" inline=""true"">
  <pl-answer correct=""false"">The freebody diagram is complete and correct  </pl-answer>
  <pl-answer correct=""true"">A horizontal reaction at A should be added  </pl-answer>
  <pl-answer correct=""false"">The vertical reaction at A should be deleted. </pl-answer>
  <pl-answer correct=""true"">A moment reaction at A should be added  </pl-answer>
  <pl-answer correct=""false"">The vertical reaction at B should be deleted.  </pl-answer>
  <pl-answer correct=""true"">The horizontal reaction at B should be deleted. </pl-answer>
  <pl-answer correct=""false"">A moment reaction at B should be added. </pl-answer>
  <pl-answer correct=""true""> The concentrated force of 25 kN should be added. </pl-answer>


</pl-checkbox>",,,,,"which of the following are true statements about the beam in the figure?

options:
a) the freebody diagram is complete and correct
b) a horizontal reaction at a should be added
c) the vertical reaction at a should be deleted
d) a moment reaction at a should be added
e) the vertical reaction at b should be deleted
f) the horizontal reaction at b should be deleted
g) a moment reaction at b should be added
h) the concentrated force of 25 kn should be added.",5c4rtac5-1031-45ed-a573-feb64c25wngf,Simple force distribution,Test your understanding of distributed forces,Statics,"V2,For2,Ang,T",,False,jlam154@ucr.edu,Mc,1,,1.0,Javascript,,,,"ME 010, ME 110","Statics and Mechanics, Reaction Forces, Static Equilibrium"
172,beamDistributed,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram beam distributed"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""beamFBD.png""></pl-figure>
<pl-question-panel> 
  The beam in the figure shows a concentrated 25 kN force and a distributed force of 10 kN/m. The figure also shows the free-body diagram of the beam. Which of the following is/are true about the freebody diagram?
</pl-question-panel>
<pl-checkbox answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> A horizontal reaction at A should be added </pl-answer>
  <pl-answer correct=""true""> A moment reaction at A should be added </pl-answer>
  <pl-answer correct=""true""> The horizontal reaction at B should be deleted. </pl-answer>
  <pl-answer correct=""true""> The concentrated force of 25 kN should be added. </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct</pl-answer>
  <pl-answer correct=""false""> The vertical reaction at A should be deleted.</pl-answer>
  <pl-answer correct=""false""> A moment reaction at B should be added.</pl-answer>
</pl-checkbox>

",,,,,"which of the following is/are true about the freebody diagram?

options:
a) a horizontal reaction at a should be added
b) a moment reaction at a should be added
c) the horizontal reaction at b should be deleted.
d) the concentrated force of 25 kn should be added.
e) the freebody diagram is complete and correct
f) the vertical reaction at a should be deleted.
g) a moment reaction at b should be added.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram beam distributed,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 010,"Statics and Mechanics, Reaction Forces"
173,columnFoundation,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram column"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""column.png""></pl-figure>
<pl-question-panel> 
  A column of mass M is fixed to a foundation and is connected by a cable to the ground. Which of the following statements is/are true about the freebody diagram shown?
</pl-question-panel>
<pl-checkbox answers-name=""column"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> A horizontal reaction at O should be included </pl-answer>
  <pl-answer correct=""true""> A moment reaction at O should be included </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct </pl-answer>
  <pl-answer correct=""false""> The force T should be in the opposite direction.</pl-answer>
  <pl-answer correct=""false""> The weight W should not be included in the freebody diagram.</pl-answer>
</pl-checkbox>

",,,,,"which of the following statements is/are true about the freebody diagram shown?

options:
a) a horizontal reaction at o should be included
b) a moment reaction at o should be included
c) the freebody diagram is complete and correct
d) the force t should be in the opposite direction.
e) the weight w should not be included in the freebody diagram.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram column,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,,"Statics and Mechanics, Static Equilibrium"
174,groceryBag,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram grocery"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""grocery1.png""></pl-figure>
<pl-question-panel> 
  The figure shows a person holding a grocery bag. The figure also shows the freebody diagram of the person. Which of the following statements is/are true?
</pl-question-panel>
<pl-checkbox answers-name=""grocery"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $ M_y $ should be in the opposite direction </pl-answer>
  <pl-answer correct=""true""> $ N_y $ should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> Weight $ W_{hand} $ should be deleted. </pl-answer>
  <pl-answer correct=""false""> $ W=200 N$ should be deleted. </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct</pl-answer>
</pl-checkbox>

",,,,,"which of the following statements is/are true?

options:
1. $ m_y $ should be in the opposite direction
2. $ n_y $ should be in the opposite direction
3. weight $ w_{hand} $ should be deleted.
4. $ w=200 n$ should be deleted.
5. the freebody diagram is complete and correct",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram grocery,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,,"Statics and Mechanics, Static Equilibrium"
175,hangingWeight,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram concept"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""hanging1.png""></pl-figure>
<pl-question-panel> 
  In the figure below, which of the following is true of the freebody diagram? (more than one may be true) 
</pl-question-panel>
<pl-checkbox answers-name=""hanging"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> $ T_1 $ needs to point in the opposite direction.</pl-answer>
  <pl-answer correct=""true""> $ T_2 $ needs to point vertically downwards. </pl-answer>
  <pl-answer correct=""false""> $ T_3 $ needs to point in the opposite direction. </pl-answer>
  <pl-answer correct=""false""> $T_2$  needs to point in the opposite direction.  </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct.</pl-answer>
</pl-checkbox>",,,,,"in the figure below, which of the following is true of the freebody diagram? (more than one may be true)

options:
1. $ t_1 $ needs to point in the opposite direction.
2. $ t_2 $ needs to point vertically downwards.
3. $ t_3 $ needs to point in the opposite direction.
4. $t_2$ needs to point in the opposite direction.
5. the freebody diagram is complete and correct.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram concept,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 103,Statics and Mechanics
176,pincers,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram pincer"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""pincer.png""></pl-figure>
<pl-question-panel> 
  The figure below shows pincers holding an object. The figure also the free body diagram of the lower half of the pincers. Which of the following are true? (Mark all possible answers)
</pl-question-panel>
<pl-checkbox answers-name=""pincer"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The force N should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> The force F should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> The force R should be deleted </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct</pl-answer>
</pl-checkbox>",,,,,"which of the following are true? (mark all possible answers)
options:
1. the force n should be in the opposite direction
2. the force f should be in the opposite direction
3. the force r should be deleted
4. the freebody diagram is complete and correct",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram pincer,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 010,"Statics and Mechanics, Newton's Second Law of Motion"
177,rollerInclined1,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram inclined roller"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""rollerInclined1.png""></pl-figure>
<pl-question-panel> 
  The figure shows a roller being held in place by means of weight connected by a cable over a pulley. Shown below is the free-body diagram of the roller. Which of the following is/are true?

</pl-question-panel>
<pl-checkbox answers-name=""roller"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The force due to the cable should point in the opposite direction. </pl-answer>
  <pl-answer correct=""true""> The force at A is pointing in the incorrect direction. </pl-answer>
  <pl-answer correct=""true""> The force at A must point perpendicular to the incline and directed towards towards G </pl-answer>
  <pl-answer correct=""false""> The force due to the cable should be deleted.</pl-answer>
  <pl-answer correct=""false""> The force from the cable must be parallel to the incline. </pl-answer>
  <pl-answer correct=""false""> The downward vertical force through G must be deleted. </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct</pl-answer>
</pl-checkbox>
",,,,,"which of the following is/are true?

options:
a) the force due to the cable should point in the opposite direction.
b) the force at a is pointing in the incorrect direction.
c) the force at a must point perpendicular to the incline and directed towards g.
d) the force due to the cable should be deleted.
e) the force from the cable must be parallel to the incline.
f) the downward vertical force through g must be deleted.
g) the freebody diagram is complete and correct.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram inclined roller,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,"ME 010, ME 103","Reaction Forces, Statics and Mechanics, Newton's Second Law of Motion"
178,rollerInclined2,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram roller inclined 2"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""rollerInclined2.png""></pl-figure>
<pl-question-panel> 
  The figure below shows the same system with the free body diagram of the pulley. Note that B represents the axle of the pulley. Assume that the pulley has no mass. Which of the following is/are true? (Mark all the statements that are true)

<pl-checkbox answers-name=""roller"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> Force $ T_2 $ should be directed in the opposite direction </pl-answer>
  <pl-answer correct=""true""> A horizontal force should be added at B. </pl-answer>
  <pl-answer correct=""false""> Force $T_1 $ should be directed in the opposite direction. </pl-answer>
  <pl-answer correct=""false""> Force $F_y $ should be deleted. </pl-answer>
  <pl-answer correct=""false""> The freebody diagram is complete and correct</pl-answer>
</pl-checkbox>

",,,,,"which of the following is/are true? (mark all the statements that are true)
options:
1. force $ t_2 $ should be directed in the opposite direction 
2. a horizontal force should be added at b. 
3. force $t_1 $ should be directed in the opposite direction. 
4. force $f_y $ should be deleted. 
5. the freebody diagram is complete and correct",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram roller inclined 2,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 010,"Statics and Mechanics, Static Equilibrium, Reaction Forces"
179,rollerInclined3,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram roller inclined 3"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""rollerInclined3.png""></pl-figure>
<pl-question-panel> 
  The figure below shows the same system with the free-body diagram of the mass. Which of the following is true? (Mark all the statements that are true)

<pl-checkbox answers-name=""roller"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The free body diagram is complete and correct. </pl-answer>
  <pl-answer correct=""false""> The force F should be pointing downwards. </pl-answer>
  <pl-answer correct=""false""> The weight should be pointing in the upward direction. </pl-answer>
</pl-checkbox>


",,,,,"which of the following is true? (mark all the statements that are true)

options:
a) the free body diagram is complete and correct.
b) the force f should be pointing downwards.
c) the weight should be pointing in the upward direction.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram roller inclined 3,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,,Statics and Mechanics
180,frame2,"{
""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
""title"": ""Frames and Machines"",
""stem"" : ""Force analysis"", 
""topic"": ""statics"",
""tags"": [""frames"", ""vector"", ""force"", ""moment""],
""prereqs"": """",
""isAdaptive"": ""true"",
""createdBy"": ""epere194@ucr.edu"",
""qType"": ""num"",
""nSteps"": 1,
""updatedBy"":"""", 
""difficulty"": 1,
""codelang"": ""javascript""
}
","<pl-question-panel>
    <pl-figure file-name=""frame2.png""></pl-figure>
    <p>In the figure shown, AF and EG are at right angles to one another, and AF is perpendicular to AB.</p>
    <p>Compute the forces supported by the pins A and D given the machine is under the load (W) in {{params.unitsForce}}</p>
    <p>Let the weight $ \mathbf(W) = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$ and $ \mathbf{L}_4 = {{params.length4}} {{params.unitsDist}}$</p>
    <p>Let the angle $ \theta={{params.angle}}$ (degrees)</p>
  </pl-question-panel>
    

  <pl-number-input answers-name=""pinA"" comparison=""sigfig"" digits=""3"" label="" Force at pin A =""></pl-number-input>
  <pl-number-input answers-name=""pinD"" comparison=""sigfig"" digits=""3"" label="" Force at pin D =""></pl-number-input>

  ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight= (math.randomInt(500,3000));//the force
	length2= (math.randomInt(3,15)); //length of l1 in m or ft
    angle=45;
    angleRAD=angle*(Math.PI/180);

	length1= length2*((math.randomInt(825,845))/1000);
    length3= length2*((math.randomInt(650,675))/1000);
    length4= length2*((math.randomInt(150,175))/1000);


    length1=(Math.round(length1*10))/10;
    length2=(Math.round(length2*10))/10;
    length3=(Math.round(length3*10))/10;
    length4=(Math.round(length4*10))/10;
    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length3=length3*3;
        length4=length4*3;

    length1=(Math.round(length1*10))/10;
    length2=(Math.round(length2*10))/10;
    length3=(Math.round(length3*10))/10;
    length4=(Math.round(length4*10))/10;
        
    }


thetaRAD=Math.atan(length3/(length4*0.5));

pinD=(weight*Math.sin(angleRAD)*length1)/(Math.sin(thetaRAD)*length4);
F=(weight*Math.sin(angleRAD*length2))/(length4);


pinA=((Math.sin(angleRAD)*weight*(length1-length4))+(Math.cos(angleRAD)*length2*weight))/2;








data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
        length3: length3,
        length4: length4,
       angle:angle,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

 pinA:pinA,
 pinD:pinD


},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"in the figure shown, af and eg are at right angles to one another, and af is perpendicular to ab.
compute the forces supported by the pins a and d given the machine is under the load (w) in newtons.
let the weight $ w = 5000 \, \text{newtons}$ and let the lengths $ l_1 = 2 \, \text{meters}$, $ l_2 = 3 \, \text{meters}$, $ l_3 = 4 \, \text{meters}$ and $ l_4 = 5 \, \text{meters}$
let the angle $ \theta=45$ (degrees)",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines,Force analysis,Statics,"Frames,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Static Equilibrium, Reaction Forces, Distributed Forces"
181,frame3Pliers,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Pliers"",
    ""stem"":""Statics"",
    ""topic"": ""Machines"",
    ""tags"": [""moments"", ""members"",""reaction forces""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""pliers.png""></pl-figure>
    <p> Compute the normal forces acting on the orange bolt as a result of the load applied by forces (F). </p>
    <p> Let the forces $ \mathbf(F) = {{params.force}} {{params.unitsForce}}$ and let the lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$ and $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$</p>
  </pl-question-panel>
  
  <pl-number-input answers-name=""boltForce"" comparison=""sigfig"" digits=""3"" label=""Normal forces on bolt =""></pl-number-input>
  ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	force = (math.randomInt(100,500));//the force
	length2= (math.randomInt(600,800)); //length of l1 in m or ft

	length1= length2*((math.randomInt(400,450))/1000);
    length1=(Math.round(length1))/10000;
    length2=(Math.round(length2))/10000;
    if(unitSel>0){
    
        length1=length1*3;
        length2=length2*3;
        length1=(Math.round(length1*1000))/1000;
    length2=(Math.round(length2*1000))/1000;
       
    }
    

    length1=(Math.round(length1*10000))/10000;
    length2=(Math.round(length2*10000))/10000;
    
    


theta=(Math.atan(length1/length2));//*(180/Math.PI);

//testing values 
//length1=.03
//length2=.07
//force=150


//member BD
//Moment about D
reactionB=(force*(length1+length1+length2))/(Math.sin(theta)*(180/Math.PI)*length1);
//member BD 
//by sem.
reactionA=reactionB;
//member AC
//moment about C to solve normal force
boltForce=((reactionA*Math.sin(theta)*(180/Math.PI)*(length1+length2))-(force*(length1+length1+length2)))/(length1);
data = {
    params: {
         force: force,
        length1: length1,
        length2: length2,
       
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    boltForce:boltForce
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"compute the normal forces acting on the orange bolt as a result of the load applied by forces (f). 
let the forces $ \mathbf(f) = 500 n$ and let the lengths $ \mathbf{l}_1 = 2 meters$ and $ \mathbf{l}_2 = 3 meters$",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Pliers,Statics,Machines,"Moments,Members,Reaction forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Static Equilibrium, Distributed Forces"
182,frame4Squeezer,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines Squeezer"",
    ""stem"" : ""Force analysis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment""],
    ""prereqs"": """",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
    ""codelang"": ""javascript""
    }","<pl-question-panel>
    <pl-figure file-name=""squeezer.png""></pl-figure>
    <p>A pair of forces (F) is applied to the eyelet squeezer. The green block at A is able to slide back and forth with negligible friction.</p>
    <p>Compute the compressive force acting on the orange eyelet as a result of the two forces in {{params.unitsForce}}</p>
    <p>let the force $ \mathbf(F) = {{params.force}} {{params.unitsForce}}$ and lengths $ \mathbf{L}_1 = {{params.length1}} {{params.unitsDist}}$, $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$, $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$ and $ \mathbf{L}_4 = {{params.length4}} {{params.unitsDist}}$</p>
</pl-question-panel>
    

  <pl-number-input answers-name=""forceP"" comparison=""sigfig"" digits=""3"" label="" Compressive force =""></pl-number-input>
  
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""mm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""in"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	force= (math.randomInt(10,100));//the force
	length1= (math.randomInt(40,100)); //length of l1 in m or ft
    
    

	length2= length1*((math.randomInt(780,820))/1000);
    length3= length1*((math.randomInt(220,260))/1000);
    length4= length1*((math.randomInt(80,120))/1000);


    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    length4=(Math.round(length4*100))/100;
    if(unitSel>0){
    
        length1=length1/25;
        length2=length2/25;
        length3=length3/25;
        length4=length4/25;

    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    length4=(Math.round(length4*100))/100;
        
    }

    //testvals
    //length1=62.5
    //force=80
    //length2=50
    //length3=15
    //length4=6.25
    

theta=(Math.atan(length3/length1))+(Math.atan((length3+length4)/length2));
distab=Math.sqrt((length1**2)+(length3)**2);
reactionB=(force*(length1+length2))/(distab*Math.sin(theta));
forceP=reactionB*Math.cos(Math.atan((length3+length4)/length2));







data = {
    params: {
        force:force,
        length1: length1,
        length2: length2,
        length3: length3,
        length4: length4,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 

 forceP:forceP


},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"Refer to the diagram labeled ""squeezer.png"".  A pair of forces (F) is applied to the eyelet squeezer. The green block at point A is able to slide back and forth with negligible friction.  Compute the compressive force acting on the orange eyelet as a result of the two forces.  Given:  Force: F = (specific value) N (for example) Lengths: L1 = (specific value) m (for example) L2 = (specific value) m (for example) L3 = (specific value) m (for example) L4 = (specific value) m (for example) Determine:  Compressive force on the orange eyelet.",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines squeezer,Force analysis,Statics,"Frames,Vector,Force,Moment",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 110, ME 103","Distributed Forces, Statics and Mechanics"
183,frame5,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Frames and Machines"",
	""stem"": ""Force anylisis"", 
    ""topic"": ""statics"",
    ""tags"": [""frames"", ""vector"", ""force"", ""moment"",""reaction forces""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""epere194@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""reaction.png""></pl-figure>
    <p>Compute the magnitude of the reaction forces at points B,D,and F caused by the weight (W).</p>
    <p>Let $ \mathbf{W} = {{params.weight}} {{params.unitsForce}}$ and let the lengths $ \mathbf {L}_1 = {{params.length1}} {{params.unitsDist}}$ , $ \mathbf{L}_2 = {{params.length2}} {{params.unitsDist}}$ , $ \mathbf{L}_3 = {{params.length3}} {{params.unitsDist}}$</p>
</pl-question-panel>
  <pl-number-input answers-name=""reactionB"" comparison=""sigfig"" digits=""3"" label=""Reaction at pin B =""></pl-number-input>
  <pl-number-input answers-name=""reactionD"" comparison=""sigfig"" digits=""3"" label=""Reaction at Pin D =""></pl-number-input>
  <pl-number-input answers-name=""reactionF"" comparison=""sigfig"" digits=""3"" label=""Reaction at roller F =""></pl-number-input>","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
 
	weight = (math.randomInt(100,500));//the force
	length1= (math.randomInt(400,700))/1000; //length of l1 in m or ft

	length2= length1*((math.randomInt(550,650))/1000);
    length3= length1*((math.randomInt(350,450))/1000);

    length1=(Math.round(length1*100))/100;
    length2=(Math.round(length2*100))/100;
    length3=(Math.round(length3*100))/100;
    
if(unitSel>0){
    
    length1=length1*3;
    length2=length2*3;
    length3=length3*3;
   
}
// Using FBD A-C
//moment about point A
reactionB=(weight*(length1+length2))/(length1*0.866025404);

//using FBD B-D
//sum force in x direction
reactionD=reactionB;

//FBD D-E
//moment about E
reactionF=(reactionD*0.866025404*(length3+length3))/(length3);

data = {
    params: {
         weight: weight,
        length1: length1,
        length2: length2,
        length3: length3,
        unitsForce:unitsForce,
        unitsDist:unitsDist
},

    correct_answers: { 
    reactionB:reactionB,
    reactionD:reactionD,
    reactionF:reactionF
    
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"Refer to the diagram labeled ""reaction.png"".  Compute the magnitude of the reaction forces at points B, D, and F due to the weight W.  Given:  Weight: W = specific value N (for example) Lengths: L1 = specific value m (for example) L2 = specific value m (for example) L3 = specific value m (for example) Determine:  Reaction at pin B Reaction at Pin D Reaction at roller F",1f435c36-1126-43b0-aba5-627eeb2e10f9,Frames and machines,Force anylisis,Statics,"Frames,Vector,Force,Moment,Reaction forces",,True,epere194@ucr.edu,Num,1,,1.0,Javascript,,,,ME 010,"Reaction Forces, Static Equilibrium"
184,frameBeam,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame Beam"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
<pl-figure file-name=""beam2.png""></pl-figure>
<p> In the figure below, a weight W is suspended from point D of a beam AD. The beam is held up by rod BC. Neglect the mass of the beam AD and rod BC. Which of the following is true (mark all that apply) </p>
<pl-checkbox answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> The magnitude of the force in rod BC is known </pl-answer>
  <pl-answer correct=""true""> The line of action of the force in rod BC is known  </pl-answer>
  <pl-answer correct=""false""> The direction of the force in rod BC (i.e whether the force is tension or compression) is known </pl-answer>
  <pl-answer correct=""true""> Rod BC is a two-force member  </pl-answer>
  <pl-answer correct=""false""> Beam AD is a two-force member  </pl-answer>
  <pl-answer correct=""true""> Beam AD is a three force member </pl-answer>
</pl-checkbox>",,,,,"which of the following is true (mark all that apply) 
options:
- the magnitude of the force in rod bc is known 
- the line of action of the force in rod bc is known  
- the direction of the force in rod bc (i.e whether the force is tension or compression) is known 
- rod bc is a two-force member  
- beam ad is a two-force member  
- beam ad is a three force member",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame beam,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 010,"Reaction Forces, Structural Mechanics"
185,frameBeam20,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame 2"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
<pl-figure file-name=""frame20.png""></pl-figure>
<p> In the figure shown, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support.</p> 
<p> Which of the following is/are two force members? </p>
</pl-question-panel>
<pl-multiple-choice answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> AH </pl-answer>
  <pl-answer correct=""true""> None of the indicated members are two-force members  </pl-answer>
  <pl-answer correct=""false""> HD </pl-answer>
  <pl-answer correct=""false""> CE  </pl-answer>
</pl-multiple-choice>",,,,,"which of the following is/are two force members?
options:
a) ah
b) none of the indicated members are two-force members
c) hd
d) ce",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame 2,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Mc,1,,1.0,,,,,ME 010,Statics and Mechanics
186,frameBeam21,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame Beam"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
<pl-figure file-name=""frame20.png""></pl-figure>
<pl-figure file-name=""frame21.png""></pl-figure>
<p> In the figure below, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of the pulley. </p> 
<p> Which of the following are true? </p>
<pl-checkbox answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> The freebody diagram is correct and complete. </pl-answer>
  <pl-answer correct=""true""> The force T at M should be in the opposite direction  </pl-answer>
  <pl-answer correct=""false""> Horizontal reaction at E should be deleted </pl-answer>
  <pl-answer correct=""false""> Vertical reaction at E should be deleted  </pl-answer>
  <pl-answer correct=""false""> The force T at N should be in the opposite direction </pl-answer>
</pl-checkbox>",,,,,"which of the following are true?
options:
1. the freebody diagram is correct and complete.
2. the force t at m should be in the opposite direction.
3. horizontal reaction at e should be deleted.
4. vertical reaction at e should be deleted.
5. the force t at n should be in the opposite direction.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame beam,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 010,"Statics and Mechanics, Static Equilibrium, Reaction Forces"
187,frameBeam22,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame Beam"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
<pl-figure file-name=""frame20.png""></pl-figure>
<p></p>
<pl-figure file-name=""frame22.png""></pl-figure>
<p> In the figure below, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of member AH. Which of the following equations is correct? </p>
<pl-checkbox answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ A_y-C_y+H_y=0 $ </pl-answer>
  <pl-answer correct=""false""> $ A_y+C_y-H_y=0 $ </pl-answer>
  <pl-answer correct=""false""> $ A_x-C_x+H_x=0 $  </pl-answer>
  <pl-answer correct=""true""> $ A_x+C_x+H_x=0 $ </pl-answer>
</pl-checkbox>",,,,,"which of the following equations is correct?

options:
1. $ a_y-c_y+h_y=0 $
2. $ a_y+c_y-h_y=0 $
3. $ a_x-c_x+h_x=0 $
4. $ a_x+c_x+h_x=0 $",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame beam,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Ma,1,,1.0,,,,,,
188,frameBeam23,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame Beam"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
<pl-figure file-name=""frame20.png""></pl-figure>
<p></p>
<pl-figure file-name=""frame22.png""></pl-figure>
<p> In the figure below, a weight W is connected to the frame shown at G by means of a cable over a frictionless pulley. Neglect the weight of the members of the frame, A, C, D and H are pins while B is a roller support. The figure also shows the freebody diagram of member AH . Which of the following equations is correct?
</p>
<pl-checkbox answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ 4C_x+3Cy-8H_x+6H_y=0 $ </pl-answer>
  <pl-answer correct=""true""> $ -4C_x+3C_y-8H_x+6H_y=0 $</pl-answer>
  <pl-answer correct=""false""> $ -4C_x-3C_y-8H_x+6H_y=0 $  </pl-answer>
  <pl-answer correct=""false""> $ -4C_x+3C_y+8H_x+6H_y=0 $ </pl-answer>
</pl-checkbox>",,,,,"which of the following equations is correct?

options:
a) $ 4c_x+3cy-8h_x+6h_y=0 $
b) $ -4c_x+3c_y-8h_x+6h_y=0 $
c) $ -4c_x-3c_y-8h_x+6h_y=0 $
d) $ -4c_x+3c_y+8h_x+6h_y=0 $",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame beam,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Ma,1,,1.0,,,,,,Basic Algebra
189,ladderFrame01,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame: Ladder"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
<pl-figure file-name=""ladder0.png""></pl-figure>
<pl-figure file-name=""ladder01.png""></pl-figure>
<p> The figure shows a ladder that is connected to the ground with a pin joint at A and a roller joint at B. Both members AC and BC have the same weight W. W = 200 N, and L = 0.5 m. The angle $ \theta = 15 $ degrees.</p> 
<p> Also shown is the freebody diagram for the whole frame. Which of the following statements are true?</p>
</pl-question-panel>
<pl-multiple-choice answers-name=""ladder"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> The spring force should be added </pl-answer>
  <pl-answer correct=""true""> The freebody diagram is complete and accurate  </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at C should be included </pl-answer>
  <pl-answer correct=""false""> The vertical reaction at C should be included  </pl-answer>
  <pl-answer correct=""false""> A moment reaction should be included at A  </pl-answer>
</pl-multiple-choice>",,,,,"which of the following statements are true?
options:
1. the spring force should be added
2. the freebody diagram is complete and accurate
3. the horizontal reaction at c should be included
4. the vertical reaction at c should be included
5. a moment reaction should be included at a",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame: ladder,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Mc,1,,1.0,,,,,,"Statics and Mechanics, Reaction Forces"
190,ladderFrame02,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frames: Ladder 2"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
  <pl-figure file-name=""ladder0.png""></pl-figure>
  <pl-figure file-name=""ladder02.png""></pl-figure>
  <p> The figure shows a ladder that is connected to the ground with a pin joint at A and a roller joint at B. Both members AC and BC have the same weight W. W = 200 N, and L = 0.5 m. The angle $ \theta = 15 $ degrees.</p> 
  <p> The figure (below) shows the freebody diagram of BC. Which of the following statements are true?</p>
  </pl-question-panel>
<pl-checkbox answers-name=""ladder"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> The freebody diagram is complete and accurate </pl-answer>
  <pl-answer correct=""true""> Spring force should be horizontal  </pl-answer>
  <pl-answer correct=""false""> Horizontal reaction at C should be removed </pl-answer>
  <pl-answer correct=""true""> Vertical reaction at C should be included  </pl-answer>
  <pl-answer correct=""false""> Weight should be removed  </pl-answer>
</pl-checkbox>",,,,,"which of the following statements are true about the freebody diagram of bc?

options:
a) the freebody diagram is complete and accurate
b) spring force should be horizontal
c) horizontal reaction at c should be removed
d) vertical reaction at c should be included
e) weight should be removed",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frames: ladder 2,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Mc,1,,1.0,,,,,ME 010,"Statics and Mechanics, Reaction Forces"
191,ladderFrame03,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame : Ladder"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
  <pl-figure file-name=""ladder0.png""></pl-figure>
  <pl-figure file-name=""ladder03.png""></pl-figure>
  <p> The figure shows a ladder that is connected to the ground with a pin joint at A and a roller joint at B. Both members AC and BC have the same weight W. W = 200 N, and L = 0.5 m. The angle $ \theta = 15 $ degrees.</p> 
  <p> The figure below shows the freebody diagrams for both AC and BC. Assuming that the freebody diagram of BC is correct, which of the following statements are true about the freebody diagram for AC?</p>
  </pl-question-panel>
<pl-checkbox answers-name=""ladder"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> Both diagrams are complete and correct </pl-answer>
  <pl-answer correct=""true""> The spring force on AC should be in the opposite direction </pl-answer>
  <pl-answer correct=""true""> The vertical reaction at C should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> The horizontal reaction at C should be in the opposite direction </pl-answer>
  <pl-answer correct=""false""> The weight vector should be removed.  </pl-answer>
</pl-checkbox>",,,,,"which of the following statements are true about the freebody diagram for ac?

options:
a) both diagrams are complete and correct
b) the spring force on ac should be in the opposite direction
c) the vertical reaction at c should be in the opposite direction
d) the horizontal reaction at c should be in the opposite direction
e) the weight vector should be removed.",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame : ladder,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Mc,1,,1.0,,,,,,"Statics and Mechanics, Reaction Forces, Static Equilibrium"
192,ladderFrame04,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Frame: Ladder"",
	""stem"": ""frame beam"",
    ""topic"": ""statics"",
    ""tags"": [""force"", ""fbd"", ""moment""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""mc"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-question-panel> 
  <pl-figure file-name=""ladder0.png""></pl-figure>
  <pl-figure file-name=""ladder04.png""></pl-figure>
  <p> The figure shows a ladder that is connected to the ground with a pin joint at A and a roller joint at B. Both members AC and BC have the same weight W. W = 200 N, and L = 0.5 m. The angle $ \theta = 15 $ degrees.</p> 
  <p> The figure shows the freebody diagram of AC. Which of the following equations is the correct equation for moments about point A?</p>
  </pl-question-panel>
<pl-multiple-choice answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> $ -F_s\frac{L}{6}cos \theta - W\frac{L}{2}sin \theta + C_yLsin \theta - C_xLcos\theta =0  $</pl-answer>
  <pl-answer correct=""false""> $ -F_s \frac{L}{6} cos \theta + W\frac{L}{2} sinθ + C_yLsinθ - C_xL cos \theta=0 $</pl-answer>
  <pl-answer correct=""true""> $ -F_s \frac{L}{6} cos \theta - W\frac{L}{2} sinθ - C_yLsinθ + C_xL cos \theta=0 $</pl-answer>
  <pl-answer correct=""false""> $ -F_s \frac{L}{6} cos \theta - W\frac{L}{2} sinθ + C_yLsinθ + C_xL cos \theta=0  $ </pl-answer>
</pl-multiple-choice>",,,,,"which of the following equations is the correct equation for moments about point a?

options:
a) $ -f_s\frac{l}{6}cos \theta - w\frac{l}{2}sin \theta + c_ylsin \theta - c_xlcos\theta =0  $
b) $ -f_s \frac{l}{6} cos \theta + w\frac{l}{2} sinθ + c_ylsinθ - c_xl cos \theta=0 $
c) $ -f_s \frac{l}{6} cos \theta - w\frac{l}{2} sinθ - c_ylsinθ + c_xl cos \theta=0 $
d) $ -f_s \frac{l}{6} cos \theta - w\frac{l}{2} sinθ + c_ylsinθ + c_xl cos \theta=0  $",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Frame: ladder,Frame beam,Statics,"Force,Fbd,Moment",,False,sundar@google.com,Mc,1,,1.0,,,,,ME 010,"Static Equilibrium, Statics and Mechanics"
193,beamWeights,"{
    ""uuid"": ""7c4ccac6-843d-4392-a673-feb64c2a8bbf"",
    ""title"": ""Freebody diagram beam distributed"",
	""stem"": ""Freebody"",
    ""topic"": ""statics"",
    ""tags"": [""forces"", ""fbd""],
    ""prereqs"":"""",
	""isAdaptive"": ""false"",
	""createdBy"": ""sundar@google.com"",
	""qType"":""ma"",
	""nSteps"": 1,
	""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""none""
}
","<pl-figure file-name=""beamweights.png""></pl-figure>
<pl-figure file-name=""beamweightsfbd.png""></pl-figure>
<pl-question-panel> 
  The figure shows three weights hanging from a beam. The mass of the beam can be neglected. Also shown is the free body diagram of the beam. Which of the following is are true?
</pl-question-panel>
<pl-multiple-choice answers-name=""beam"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The freebody diagram is complete and correct </pl-answer>
  <pl-answer correct=""false""> The moment at A should be removed </pl-answer>
  <pl-answer correct=""false""> The x-component at A should be removed </pl-answer>
  <pl-answer correct=""false""> The y-component at A should be removed </pl-answer>
</pl-multiple-choice>

",,,,,"which of the following is are true about the free body diagram of the beam shown in the figure?

options:
a) the freebody diagram is complete and correct
b) the moment at a should be removed
c) the x-component at a should be removed
d) the y-component at a should be removed",7c4ccac6-843d-4392-a673-feb64c2a8bbf,Freebody diagram beam distributed,Freebody,Statics,"Forces,Fbd",,False,sundar@google.com,Ma,1,,1.0,,,,,ME 010,Statics and Mechanics
194,beamWeights1,"{
    ""uuid"": ""8b4891d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Beam weights"",
    ""stem"":"""",
    ""topic"": ""Statics"",
    ""tags"": [""weight"", ""beam"",""moment"", ""force""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""python""
}
","<pl-question-panel>
  <pl-figure file-name=""beamweights.png""></pl-figure>
  <p></p>
  The figure shows three weights hanging from a beam. The mass of the beam can be neglected.
</pl-question-panel>

<p> What is the x-component (in kN) of the reaction at A? </p>
<pl-number-input-fixed answers-name=""Ax"" correct-answer-fixed=""0"" comparison=""sigfig"" digits=""3"" label=""$ A_x $ (kN)""></pl-number-input-fixed>
<p> What is the y-component (in kN) of the reaction at A? </p>
<pl-number-input-fixed answers-name=""Ay"" correct-answer-fixed=""6"" comparison=""sigfig"" digits=""3"" label=""$ A_y $ (kN)""></pl-number-input-fixed>
<p> What is the magnitude of the moment reaction (in kN-m) at A? </p>
<pl-number-input-fixed answers-name=""Ma"" correct-answer-fixed=""12"" comparison=""sigfig"" digits=""3"" label=""$ M_A $ (kN-m)""></pl-number-input-fixed>
<p> What is the distance (in m) from point A of the line of action of the resultant of the three forces? </p>
<pl-number-input-fixed answers-name=""x"" correct-answer-fixed=""2"" comparison=""sigfig"" digits=""3"" label=""$ Distance (m) $""></pl-number-input-fixed>",,,,,"what is the x-component (in kn) of the reaction at a?
    
 what is the y-component (in kn) of the reaction at a?
    
 what is the magnitude of the moment reaction (in kn-m) at a?
    
 what is the distance (in m) from point a of the line of action of the resultant of the three forces?",8b4891d6-64d1-4e89-b72d-ad2133f25b2f,Beam weights,,Statics,"Weight,Beam,Moment,Force",,False,sundar@google.com,Num,1,,1.0,Python,,,,"ME 010, ME 110",Reaction Forces
195,covarianceNumbersJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Covariance of sets of numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Statistics"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Covariance"",
            ""url"": ""https://youtu.be/teh-MMAvOPI""
        }
        ]
}
","<pl-question-panel>
  <p> Consider the numbers in the following arrays 
    ${\bf x} = <pl-matrix-latex params-name=""x"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
  and 
  <p> Consider the numbers in the following arrays 
    ${\bf y} = <pl-matrix-latex params-name=""y"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
</pl-question-panel>

<p>
  Compute the covariance  of the two sets of numbers. 
</p>
<pl-number-input answers-name=""covar"" comparison=""sigfig"" digits=""3"" label=""Covariance ""></pl-number-input>
<p>
  Compute the correlation between the two sets  the numbers
</p>
<pl-number-input answers-name=""cor"" comparison=""sigfig"" digits=""3"" label=""Correlation ""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
// const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

n = math.randomInt(4,8);

x = math.multiply(100,math.random([1,n]));
x = math.round(x);

y = math.multiply(100,math.random([1,n]));
y = math.round(y);

console.log('x = ', x, 'y = ', y);

meanx = math.mean(x);
meany = math.mean(y);

stdx = math.std(x);
stdy = math.std(y);

xd = math.add(x,-meanx);
yd = math.add(y,-meany);

sumdot = math.sum( math.dotMultiply(xd,yd));

covar = sumdot/(n-1);
cor = covar/(stdx*stdy);

data = {
    params: { 
        x: x,
        y: y
    },
    correct_answers: {
        covar: covar,
        cor: cor
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider the numbers in the following arrays 
    ${\bf x} = [2, 5, -1, 3, 0]$
  
  and 
   consider the numbers in the following arrays 
    ${\bf y} = [4, -2, 6, 1, -3]$
  


  compute the covariance  of the two sets of numbers. 



  compute the correlation between the two sets  the numbers.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Covariance of sets of numbers,Add two numbers,Statistics,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video: Covariance', 'url': 'https://youtu.be/teh-MMAvOPI'}]",,,ME 118,Statistics
196,dispersionNumbersJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Dispersion of numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Statistics"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Mean, Standard Deviation and Variance"",
            ""url"": ""https://youtu.be/JcTUBwjOzRw""
        }]
}
","<pl-question-panel>
  <p> Consider the numbers in the following array 
    ${\bf x} = <pl-matrix-latex params-name=""x"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
</pl-question-panel>

<p>
  Compute the standard deviation  of the numbers. 
</p>
<pl-number-input answers-name=""stdx"" comparison=""sigfig"" digits=""3"" label=""Standard Deviation ""></pl-number-input>
<p>
  Compute the variance of the numbers
</p>
<pl-number-input answers-name=""varx"" comparison=""sigfig"" digits=""3"" label=""Variance ""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
// const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

n = math.randomInt(4,8);

x = math.multiply(100,math.random([1,n]));
x = math.round(x);
console.log('x = ', x);

meanx = math.mean(x);
medx = math.median(x);
modex = math.mode(x);

stdx = math.std(x);
varx = math.variance(x);

data = {
    params: { 
        x: x
    },
    correct_answers: {
        meanx: meanx,
        medx: medx,
        stdx: stdx,
        varx: varx
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider the numbers in the following array 
    ${\bf x} = [2, 5, -1, 8, 4]$
  


  1. compute the standard deviation  of the numbers. 
  2. compute the variance of the numbers.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Dispersion of numbers,Add two numbers,Statistics,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video: Mean, Standard Deviation and Variance', 'url': 'https://youtu.be/JcTUBwjOzRw'}]",,,ME 118,Statistics
197,meanNumbersJS,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Mean of numbers"",
    ""stem"":""Add two numbers"",
    ""topic"": ""Statistics"",
    ""tags"": [""addition"", ""numbers""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript"",
    ""resources"": [
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Mean, Standard Deviation and Variance"",
            ""url"": ""https://youtu.be/JcTUBwjOzRw""
        },
        {
            ""type"": ""video"",
            ""name"": ""video"",
            ""title"": ""Video: Median"",
            ""url"": ""https://youtu.be/T3GLbQUWyzQ""
        }
        ]
}
","<pl-question-panel>
  <p> Consider the numbers in the following array 
    ${\bf x} = <pl-matrix-latex params-name=""x"" digits={{params.nDigits}}></pl-matrix-latex>$
  </p>
</pl-question-panel>

<p>
  Compute the mean (average) of the numbers. 
</p>
<pl-number-input answers-name=""meanx"" comparison=""sigfig"" digits=""3"" label=""Mean ""></pl-number-input>
<p>
  Compute the median of the numbers
</p>
<pl-number-input answers-name=""medx"" comparison=""sigfig"" digits=""3"" label=""Median ""></pl-number-input>


","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

n = math.randomInt(4,8);

x = math.multiply(100,math.random([1,n]));
x = math.round(x);
console.log('x = ', x);

meanx = math.mean(x);
medx = math.median(x);
modex = math.mode(x);

stdx = math.std(x);
varx = math.variance(x);

data = {
    params: { 
        x: x
    },
    correct_answers: {
        meanx: meanx,
        medx: medx,
        stdx: stdx,
        varx: varx
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,,"consider the numbers in the following array 
    ${\bf x} = [2, 5, -1, 8, 4]$
  


  1. compute the mean (average) of the numbers. 
  2. compute the median of the numbers.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Mean of numbers,Add two numbers,Statistics,"Addition,Numbers",,True,sundar@google.com,Num,1,,1.0,Javascript,"[{'type': 'video', 'name': 'video', 'title': 'Video: Mean, Standard Deviation and Variance', 'url': 'https://youtu.be/JcTUBwjOzRw'}, {'type': 'video', 'name': 'video', 'title': 'Video: Median', 'url': 'https://youtu.be/T3GLbQUWyzQ'}]",,,,Statistics
198,viscosity1,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Viscosity"",
	""stem"": ""Fluid density"", 
    ""topic"": ""Fluid Mechanics"",
    ""tags"": [""density""],
	""prereqs"": ""volume"",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","
<pl-question-panel>
  <p> A plate of length {{params.a}} {{params.unitsDist}} and width {{params.b}} {{params.unitsDist}} is separated from a large plate by a gap of {{params.delta}} {{params.unitsGap}}.</p>
  <p> The gap is filled with a fluid of specific gravity {{params.sg}} and dynamic viscosity {{params.mud}} {{params.unitsViscosity}}. </p>
  <p> The plate is dragged parallel to itself with a speed of {{params.vel}} {{params.unitsSpeed}}. </p>
</pl-question-panel>


What is the force (in {{params.unitsForce}}) required to drag the plate?
<pl-number-input answers-name=""F"" comparison=""sigfig"" digits=""3"" label="" F (in {{params.unitsForce}}) ""></pl-number-input>
What is the power (in {{params.unitsPower}}) required to drag the plate?
<pl-number-input answers-name=""P"" comparison=""sigfig"" digits=""3"" label=""P (in {{params.unitsPower}})""></pl-number-input>","const math = require('mathjs');
const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const props  = require('./properties.js');

const generate = () => {
	
	unitSystems = ['si', ""uscs""];
	masslabels = [""mass"", ""weight""];
	densitylabels = ['density', 'specific weight'];
	
	units = { 
		""si"": { 
			""masslabel"": ""mass"",
			""mass"": ""kg"",
			""speed"": ""cm/s"",
			""dist"": ""cm"",
			""force"": ""N"",
			""angle"": ""degrees"",
			""density"": "" \\( kg/m^3 \\)"",
			""volume"": "" \\( m^3/s \\)"",
			""power"": ""W"",
			""gap"": ""mm"",
			""viscosity"": ""Pa s""
		},
		""uscs"": {
			""masslabel"": ""weight"",
			""mass"": ""lb"",
			""speed"": ""inch/s"",
			""dist"": ""in"",
			""force"": ""lb"",
			""angle"": ""degrees"",
			""density"": ""\\( lb/ft^3 \\)"",
			""volume"": ""\\( ft^3/s \\)"",
			""power"": ""hp"",
			""gap"": ""inch"",
			""viscosity"": "" \\( lb s /ft^2 \\)""
		}
	}
	


	fluidProperties = props.fluidProperties;
	fluidKeys = Object.keys(fluidProperties);
	numFluids = fluidKeys.length;
	console.log(`Fluid keys = ${fluidKeys}`);
	fluidIndex = math.randomInt(0,numFluids);
	fluid = fluidKeys[fluidIndex];
	

	

	//unitSel = 1;
	unitSel = math.randomInt(0,2);
	unitsDist = units[unitSystems[unitSel]].dist;
	unitsSpeed = units[unitSystems[unitSel]].speed;
	unitsMass = units[unitSystems[unitSel]].mass;
	unitsForce = units[unitSystems[unitSel]].force;
	unitsAngle = units[unitSystems[unitSel]].angle;
	unitsVolume = units[unitSystems[unitSel]].volume;
	unitsDensity = units[unitSystems[unitSel]].density;
	unitsGap = units[unitSystems[unitSel]].gap;
	unitsPower = units[unitSystems[unitSel]].power;
	unitsViscosity = units[unitSystems[unitSel]].viscosity;
	masslabel = units[unitSystems[unitSel]].masslabel;
	densitylabel = units[unitSystems[unitSel]].densitylabel;


	ad = math.randomInt(5,20);
	bd = math.randomInt(5,20);
	

	if ( unitSel === 0){ 
		sg = fluidProperties[fluid].sg;
		rho = fluidProperties[fluid].rho;
		deltad = math.randomInt(3,16);
		delta = deltad/1000;
		mud = fluidProperties[fluid].mu;
		veld = 5*math.randomInt(1,25);
		vel = veld/100;
		a = ad*1e-2;
		b= bd*1e-2;
	}
	else {
		sg = fluidProperties[fluid].sg;
		rho = fluidProperties[fluid].rho;
		deltad = 1e-3*math.randomInt(3,16);
		delta = deltad/12;
		mud = fluidProperties[fluid].mu;
		veld = 5*math.randomInt(2,20);
		vel = veld/12;
		a = ad/12;
		b= bd/12;
	}
A = a*b;
F = mud*vel*A/delta;
P = F*vel;

if (unitSel === 0) {

}
else {
	P = P/550;
}

console.log(`Index = ${fluidIndex}: Fluid = ${fluid}, Specific Gravity = ${sg} `);

data = {
    params: {
		a: ad,
		b: bd,
		vel: veld,
		mud: mud,
		sg: sg,
		delta: deltad,
		fluid: fluid,
		unitsDist: unitsDist,
		unitsMass: unitsMass,
		unitsVolume: unitsVolume,
		masslabel: masslabel,
		unitsForce: unitsForce,
		unitsSpeed: unitsSpeed,
		unitsGap: unitsGap,
		unitsPower: unitsPower,
		unitsViscosity: unitsViscosity
    },
    correct_answers: {
		F : F,
		P:  P
	},

    nDigits: 2,
    sigfigs:2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}",,,"const fluidProperties = {
    ""water"": {
        ""sg"": 1,
        ""mu"": 0.001,
        ""Cp"": 1
    },
    ""gasoline"": {
        ""sg"": 0.72,
        ""mu"": 0.00029,
        ""Cp"": 2.22
    },
    ""diesel"": {
        ""sg"": 0.8,
        ""mu"": 0.0022,
        ""Cp"": 2.05
    },
    ""benzene"": {
        ""sg"": 0.88,
        ""mu"": 0.0006,
        ""Cp"": 1.19
    },
    ""ethanol"": {
        ""sg"": 0.79,
        ""mu"": 0.0012,
        ""Cp"": 2.4
    }, 
    ""acetone"": {
        ""sg"": 0.78,
        ""mu"": 0.003,
        ""Cp"": 2.15
    },
    ""corn oil"": {
        ""sg"": 0.92,
        ""mu"": 0.02,
        ""Cp"": 1.9
    },
    ""gylcerine"": {
        ""sg"": 1.26,
        ""mu"": 0.95,
        ""Cp"": 2.43
    },
    ""honey"": {
        ""sg"": 1.4,
        ""mu"": 10,
        ""Cp"": 2.52
    },
    ""bromine"":{
        ""sg"": 3.1,
        ""mu"": 0.00095,
        ""Cp"": 0.5
    }
}

const materialProperties = {
    ""aluminum alloy"": {
        ""sg"": 2.7,
        ""E"": [70,80],
        ""sult"": [310, 550],
        ""linexp"": 23,
        ""nud"": 0.33
    },
    ""steel alloy"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""copper"": {
        ""sg"": 7.7,
        ""E"": [195,210],
        ""sult"": [550, 1400],
        ""linexp"": 12,
        ""nud"": 0.30
    },
    ""brass"": {
        ""sg"": 8.4,
        ""E"": [96,110],
        ""sult"": [300, 590],
        ""linexp"": 20,
        ""nud"": 0.34
    }
    
}

const getFluidProperties = (fluidName, unitSel) => {
    let fluid = fluidProperties[fluidName];

    if (unitSel === 0){
        rho = fluid.sg*1000;
        mud = fluid.mu;
    } else {
        rho = fluid.sg*62.4;
        mud = fluid.mu*0.020885;
    }

    fluid.mud = mud;
    fluid.rho = rho;

    return fluid;
}

module.exports = {
    fluidProperties,
    materialProperties,
    getFluidProperties
}","a plate of length 2 meters and width 1 meter is separated from a large plate by a gap of 0.5 centimeters.
the gap is filled with a fluid of specific gravity 0.8 and dynamic viscosity 0.02 pascal-seconds.
the plate is dragged parallel to itself with a speed of 5 meters per second.

1. what is the force (in newtons) required to drag the plate?
2. what is the power (in watts) required to drag the plate?",1f435c36-1126-43b0-aba5-627eeb2e10f9,Viscosity,Fluid density,Fluid mechanics,Density,Volume,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 113, ME 240A",Fluid Mechanics
199,beamCableStaticEqbm - Copy,"{
    ""uuid"": ""8abcd9f426-64d1-4e89-b72d-ad21334555b2f"",
    ""title"": ""Beam: Static Equilibrium"",
    ""stem"":""Statics"",
    ""topic"": ""statics"",
    ""tags"": [""vectors"", ""forces"", ""moments"", ""equilibrium""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""sundar@google.com"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
The figure shows a beam of length {{params.L}} {{params.unitsDist}} and {{params.masslabel}} {{params.M}} {{params.unitsMass}} being hinged at point O. The beam is supported by means of a cable AB. Point A is located at distance {{params.H1}} {{params.unitsDist}} vertically above O while point B is at a horizontal distance {{params.Lt}} {{params.unitsDist}} from O. At point D located at distance {{params.L1}} {{params.unitsDist}}, a {{params.m}} {{params.unitsMass}} {{params.masslabel}} is suspended. 
<p>
  What are the cable tension (in {{params.unitsForce}}) and the reactions (in {{params.unitsForce}}) at O?
</p>  
</pl-question-panel>

{{params.svgString}}

<pl-number-input answers-name=""tension"" comparison=""sigfig"" digits=""3"" label=""Tension in cable""></pl-number-input>
<pl-number-input answers-name=""Ox"" comparison=""sigfig"" digits=""3"" label=""$ O_x $""></pl-number-input>
<pl-number-input answers-name=""Oy"" comparison=""sigfig"" digits=""3"" label=""$ O_y $""></pl-number-input>
","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""kmph"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angle"": ""degrees""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""mph"",
            ""dist"": ""ft"",
            ""force"": ""lb"",
            ""angle"": ""degrees""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    masslabel = units[unitSystems[unitSel]].masslabel;    

L = math.randomInt(75,150);
H1 = math.randomInt(20,75);
Lt = math.randomInt(math.round(L/2), L);
L1 = math.randomInt(math.round(L/4), math.round(3*L/4));

M = math.randomInt(50,100);
m = math.randomInt(10,30);

if (unitSel === 0) {
    g = 9.81;
}
else {
    g = 1;
}

thetarad = math.atan(H1/Lt);
theta = thetarad*180/math.pi;

T = 1/(Lt*math.sin(thetarad))*(0.5*M*g*L + m*g*L1);
Ox = T*math.cos(thetarad);
Oy = (M+m)*g - T*math.sin(thetarad);

let svgString = `<svg
xmlns=""http://www.w3.org/2000/svg""
xmlns:xlink=""http://www.w3.org/1999/xlink""
width = ""400"" height = ""400"">
<defs>
   <marker id=""arrowhead"" markerWidth=""10"" markerHeight=""7"" 
   refX=""10"" refY=""3.5"" orient=""auto"">
     <polygon points=""0 0, 10 3.5, 0 7"" style=""fill: red""/>
   </marker>
 </defs> \n`;
 svgString += `<g transform = 'matrix(1 0 0 1 100 200)'> \n`;
 svgString += `<line x1= ""0"" y1= ""0"" x2=""${L}"" y2=""0"" style = ""stroke: blue;
 stroke-width: 4;
 stroke-linecap: round""/> \n`;
 svgString += `<line x1= ""0"" y1= ""25"" x2=""0"" y2=""-100"" style = ""stroke: brown;
 stroke-width: 8;
 stroke-linecap: round""/> \n`;
 svgString += `<line x1= ""0"" y1= ""${(-1)*H1}"" x2=""${Lt}"" y2=""0"" style = ""stroke: red;
 stroke-width: 1.5;
 stroke-linecap: round""/> \n`;
 svgString += `<line x1= ""${L1}"" y1= ""0"" x2=""${L1}"" y2=""20"" style = ""stroke: green;
 stroke-width: 1.5;
 stroke-linecap: round""/> \n`;
 svgString += `<rect x = ${L1-5} y=""20"" width=""10"" height=""15"" style=""fill: green"" /> \n `;
 svgString += `<circle cx=""0"" cy=""0"" r=""4"" style=""fill: lightgrey"" /> \n`;
svgString += `<text x=""-15"" y=""0"" style=""font: 11px sans-serif"" > O </text> \n`;
svgString += `<text x=""-15"" y=""${(-1)*H1}"" style=""font: 11px sans-serif"" > A </text> \n`;
svgString += `<text x=""${Lt}"" y=""15"" style=""font: 11px sans-serif"" > B </text> \n`;
svgString += `<text x=""${L1}"" y=""-10"" style=""font: 11px sans-serif"" > D </text> \n`
 svgString += `</g> \n`;
svgString += `</svg> \n`;

//console.log('SVG STRING IS ', svgString);

data = {
    params: { 
        masslabel: masslabel,
        unitsMass: unitsMass,
        unitsDist: unitsDist,
        unitsForce: unitsForce,
        M: M,
        m: m,
        L: L,
        H1: H1,
        Lt: Lt,
        L1: L1,
        svgString: svgString
    },
    correct_answers: {
        tension: T,
        Ox: Ox,
        Oy: Oy
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

//generate();

module.exports = {
    generate
}",,,,"the figure shows a beam of length 5 meters and a mass of 10 kilograms being hinged at point o. the beam is supported by means of a cable ab. point a is located at a distance 3 meters vertically above o while point b is at a horizontal distance 4 meters from o. at point d located at a distance 2 meters, a 5 kilograms mass is suspended.

what are the cable tension (in newtons) and the reactions (in newtons) at o?

[figure: placeholder for the figure]",8abcd9f426-64d1-4e89-b72d-ad21334555b2f,Beam: static equilibrium,Statics,Statics,"Vectors,Forces,Moments,Equilibrium",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,"ME 010, ME 110","Static Equilibrium, Reaction Forces"
200,derivatives,"{
    ""uuid"": ""2f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Compute numerical derivatives"",
	""stem"": ""Compute numerical derivatives"", 
    ""topic"": ""Numerical methods"",
    ""tags"": [""basic"", ""vector"", ""algebra"", ""operations"", ""addition"", ""subtraction"", ""calculus""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""sundar@google.com"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel>
  <p> Consider the following polynomial function f(x) = ${{params.poly}}$ </p>
  <p> Compute the {{params.option}} evaluated at {{params.x}} with a stepsize of {{params.h}} </p>
</pl-question-panel>

<pl-number-input answers-name=""calculated"" comparison=""sigfig"" digits=""3"" label=""value=""></pl-number-input>
<pl-number-input answers-name=""percent_error"" comparison=""sigfig"" digits=""3"" label=""percent error=""></pl-number-input>","const math = require('mathjs');
//const mathhelper = require('../../mathhelper.js');
const mathhelper = require('../../helpers/mathhelper.js');
// Polynomial Generator 
function random_poly(degree_range, const_range) {
    degree = Math.round(math.random(degree_range[0], degree_range[1]));
    polynomial = ''
    for (let i = 0; i = degree + 1; i++) {
        // creates constant
        constant = Math.round(math.random(const_range[0],const_range[1]));

        // Generates part of the polynomial
        // Functions can't have 0x^n as a value so I need to remove it 
        if (constant == 0) {
            poly = `x^${degree}`;
        }
        else {
            poly = `${constant}x^${degree}`;
        }
        degree = degree - 1

        // Combines all parts of the polynomial
        if (constant >= 0) {
            polynomial = polynomial + ""+"" + poly
        }
        else {
            polynomial = polynomial + poly
        }
    }
    return polynomial
}

const generate = () =>{
	const degree_range = [2,3]
	const const_range = [-20,20]
	val_list = [-10,10]
	h = 0.01
	a = Math.round(math.random(val_list[0], val_list[1]))
	
	
	poly = random_poly(degree_range,const_range)
	const fun = math.evaluate(`f(x) = ${poly}`)

	option= math.randomInt(5)
	

	switch(option){
		case 0:
			calculated = (fun(a+h)-fun(a))/h;
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Forward Derivative""
			break;
		case 1: 
			calculated = (fun(a) - fun(a-h))/h;
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""First Backward Derivative""
			break;
		case 2:
			foward_derivative = (fun(a+h)-fun(a))/h
			backward_derivative = (fun(a)-fun(a-h))/h
			calculated = (foward_derivative+backward_derivative)/2
			actual = math.derivative(poly,'x').evaluate({x:a})
			option_msg = ""central forward derivative""
			break;
		case 3:
			calculated = (fun(a+2*h)-2*fun(a+h)+fun(a))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Forward Derivative""
			break;
		case 4:
			calculated = (fun(a-2*h)-2*fun(a-h)+fun(a))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Backward Derivative""
			break;
		case 5:
			calculated = (fun(a+h) -2*fun(a)+fun(a-h))/(h**2)
			actual = math.derivative(math.derivative(poly,'x'),'x').evaluate({x:a})
			option_msg = ""Second Center Derivative""
			break;
	}
	percent_error = math.abs((calculated - actual)/actual *100)
	data = {
		params: {
			poly: poly, 
			x: a,
			h: h,
			option: option_msg
		},
		correct_answers: {
			calculated: calculated,
			actual: actual,
			percent_error: percent_error},
	
		nDigits: 2,
		sigfigs:2
	}
	
	console.log(data);
	return data;
	
}

generate();

module.exports = {
    generate,
}",,,,"consider the following polynomial function f(x) = $x^3 + 2x^2 - 5x + 3$ 
compute the derivative evaluated at x = 2 with a stepsize of 0.01",2f435c36-1126-43b0-aba5-627eeb2e10f9,Compute numerical derivatives,Compute numerical derivatives,Numerical methods,"Basic,Vector,Algebra,Operations,Addition,Subtraction,Calculus",,True,sundar@google.com,Num,1,,1.0,Javascript,,,,ME 118,"Calculus, Numerical Methods"
201,conductionSignConvention,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""conduction Sign Convention"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Conduction"",
    ""tags"": [""heat flux"", ""heat rate"", ""conduction""],
    ""prereqs"":"""",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""mc"",
    ""nSteps"": 1,
    ""updatedBy"":"""",
    ""difficulty"": 1,
    ""codelang"": ""javascript""
    }","<pl-question-panel> 
    <pl-figure file-name=""conductionSignConvention.png""></pl-figure>
   </p>
   <p>The heat-flux in a plane-wall of constant area is -100 $\frac{W}{m^2}$ the material's thermal conductivity is 5 $\frac{W}{m^2}$. Identify the correct temperature profile on the plane wall. The x-axis is in meters
    and the y-axis is in $^\circ \text{C}$.
   </p>
   <pl-multiple-choice answers-name=""conductionSignConvention"" weight=""1"" inline=""true"">
     <pl-answer correct=""false"">A </pl-answer>
     <pl-answer correct=""false"">B </pl-answer>
     <pl-answer correct=""True"">C </pl-answer>
     <pl-answer correct=""false"">D  </pl-answer>
     <pl-answer correct=""false"">None of the above  </pl-answer>
   </pl-multiple-choice>",,,,,"identify the correct temperature profile on the plane wall. the x-axis is in meters and the y-axis is in $^\circ \text{c}$.
options:
a 
b 
c 
d  
none of the above",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Conduction sign convention,Heat transfer,Conduction,"Heat flux,Heat rate,Conduction",,False,agonz494@ucr.edu,Mc,1,,1.0,Javascript,,,,,None
202,1DHeatConduction,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""One Dimensional Conduction"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Conduction"",
    ""tags"": [""heat flux"", ""heat rate""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""",
    ""difficulty"": 1,
    ""codelang"": ""javascript""
    }
    ","
<pl-question-panel>
    <pl-figure file-name=""1DHeatConduction.png""></pl-figure>
    <p> Determine the heat rate passing through the wall of an industrial furnace constructed with a thickness
    of $ {{params.width}} {{params.unitsDist}} $ and a thermal
    conductivity of $\ {{params.k}} {{params.unitsThermalConductivity}}$.
    During steady state operations the inner and outter temperatures were measured to be $\ {{params.T1}} {{params.unitsTemperature}} $ and $\ {{params.T2}} {{params.unitsTemperature}} $ repectively.
     The height of the furnace is measured to be$\ {{params.height}} {{params.unitsDist}} $ and the length of the furnace is $\ {{params.length}}  {{params.unitsDist}}$ </p>
</pl-question-panel>

<pl-number-input answers-name=""heatFlux"" comparison=""sigfig"" digits=""3"" label=""The Heat Flux= ""></pl-number-input>
<pl-number-input answers-name=""heatRate"" comparison=""sigfig"" digits=""3"" label=""The Heat Rate = ""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {


    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];


    units = {
        ""si"": {
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m"",
            ""temperature"":""K"",
            ""heatrate"":""W"",
            ""heatflux"":""W/m^2"",
            ""thermalconductivity"":""W/m*k""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft"",
            ""temperature"":""F"",
            ""heatrate"":""Btu/h"",
            ""heatflux"":""Btu/h*ft^2"",
            ""thermalconductivity"":""Btu/h*ft*F""
        }
    }
   
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsHeatRate = units[unitSystems[unitSel]].heatrate;
    unitsFlux = units[unitSystems[unitSel]].heatflux;
    unitsThermalConductivity = units[unitSystems[unitSel]].thermalconductivity;






//Dimensions
width = (math.randomInt(1,3));
height = (math.random(0,1));
length = (math.randomInt(1,2));
height = math.round(height*100)/100


//Temperatures
T1 = (math.randomInt(1150,1400));
T2 = (math.randomInt(0,1150));


//thermal conductivity
k = (math.random(1,1.8));
k = math.round(k*100)/100;



//area
area = (height * width);


//heat flux
heatFlux = -( k * ((T2-T1)/ length));


//heat rate
heatRate = (heatFlux * area);


data = {
    params: {
        width: width,
        height:height,
        length: length,
        T1: T1,
        T2: T2,
        k: k,








       
        unitsDist:unitsDist,
        unitsThermalConductivity : unitsThermalConductivity,
        unitsHeatRate:unitsHeatRate,
        unitsTemperature:unitsTemperature


       
},


    correct_answers: {

    heatFlux:heatFlux,
    heatRate:heatRate,
   
},
   nDigits: 2,
   sigfigs:2
}


console.log(data);
return data;
}
generate();
module.exports = {
    generate
}
",,,,"determine the heat rate passing through the wall of an industrial furnace constructed with a thickness of $ 0.5 meters $ and a thermal conductivity of $\ 0.8 w/mk$.
during steady state operations the inner and outer temperatures were measured to be $\ 800 degrees celsius $ and $\ 200 degrees celsius $ respectively.
the height of the furnace is measured to be $\ 2 meters $ and the length of the furnace is $\ 5 meters $",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,One dimensional conduction,Heat transfer,Conduction,"Heat flux,Heat rate",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116B, ME 241A","Heat Transfer, Heat Transfer Area"
203,1DHeatConduction2,"{
""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
""title"": ""One Dimensional Conduction"",
""stem"":""Heat Transfer"",
""topic"": ""Conduction"",
""tags"": [""heat flux"", ""heat rate""],
""prereqs"":"""",
""isAdaptive"": ""true"",
""createdBy"": ""agonz494@ucr.edu"",
""qType"":""num"",
""nSteps"": 1,
""updatedBy"":"""",
""difficulty"": 1,
""codelang"": ""javascript""
}
","
<pl-question-panel>
    <pl-figure file-name=""1DHeatConduction2.png""></pl-figure>
    <p> A heated driveway with the thermal conductivity k =$ {{params.k}} {{params.unitsThermalConductivity}} $ with the thickness of
        $ {{params.thickness}} {{params.unitsDist}} $ and width of $ {{params.width}} {{params.unitsDist}} $ is planted such that its 
        side and back surfaces are insulated. While the the front surface is exposed to open air. If $ {{params.q}} {{params.unitsHeatRate}} $
        is being disappated from underneath, what is the steady state temperature difference between the back and front surfaces?

    </p>
</pl-question-panel>

<pl-number-input answers-name=""deltaT"" comparison=""sigfig"" digits=""3"" label=""$\ delta $ T = ""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {


    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];


    units = {
        ""si"": {
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m"",
            ""temperature"":""K"",
            ""heatrate"":""W"",
            ""heatflux"":""W/m^2"",
            ""thermalconductivity"":""W/m*k""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft"",
            ""temperature"":""F"",
            ""heatrate"":""Btu/h"",
            ""heatflux"":""Btu/h*ft^2"",
            ""thermalconductivity"":""Btu/h*ft*F""
        }
    }
   
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsHeatRate = units[unitSystems[unitSel]].heatrate;
    unitsFlux = units[unitSystems[unitSel]].heatflux;
    unitsThermalConductivity = units[unitSystems[unitSel]].thermalconductivity;

//selecting dimensions
width = (math.randomInt(1,9));
thickness = (math.random(0,1));
thickness = math.round(thickness*100)/100;

//thermal conductivity
k = (math.randomInt(50,100));

//selecting heat rate
q = (math.randomInt(2,10));

//area
area = width**2;

//solving for change in temperature
deltaT = (q/(area*k))*thickness;


data = {
    params: {
        width: width,
       thickness:thickness,
        k: k,
        q:q,
        area:area,








       
        unitsDist:unitsDist,
        unitsThermalConductivity : unitsThermalConductivity,
        unitsHeatRate:unitsHeatRate,
        unitsTemperature:unitsTemperature


       
},


    correct_answers: {

  deltaT : deltaT,
   
},
   nDigits: 2,
   sigfigs:2
}


console.log(data);
return data;
}
generate();
module.exports = {
    generate
}
",,,,"a heated driveway with the thermal conductivity k = $ 0.8 \, \text{w/mk} $ with the thickness of
        $ 0.1 \, \text{m} $ and width of $ 2 \, \text{m} $ is planted such that its 
        side and back surfaces are insulated. while the the front surface is exposed to open air. if $ 1000 \, \text{w} $
        is being disappated from underneath, what is the steady state temperature difference between the back and front surfaces?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,One dimensional conduction,Heat transfer,Conduction,"Heat flux,Heat rate",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 241A",Heat Transfer
204,conductionFixed1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""conduction Fixed 1"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Conduction"",
    ""tags"": [""heat flux"", ""heat rate""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""",
    ""difficulty"": 1,
    ""codelang"": ""javascript""
    }
    ","<pl-question-panel>
    <pl-figure file-name=""conductionFixed1.png""></pl-figure>
    <p> A cubical furnance compartment is 4m on a side. The thermal conductivity, k of the styrofoam insulation is .030$\frac{W}{m\cdot{k}}$ The heat load is 500W.
        $T_{\text{inner}}$=$-10^\circ \text{C}$ and $T_{\text{outter}}$=$40^\circ \text{C}$. Find the insulation thickness.</p>
     <p>Assume the bottom of the compartment is perfectly insulated</p>
  </pl-question-panel>
  
  <pl-number-input-fixed answers-name=""thickness"" correct-answer-fixed="".24"" comparison=""sigfig"" digits=""3"" label=""thickness (m)""></pl-number-input-fixed>",,,,,what is the insulation thickness of the cubical furnace compartment?,8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Conduction fixed 1,Heat transfer,Conduction,"Heat flux,Heat rate",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,,Heat Transfer Area
205,controlVolumeFixed,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Control Volume Fixed"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""differential control volume"",
    ""tags"": [""heat transfer"", ""differential control volume"", ""heat diffusion"",  ""energy balance""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""controlVolumeFixed.png""></pl-figure>
    <p>A thin electrical heating element provides a uniform heat flux $q_0$"" to the bottom of a rectangular duct. Assume that under the heater it is perfectly
        insulated.The duct wall has a thickness of 20mm and the duct wall has a thermal conductivity k of 40$\frac{W}{m\cdot{k}}$.The convective heat transfer
        coefficient h is 200$\frac{W}{m^2\cdot{k}}$. The free stream fluid, air, has a temperature of $30^\circ \text{C}$ and the temperature at the top of the 
        duct wall $T_i$ is $85^\circ \text{C}$
    </p>
  </pl-question-panel>
  
  <p> What is the value of $T_0$?</p>
  <pl-number-input-fixed answers-name=""$T_0$?"" correct-answer-fixed=""90.5"" comparison=""sigfig"" digits=""3"" label=""$T_0$=""></pl-number-input-fixed>

  <p>What is the value of $q_0$""? </p>
  <pl-number-input-fixed answers-name=""$q_0$"" correct-answer-fixed=""11000"" comparison=""sigfig"" digits=""5"" label=""$q_0$''=""></pl-number-input-fixed>",,,,,"what is the value of $t_0$?

 what is the value of $q_0$""?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Control volume fixed,Heat transfer,Differential control volume,"Heat transfer,Differential control volume,Heat diffusion,Energy balance",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,,
206,heatDiffusionCartesian,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Diffusion Cartesian"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""differential control volume"",
    ""tags"": [""heat transfer"", ""differential control volume"", ""heat diffusion equation"", ""cartesian coordinates"", ""energy balance""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatDiffusionCartesian.png""></pl-figure>

    <p>Consider the differential element shown. It is $\textbf{NOT}$ at steady state and energy is being stored. The heat generated inside the element at a rate is given by $\dot{q}$
    which of the following expressions is the correct energy balance for heat transfer? Use the same coordinate system and coordinate labels illustrated</p>
    

</pl-question-panel>
<pl-multiple-choice answers-name=""heatRateAreaofInterest3"" weight=""1"" inline=""true"">
    <pl-answer correct=""true""> $\dot{q} \cdot dxdydz$ -$\frac{\partial q_x}{\partial x}\cdot{dx}$ -$\frac{\partial q_y}{\partial y}\cdot{dy}$ -$\frac{\partial q_z}{\partial z}\cdot{dz}$ = $\rho$$c_p$$\frac{\partial T}{\partial t}$$\cdot{dxdydz}$</pl-answer>
    <pl-answer correct=""false""> $\dot{q} \cdot dxdydz$ -$\frac{\partial q_x}{\partial x}\cdot{dx}$ -$\frac{\partial q_y}{\partial y}\cdot{dy}$ -$\frac{\partial q_z}{\partial z}\cdot{dz}$ = 0</pl-answer>
    <pl-answer correct=""false"">-$\frac{\partial q_x}{\partial x}\cdot{dx}$ -$\frac{\partial q_y}{\partial y}\cdot{dy}$ -$\frac{\partial q_z}{\partial z}\cdot{dz}$ = $\rho$$c_p$$\frac{\partial T}{\partial t}$$\cdot{dxdydz}$</pl-answer>
    <pl-answer correct=""false"">$\dot{q} \cdot dxdydz$ +$\frac{\partial q_x}{\partial x}\cdot{dx}$ +$\frac{\partial q_y}{\partial y}\cdot{dy}$ +$\frac{\partial q_z}{\partial z}\cdot{dz}$ = $\rho$$c_p$$\frac{\partial T}{\partial t}$$\cdot{dxdydz}$</pl-answer>
</pl-multiple-choice>",,,,,"which of the following expressions is the correct energy balance for heat transfer? use the same coordinate system and coordinate labels illustrated.

options:
a) $\dot{q} \cdot dxdydz$ -$\frac{\partial q_x}{\partial x}\cdot{dx}$ -$\frac{\partial q_y}{\partial y}\cdot{dy}$ -$\frac{\partial q_z}{\partial z}\cdot{dz}$ = $\rho$$c_p$$\frac{\partial t}{\partial t}$$\cdot{dxdydz}$
b) $\dot{q} \cdot dxdydz$ -$\frac{\partial q_x}{\partial x}\cdot{dx}$ -$\frac{\partial q_y}{\partial y}\cdot{dy}$ -$\frac{\partial q_z}{\partial z}\cdot{dz}$ = 0
c) -$\frac{\partial q_x}{\partial x}\cdot{dx}$ -$\frac{\partial q_y}{\partial y}\cdot{dy}$ -$\frac{\partial q_z}{\partial z}\cdot{dz}$ = $\rho$$c_p$$\frac{\partial t}{\partial t}$$\cdot{dxdydz}$
d) $\dot{q} \cdot dxdydz$ +$\frac{\partial q_x}{\partial x}\cdot{dx}$ +$\frac{\partial q_y}{\partial y}\cdot{dy}$ +$\frac{\partial q_z}{\partial z}\cdot{dz}$ = $\rho$$c_p$$\frac{\partial t}{\partial t}$$\cdot{dxdydz}$",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat diffusion cartesian,Heat transfer,Differential control volume,"Heat transfer,Differential control volume,Heat diffusion equation,Cartesian coordinates,Energy balance",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,ME 241A,"Energy Balance, Heat Transfer"
207,heatRateAreaofInterest1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Rate Area of Interest 1"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Cross sectional Area"",
    ""tags"": [""heat transfer"", ""heat rate"", ""heat rate"", ""cross-sectional area""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatRateAreaofInterest1.png""></pl-figure>

    <p>Given the image depicted, what area are we interested in when solving for heat rate shown?</p>

</pl-question-panel>
<pl-multiple-choice answers-name=""heatRateAreaofInterest1"" weight=""1"" inline=""true"">
    <pl-answer correct=""true"">WxH </pl-answer>
    <pl-answer correct=""false"">WxW </pl-answer>
    <pl-answer correct=""false"">None of the above </pl-answer>
</pl-multiple-choice>",,,,,"what area are we interested in when solving for heat rate shown?
options:
1. wxh
2. wxw
3. none of the above",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat rate area of interest 1,Heat transfer,Cross sectional area,"Heat transfer,Heat rate,Heat rate,Cross-sectional area",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 241A",
208,heatRateAreaofInterest2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Rate Area of Interest 2"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Cross sectional Area"",
    ""tags"": [""heat transfer"", ""heat rate"", ""cross-sectional area""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatRateAreaofInterest2.png""></pl-figure>

    <p>Given the image depicted, what area are we interested in when solving for heat rate shown above?</p>
    <p>where p is the perimeter</p>

</pl-question-panel>
<pl-multiple-choice answers-name=""heatRateAreaofInterest2"" weight=""1"" inline=""true"">
    <pl-answer correct=""true""> $A_c$</pl-answer>
    <pl-answer correct=""false"">$A_s$</pl-answer>
    <pl-answer correct=""false"">4$\pi$$r^2$</pl-answer>
    <pl-answer correct=""false"">None of the above</pl-answer>
</pl-multiple-choice>",,,,,"what area are we interested in when solving for heat rate shown above? (where p is the perimeter)
options:
- $a_c$
- $a_s$
- 4$\pi$$r^2$
- none of the above",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat rate area of interest 2,Heat transfer,Cross sectional area,"Heat transfer,Heat rate,Cross-sectional area",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116B, ME 241A, ME 245",Heat Transfer Area
209,heatRateAreaofInterest3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Rate Area of Interest 3"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Cross sectional Area"",
    ""tags"": [""heat transfer"", ""heat rate"", ""cross-sectional area""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatRateAreaofInterest3.png""></pl-figure>

    <p>Given the image depicted, what area are we interested in when solving for heat rate (q) shown above?</p>
    <p>where p is the perimeter, p=2w+2t</p>

</pl-question-panel>
<pl-multiple-choice answers-name=""heatRateAreaofInterest3"" weight=""1"" inline=""true"">
    <pl-answer correct=""true""> w x t</pl-answer>
    <pl-answer correct=""false"">L x w</pl-answer>
    <pl-answer correct=""false"">p x dx</pl-answer>
    <pl-answer correct=""false"">None of the above</pl-answer>
</pl-multiple-choice>",,,,,no,8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat rate area of interest 3,Heat transfer,Cross sectional area,"Heat transfer,Heat rate,Cross-sectional area",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,,
210,heatRateAreaofInterest4,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Rate Area of Interest 4"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""Cross sectional Area"",
    ""tags"": [""heat transfer"", ""heat rate"", ""cross-sectional area""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatRateAreaofInterest4.png""></pl-figure>

    <p>Given the image depicted, what area are we interested in when solving for heat rate (q) shown above?</p>
    <p>where p is the perimeter, p=2w+2t</p>

</pl-question-panel>
<pl-multiple-choice answers-name=""heatRateAreaofInterest4"" weight=""1"" inline=""true"">
    <pl-answer correct=""false""> w x t</pl-answer>
    <pl-answer correct=""false"">L x w</pl-answer>
    <pl-answer correct=""true"">p x dx</pl-answer>
    <pl-answer correct=""false"">None of the above</pl-answer>
</pl-multiple-choice>",,,,,"what area are we interested in when solving for heat rate (q) shown above?
options:
1. w x t
2. l x w
3. p x dx
4. none of the above",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat rate area of interest 4,Heat transfer,Cross sectional area,"Heat transfer,Heat rate,Cross-sectional area",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 241A",Heat Transfer Area
211,heatRateRelationships,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Rate Relationships"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""K, A, T, L"",
    ""tags"": [""heat transfer"", ""heat rate""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatRateRelationships.png""></pl-figure>

    <p>Given the solid depicted, lets determine how heat-rate varies depending on the temperature difference($\Delta$T), rod length ($\Delta$X), and cross sectional area, A.</p>
    <p>Assume thermal conductivity K is constant </p>
</pl-question-panel>
    
<p> Holding temperature difference($\Delta$T) and rod length ($\Delta$X) constant, heat transfer rate $\underline{\hspace{2cm}}$ as area (A) increases</p>
<pl-multiple-choice answers-name=""heatRateRelationships"" weight=""1"" inline=""true"">
    <pl-answer correct=""false"">Decreases </pl-answer>
    <pl-answer correct=""false"">Remains the same</pl-answer>
    <pl-answer correct=""True"">Increases </pl-answer>
    <pl-answer correct=""false"">None of the above  </pl-answer>
</pl-multiple-choice>

<p> Holding temperature difference($\Delta$T) and area (A) constant, heat transfer rate $\underline{\hspace{2cm}}$ as rod length ($\Delta$X) increases</p>
<pl-multiple-choice answers-name=""heatRateRelationships"" weight=""1"" inline=""true"">
    <pl-answer correct=""true"">Decreases </pl-answer>
    <pl-answer correct=""false"">Remains the same</pl-answer>
    <pl-answer correct=""false"">Increases </pl-answer>
    <pl-answer correct=""false"">None of the above  </pl-answer>
</pl-multiple-choice>

<p> Holding area (A) and rod length ($\Delta$X) constant, heat transfer rate $\underline{\hspace{2cm}}$ as temperature difference ($\Delta$T) increases</p>
<pl-multiple-choice answers-name=""heatRateRelationships"" weight=""1"" inline=""true"">
    <pl-answer correct=""false"">Decreases </pl-answer>
    <pl-answer correct=""false"">Remains the same</pl-answer>
    <pl-answer correct=""true"">Increases </pl-answer>
    <pl-answer correct=""false"">None of the above  </pl-answer>
</pl-multiple-choice>



",,,,,"holding temperature difference($\delta$t) and rod length ($\delta$x) constant, heat transfer rate $\underline{\hspace{2cm}}$ as area (a) increases
options:
- decreases
- remains the same
- increases
- none of the above

 holding temperature difference($\delta$t) and area (a) constant, heat transfer rate $\underline{\hspace{2cm}}$ as rod length ($\delta$x) increases
options:
- decreases
- remains the same
- increases
- none of the above

 holding area (a) and rod length ($\delta$x) constant, heat transfer rate $\underline{\hspace{2cm}}$ as temperature difference ($\delta$t) increases
options:
- decreases
- remains the same
- increases
- none of the above",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat rate relationships,Heat transfer,"K, a, t, l","Heat transfer,Heat rate",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116A, ME 116B, ME 241A",Heat Transfer
212,heatRateRelationships2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Heat Rate Relationship2s"",
    ""stem"":""Heat Transfer"",
    ""topic"": ""K, A, T, L"",
    ""tags"": [""heat transfer"", ""heat rate""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""agonz494@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <pl-figure file-name=""heatRateRelationships2.png""></pl-figure>

    <p>consider the solid depicted where $T_2$ < $T_1$ and $A_2$ > $A_1$ and the thermal conductivity K varies with the linear function K=$K_0$-CT where C ia a positive constant</p>

</pl-question-panel>
    
<p>As x increases does the heat-flux $q_x$"":</p>
<pl-multiple-choice answers-name=""heatRateRelationships2"" weight=""1"" inline=""true"">
    <pl-answer correct=""true"">Decreases </pl-answer>
    <pl-answer correct=""false"">Remains the same</pl-answer>
    <pl-answer correct=""false"">Increases </pl-answer>
    <pl-answer correct=""false"">Not enough information</pl-answer>
</pl-multiple-choice>

<p>As x increases does the thermal conductivity K:</p>
<pl-multiple-choice answers-name=""heatRateRelationships"" weight=""1"" inline=""true"">
    <pl-answer correct=""false"">Decreases </pl-answer>
    <pl-answer correct=""false"">Remains the same</pl-answer>
    <pl-answer correct=""true"">Increases </pl-answer>
    <pl-answer correct=""false"">Not enough information </pl-answer>
</pl-multiple-choice>

<p>As x increases does the temperature gradient $\frac{dT}{dx}$:</p>
<pl-multiple-choice answers-name=""heatRateRelationships"" weight=""1"" inline=""true"">
    <pl-answer correct=""true"">Decreases </pl-answer>
    <pl-answer correct=""false"">Remains the same</pl-answer>
    <pl-answer correct=""false"">Increases </pl-answer>
    <pl-answer correct=""false"">None of the above  </pl-answer>
</pl-multiple-choice>",,,,,"as x increases does the heat-flux $q_x$:
options:
1. decreases
2. remains the same
3. increases
4. not enough information

 as x increases does the thermal conductivity k:
options:
1. decreases
2. remains the same
3. increases
4. not enough information

 as x increases does the temperature gradient $\frac{dt}{dx}$:
options:
1. decreases
2. remains the same
3. increases
4. none of the above",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Heat rate relationship2s,Heat transfer,"K, a, t, l","Heat transfer,Heat rate",,True,agonz494@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 116B, ME 116A, ME 241A, ME 244, ME 245, ME 137",Heat Transfer Phenomena
213,mechanicalProperties1MC,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Modulus of Elasticity"",
	""stem"": ""Mechanical Properties"", 
    ""topic"": ""Mechanics of Materials"",
    ""tags"": [""modulus of elasticity"", ""stress"", ""strain"", ""elastic""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""dbare004@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
 
<p>
  The modulus of elasticity can be calculated from the slope of the stress-strain curve in what region?
</p>

</pl-question-panel>

<pl-multiple-choice answers-name=""mechanicalProperties1"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> yielding region </pl-answer>
  <pl-answer correct=""false""> ultimate tensile strenght region </pl-answer>
  <pl-answer correct=""false""> plastic deformation region </pl-answer>
  <pl-answer correct=""true""> elastic region </pl-answer>

</pl-multiple-choice>
",,,,,"the modulus of elasticity can be calculated from the slope of the stress-strain curve in what region?
options:
a) yielding region
b) ultimate tensile strength region
c) plastic deformation region
d) elastic region",1f435c36-1126-43b0-aba5-627eeb2e10f9,Modulus of elasticity,Mechanical properties,Mechanics of materials,"Modulus of elasticity,Stress,Strain,Elastic",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 156, ME 110, ME 114","Young's Modulus, Elasticity"
214,mechanicalProperties2MC,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Stress-strain diagram"",
	""stem"": ""Mechanical Properties"", 
    ""topic"": ""Mechanics of Materials"",
    ""tags"": [""modulus of elasticity"", ""stress"", ""strain""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""dbare004@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel> 
  <pl-figure file-name=""mechanicalProperties2MC.png""></pl-figure>
 

    <p>
      What does the x-axis represent on a stress vs. strain graph? 
    </p>
    
    </pl-question-panel>
    
    <pl-multiple-choice answers-name=""mechanicalProperties2MC"" weight=""1"" inline=""true"">
      <pl-answer correct=""false""> stress </pl-answer>
      <pl-answer correct=""true""> strain </pl-answer>
      <pl-answer correct=""false""> displacement </pl-answer>
      <pl-answer correct=""false""> time </pl-answer>
    
    </pl-multiple-choice>

    
",,,,,"what does the x-axis represent on a stress vs. strain graph?
options:
- stress
- strain
- displacement
- time",1f435c36-1126-43b0-aba5-627eeb2e10f9,Stress-strain diagram,Mechanical properties,Mechanics of materials,"Modulus of elasticity,Stress,Strain",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,ME 156,"Young's Modulus, Structural Mechanics"
215,mechanicalProperties3MC,"{
    ""uuid"": ""1f435c36-1126-43b0-aba5-627eeb2e10f9"",
    ""title"": ""Stress-strain diagram"",
	""stem"": ""Mechanical Properties"", 
    ""topic"": ""Mechanics of Materials"",
    ""tags"": [""Young's Modulus"", ""stress"", ""strain"", ""elastic region"", ""proportional limit""],
	""prereqs"": """",
	""isAdaptive"": ""true"",
	""createdBy"": ""dbare004@ucr.edu"",
    ""qType"": ""num"",
	""nSteps"": 1,
	""updatedBy"":"""", 
	""difficulty"": 1,
	""codelang"": ""javascript""
}
","<pl-question-panel> 
 
    <pl-figure file-name=""mechanicalProperties3MCImage.png""></pl-figure>
    
    <p>
      In a stress-strain diagram, what does the slope of the linear region represents? 
    </p>
    
    </pl-question-panel>
    
    <pl-multiple-choice answers-name=""mechanicalProperties3MC"" weight=""1"" inline=""true"">
      <pl-answer correct=""false""> Stress </pl-answer>
      <pl-answer correct=""false""> Strain </pl-answer>
      <pl-answer correct=""true""> Young's Modulus </pl-answer>
      <pl-answer correct=""false""> Yield Strength </pl-answer>
    
    </pl-multiple-choice>

    
  ",,,,,"in a stress-strain diagram, what does the slope of the linear region represents?
options:
a) stress
b) strain
c) young's modulus
d) yield strength",1f435c36-1126-43b0-aba5-627eeb2e10f9,Stress-strain diagram,Mechanical properties,Mechanics of materials,"Young's modulus,Stress,Strain,Elastic region,Proportional limit",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 156, ME 110","Young's Modulus, Elasticity"
216,strainBasic,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Strain"",
    ""stem"":""Mechanics of Materials"",
    ""topic"": ""Strain"",
    ""tags"": [""strain"", ""elongate"", ""tension""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""dbare004@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>    
<pl-figure file-name=""strainBasic.png""></pl-figure>

   
    <p> Shown in the figure is a steel bar with length $ \mathbf{L} $ = $ {{params.length}}$ ${{params.unitsDist}}$. </p>   
    <p> When loaded in tension the bar elongates by $ \mathbf{\delta} $ = $ {{params.elongate}}$ ${{params.unitsDistSmall}} $.</p>
    
    </pl-question-panel>
        
    <p> Determine the axial strain $ \mathbf{\epsilon} $ on the bar? </p>
    <pl-number-input answers-name=""stain"" comparison=""sigfig"" digits=""3"" label=""$ \mathbf{\epsilon} $ =""></pl-number-input>
    ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = {
        ""si"": {
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""distSmall"": ""mm"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"": ""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""distSmall"": 'in',
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"": ""lb/ft""
        }
    }

    unitSel = math.randomInt(0, 2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsDistSmall = units[unitSystems[unitSel]].distSmall
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee = units[unitSystems[unitSel]].forcee




    //assign values to parameters 
   
   if (unitSel === 0) {
    length = (math.randomInt(1, 3));
    elongate = ((math.randomInt(2, 25)) + math.random()).toFixed(2);
   } 

   else {
    length = (math.randomInt(3, 10));
    elongate = (math.random()).toFixed(2);
   }



 


    //solve 

    if (unitSel === 0) {
        epsilon = ((elongate / 1000) / length);
    }
    else {
        epsilon = ((elongate / 12)/ length);
    }


    data = {
        params: {
            length: length,
            elongate: elongate,


            unitsDist: unitsDist,
            unitsDistSmall: unitsDistSmall,

        },

        correct_answers: {
            epsilon: epsilon
        },
        nDigits: 2,
        sigfigs: 2
    }

    console.log(data);
    return data;
}
generate();
module.exports = {
    generate
}

function computestrain(dl, L) {
    if (L !== 0) {
        const epsilon = dl / L;
        return epsilon;
    } else {
        console.error(""Error: Division by zero."");
        return null;
    }
}
",,,,"shown in the figure is a steel bar with length $ \mathbf{l} $ = $ 2.5$ $m$. 
when loaded in tension the bar elongates by $ \mathbf{\delta} $ = $ 0.02$ $mm $.

determine the axial strain $ \mathbf{\epsilon} $ on the bar?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Strain,Mechanics of materials,Strain,"Strain,Elongate,Tension",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 110, ME 156","Elasticity, Material Mechanics"
217,stressBasic,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Stress"",
    ""stem"":""Mechanics of Materials"",
    ""topic"": ""Stress"",
    ""tags"": [""stress"", ""tension""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""dbare004@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>   
<pl-figure file-name=""stressBasic.png""></pl-figure> 
   
<p> The prismatic bar shown in the figure has a diameter of $ \mathbf{D} = {{params.diameter}} {{params.unitsDist}}$,</p>
<p> and the load P has a magnitude of $ \mathbf{P} = {{params.forceP}} {{params.unitsForce}} $.</p>
   
</pl-question-panel>
    
<p>Compute the stress ($ \mathbf{\sigma} $) in the bar  </p>
<pl-number-input answers-name=""sigma"" comparison=""sigfig"" digits=""3"" label=""$ \mathbf{\sigma} $ =""></pl-number-input>
","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb-force"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngSpeed = units[unitSystems[unitSel]].angSpeed;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsAcc = units[unitSystems[unitSel]].acc;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsForcee=units[unitSystems[unitSel]].forcee

 
//assign value to parameters

  if (unitSel === 0) {
    diameter = (math.randomInt(1,3));
    forceP = (math.randomInt(10000,30000));
  }  
  else {
    diameter = (math.randomInt(1,9));
    forceP = (math.randomInt(2200,4400))
  }
	




    
//calculate stress 
sigma = (4 * forceP) / ((3.14) * (diameter)^2)
    

data = {
    params: {
         diameter:diameter,
         forceP:forceP,
        
        
        unitsForce:unitsForce,
        unitsDist:unitsDist,
        
},

    correct_answers: { 
    sigma:sigma
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"the prismatic bar shown in the figure has a diameter of $ \mathbf{d} = 10 cm$,
and the load p has a magnitude of $ \mathbf{p} = 500 n $.

compute the stress ($ \mathbf{\sigma} $) in the bar.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Stress,Mechanics of materials,Stress,"Stress,Tension",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 110, ME 156","Structural Mechanics, Mechanics of Materials"
218,stressBasic2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""StressBasics2"",
    ""stem"":""Mechanics of Materials"",
    ""topic"": ""Stress"",
    ""tags"": [""stress"", ""tension"", ""allowable stress"", ""force"", ""strain""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""dbare004@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>    
   
    <p> A solid cylindrical bar is subjected to tensile loading by forces denoted by force P (shown in figure) </p>
    <p> The bar has a specific length of $ \mathbf{l} = {{params.length}} {{params.unitsDist}}$ </p>
    <p> and a diameter of $ \mathbf{d} = {{params.diameter}} {{params.unitsDist}}$ . The bar is composed </p>
    <p> of a metal with a known modulus of elasticity of $ \mathbf{E} = {{params.metal_elasticity}} {{params.unitsMod}} . The elongation of the bar can't </p>
    <p> exceed $ \mathbf{\delta} = {{params.elongation}} {{params.unitsDist}}$ .  </p>

       
    </pl-question-panel>
        
    <p>What is the maximum permissible magnitude of force P that can be applied? </p>
    <pl-number-input answers-name=""force"" comparison=""sigfig"" digits=""3"" label=""$ \mathbf{p} $ =""></pl-number-input>
    


","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""angSpeed"": ""rad/s"",
            ""angle"": ""degrees"",
            ""speed"": ""m/s"",
            ""acc"": ""m/s^2"",
            ""forcee"":""N/m"",
            ""mod_elasticity"": ""pa""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""angSpeed"": ""rpm"",
            ""angle"": ""degrees"",
            ""speed"": ""feet/s"",
            ""acc"": ""ft/s^2"",
            ""forcee"":""lb/ft"",
            ""mod_elasticity"": ""psi""
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsMod = units[unitSystems[unitSel]].mod_elasticity;
  

    // Determinest the values of units of elasticity either PA or Psi
    unitsElasticity = units[unitSystems[unitSel]].mod_elasticity

    // COLLECTION of modulus of elasticity of various metals
    const modulusOfElasticity= {
        steel:{
            pa:200e9,
            psi: 29e6
        },
        copper:{
            pa:117e9,
            psi:17e6
        }
    };

    // Select random metal 
    const metal_names = Object.keys(modulusOfElasticity)
    metal_id = math.floor(math.random()*metal_names.length)
    metal = metal_names[metal_id]

    // Determine modules of elesticity for metal
    metal_elasticity = modulusOfElasticity[metal][unitsElasticity]
    //console.log(metal_elasticity)

    // Check
    //console.log(""The metal is "", metal, "" The modulus of elasticity is,"" , metal_elasticity,unitsElasticity)
    
	diameter = (math.random());//diameter of bars
    length = (math.randomInt(1,10)); //length of bar
    elongation = (math.random()); // length of elongation of rod 







    
// solve 
strain = (elongation/length);
sigma = (metal_elasticity*strain);
area = ((math.pi/4)*diameter);
force = (sigma*area); 
    
data = {
    params: {
         diameter:diameter,
         length:length,
         elongation:elongation,
         metal_elasticity:metal_elasticity,
        
        
        unitsForce:unitsForce,
        unitsDist:unitsDist,
        unitsElasticity:unitsElasticity,
        
},

    correct_answers: { 
    force:force
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"a solid cylindrical bar is subjected to tensile loading by forces denoted by force p (shown in figure) 
the bar has a specific length of $ \mathbf{l} = 2.5 \, \text{m}$ 
and a diameter of $ \mathbf{d} = 0.1 \, \text{m}$ . the bar is composed 
of a metal with a known modulus of elasticity of $ \mathbf{e} = 200 \, \text{gpa}$ . the elongation of the bar can't 
exceed $ \mathbf{\delta} = 0.02 \, \text{m}$ .  

what is the maximum permissible magnitude of force p that can be applied?",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Stressbasics2,Mechanics of materials,Stress,"Stress,Tension,Allowable stress,Force,Strain",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 110, ME 156","Structural Mechanics, Elasticity, Young's Modulus"
219,stressBasic3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""StressBasic3"",
    ""stem"":""Mechanics of Materials"",
    ""topic"": ""Stress"",
    ""tags"": [""stress"", ""tension"", ""allowable stress"", ""force"", ""prismatic bars""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""dbare004@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>    

    <p> Two prismatic bars are fastened together and support a load in the vertical direction with magnitude of $\mathbf{P}$ = ${{params.forceP}} {{params.unitsForce}}$ as shown in the figure.</p>
    <p> The top bar is made of steel and has a mass of  $ \mathbf{m}_{steel} $ = $ {{params.massSteel}} {{params.unitsMass}} $ and has a cross-sectional area of $ \mathbf{a}_{steel} $ = $ {{params.areaSteel}} {{params.unitsDist}} $ </p>
    <p> The bottom bar is made of copper and has a mass of $ \mathbf{m}_{copper} = {{params.massCopper}} {{params.unitsMass}} $ with a cross-sectional area of $ \mathbf{a}_{copper} = {{params.areaCopper}} {{params.unitsDist}} $ </p>
    <p> The modulus of Elasticity for steel is $ \mathbf{E}_{steel} $ = ${{params.modulusElasticitySteel}}$x$10^{ {{params.n}} }$ ${{params.unitsModulus}}$ and for copper is $ \mathbf{E}_{copper} $ = ${{params.modulusElasticityCopper}}$x$10^{ {{params.n}} }$ ${{params.unitsModulus}}$ .   </p>

       
    </pl-question-panel>
        
    <p> Determine the maximum stress in each material. </p>
   
    <pl-number-input answers-name=""sigmaSteel"" comparison=""sigfig"" digits=""3"" label=""$ \mathbf{\sigma}_{steel} $ =""></pl-number-input>
    <pl-number-input answers-name=""sigmaCopper"" comparison=""sigfig"" digits=""3"" label=""$ \mathbf{\sigma}_{copper} $ =""></pl-number-input>
    
    

 ","const math = require('mathjs');
// const mathhelper = require('../../helpers/mathhelper.js');
//const mathhelper = require('../../mathhelper.js');
const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];

    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""dist"": ""m"",
            ""force"": ""N"",
            ""modulus"": ""Pa"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""dist"": ""feet"",
            ""force"": ""lb"",
            ""modulus"": ""psi"", 
        }
    }
    
    unitSel = math.randomInt(0,2);
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsForce = units[unitSystems[unitSel]].force;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsModulus = units[unitSystems[unitSel]].modulus;



 
//assign numerical values to variables 
    forceP = (math.randomInt(5000,10000)); // vertical load P 
    massSteel = (math.randomInt(500,900)); // mass of steel bar
    massCopper = (math.randomInt(100,500)); // mass of copper bar
    areaSteel = (math.randomInt(10,15)); // cross sectional area of steel bar
    areaCopper = (math.randomInt(5,10)); // cross sectional area of copper bar 

// assign values for modulus of Elasticity 
if (unitSel === 0) {
    modulusElasticitySteel = 2.1; 
    modulusElasticityCopper = 1.2;
    n = 11; 
    g = 9.81;

   
} else {
    modulusElasticitySteel = 30;
    modulusElasticityCopper = 18;
    n = 6;
    g = 32.2 

    
}

    
//calculate for the sum of forces 

forceCopper = (g*massCopper) + forceP; 
forceSteel = (g*massSteel) + forceCopper;

//calculate max stress 

sigmaCopper = forceCopper/areaCopper; 
sigmaSteel = forceSteel/areaSteel; 





data = {
    params: {
        forceP:forceP,
        massSteel:massSteel,
        massCopper:massCopper,
        areaSteel:areaSteel,
        areaCopper:areaCopper,
        modulusElasticitySteel:modulusElasticitySteel,
        modulusElasticityCopper:modulusElasticityCopper,
        n:n, 
        
        unitsForce:unitsForce,
        unitsDist:unitsDist,
        unitsMass:unitsMass,
        unitsModulus:unitsModulus, 
        
        
},

    correct_answers: { 
    sigmaCopper:sigmaCopper,
    sigmaSteel:sigmaSteel,
},
   nDigits: 2,
   sigfigs:2
}

console.log(data);
return data;
}
generate();
module.exports = {
    generate
}",,,,"two prismatic bars are fastened together and support a load in the vertical direction with magnitude of $\mathbf{p}$ = $500 \, \text{n}$ as shown in the figure.
the top bar is made of steel and has a mass of  $ \mathbf{m}_{steel} $ = $ 2 \, \text{kg} $ and has a cross-sectional area of $ \mathbf{a}_{steel} $ = $ 0.02 \, \text{m}^2 $ 
the bottom bar is made of copper and has a mass of $ \mathbf{m}_{copper} = 1 \, \text{kg} $ with a cross-sectional area of $ \mathbf{a}_{copper} = 0.01 \, \text{m}^2 $ 
the modulus of elasticity for steel is $ \mathbf{e}_{steel} $ = $200 \times 10^{9} \, \text{pa}$ and for copper is $ \mathbf{e}_{copper} $ = $100 \times 10^{9} \, \text{pa}$.   

determine the maximum stress in each material.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Stressbasic3,Mechanics of materials,Stress,"Stress,Tension,Allowable stress,Force,Prismatic bars",,True,dbare004@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 110, ME 261, ME 174","Structural Mechanics, Mechanics of Materials"
220,braytonCycle1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Brayton Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""back work ratio"", ""efficiency"",""temperature""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
        Air enters the compressor of a gas turbine at a pressure of ${{params.Pressure1}}$ ${{params.unitsPressure}}$ and at a temperature of  ${{params.T1}}$${{params.unitsTemperature}}$ .</div>
    </p>
    <p> The pressure ratio is {{params.pr}} and the maximum temperature is ${{params.T3}} {{params.unitsTemperature}}$. </p>
    </pl-question-panel>
    
    <p> Using the Brayton cycle, Determine the back work ratio and the thermal efficiency. (Assume k = 1.4) </p>
    <pl-number-input answers-name=""BWR"" comparison=""sigfig"" digits=""3"" label=""Back Work Ratio (in %)""></pl-number-input>
    <pl-number-input answers-name=""Eff"" comparison=""sigfig"" digits=""3"" label=""Efficiency (in %)""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(80,120);
   T1 = math.randomInt(20,30);
   T3= math.randomInt(825,875);
   T1Old = T1;
   T3Old = T3;
   T1 = T1 + 273; //convertkelvin
   T3 = T3 + 273; //convertkelvin
   T1S = T1;
   T3S = T3;
   cp = 1.005
   pr = math.randomInt(5,10);
}
else {
    Pressure1 = math.randomInt(10,20);
    T1 = math.randomInt(75,85); 
    T3 = math.randomInt(1450,1550); 
    T1Old = T1;
    T3Old = T3;
    T1 = T1 + 459.67; //converting F to R
    T3 = T3 + 459.67; //converting F to R
    T1S = T1;
    T3S = T3;
    cp = 0.241 //cp of air in btu/lb F
    pr = math.randomInt(5,10);
}
T2 = T1 * (pr)**((1.4-1)/1.4);
T4 = T3 * (1/pr)**((1.4-1)/1.4);
BWR = (T2 - T1) / (T3 - T4);
Eff = 1 - (pr)**((1 - 1.4)/1.4);

BWR =  math.round(BWR *1000)/10;
Eff = math.round(Eff*1000)/10;
T1 = T1Old;
T3 = T3Old;

data = {
    params: { 
      T2:T2,
      T3:T3,
      T1:T1,
      T4:T4,
      T1S:T1S,
      T3S:T3S,
      pr:pr,
      cp:cp,
      Pressure1:Pressure1,
      unitsTemperature : unitsTemperature,
      unitsTemperatures : unitsTemperatures,
      unitsPressure : unitsPressure,

    },
    correct_answers: {
       BWR : BWR,
       Eff : Eff,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">  The back work ratio can be found using the following formula: BWR = $\frac{ W_{comp} }{ W_{turb} }$ = $\frac{c_p*(T_2 - T_1)}{c_p*(T_3 - T_4)}$ 
     </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The Brayton cyle utilizes isentropic compression and expansion.

 </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  
        <ul>
            <li>  $T_2$ = $T_1$*$(\frac{P_2}{P_1})^\frac{k-1}{k}$ = {{params.T1S}} * $({{params.pr}})^\frac{1.4-1}{1.4}$ = {{params.T2}}${{params.unitsTemperatures}}$  </li>
            <li>  $T_4$ = $T_3$*$(\frac{P_4}{P_3})^\frac{k-1}{k}$ = {{params.T3S}} * $(\frac{1}{ {{params.pr}} })^\frac{1.4-1}{1.4}$ = {{params.T4}}${{params.unitsTemperatures}}$ </li> 
        </ul> 
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">  BWR = $\frac{T_2 - T_1}{T_3 - T_4}$ = $\frac{ {{params.T2}} - {{params.T1S}} }{ {{params.T3S}} - {{params.T4}} }$ = {{correct_answers.BWR}}%.
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        The thermal efficiency is $&#951$ = 1 - $(r)^\frac{1-k}{k}$ = 1 - $({{params.pr}})^\frac{1-1.4}{1.4}$ = {{correct_answers.Eff}}%.
      </pl-hint>


</pl-solution-panel>",,,"air enters the compressor of a gas turbine at a pressure of $2.5$ bar and at a temperature of $300$ k.

the pressure ratio is $10$ and the maximum temperature is $1500$ k.

using the brayton cycle, determine the back work ratio and the thermal efficiency. (assume $k = 1.4$)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Brayton cycle,Heat,Thermodynamics,"Back work ratio,Efficiency,Temperature",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 117","Gas Turbine Cycles, Thermal Efficiency in Power Cycles"
221,braytonCycle2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Brayton Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""back work ratio"", ""efficiencies"",""temperature""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
        Air enters the compressor of a gas turbine at a pressure of ${{params.Pressure1}}$ ${{params.unitsPressure}}$ and at a temperature of  ${{params.T1}}$${{params.unitsTemperature}}$ .</div>
    </p>
    <p> The pressure ratio is {{params.pr}} and the maximum temperature is ${{params.T3}} {{params.unitsTemperature}}$. </p>
    <p> The compressor and turbine efficiencies are {{params.E1Old}}% and {{params.E2Old}}%.</p>
    </pl-question-panel>
    
    <p> Using the Brayton cycle, Determine the back work ratio and the thermal efficiency. (Assume k = 1.4) </p>
    <pl-number-input answers-name=""BWR"" comparison=""sigfig"" digits=""3"" label=""Back Work Ratio (in %)""></pl-number-input>
    <pl-number-input answers-name=""Eff"" comparison=""sigfig"" digits=""3"" label=""Efficiency (in %)""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(80,120);
   T1 = math.randomInt(20,30);
   T3= math.randomInt(825,875);
   T1Old = T1;
   T3Old = T3;
   E1Old = math.randomInt(75,85); //Compressor efficiency
   E2Old = math.randomInt(75,85);
   E1 = E1Old/100;
   E2 = E2Old/100;
   T1 = T1 + 273; //convertkelvin
   T3 = T3 + 273; //convertkelvin
   T1S = T1;
   T3S = T3;
   cp = 1.005
   pr = math.randomInt(5,10);
}
else {
    Pressure1 = math.randomInt(10,20);
    T1 = math.randomInt(75,85); 
    T3 = math.randomInt(1450,1550); 
    T1Old = T1;
    T3Old = T3;
    E1Old = math.randomInt(75,85); //Compressor efficiency
    E2Old = math.randomInt(75,85);
    E1 = E1Old/100;
    E2 = E2Old/100;
    T1 = T1 + 459.67; //converting F to R
    T3 = T3 + 459.67; //converting F to R
    T1S = T1;
    T3S = T3;
    cp = 0.241 //cp of air in btu/lb F
    pr = math.randomInt(5,10);
}

T2S = T1 * (pr)**((1.4-1)/1.4); //T2dot is temp assuming isentropic process
Wc = (cp*(T2S - T1)) / (E1);
T4S = T3 * (1/pr)**((1.4-1)/1.4);
Wt = E2 * (cp*(T3 - T4S));
BWR = Wc / Wt;
T2 = (Wc/cp) + T1;
Qin = cp*(T3 - T2);
Eff = (Wt - Wc) / Qin

BWR =  math.round(BWR *1000)/10;
Eff = math.round(Eff*1000)/10;
T1 = T1Old;
T3 = T3Old;

data = {
    params: { 
      T2S:T2S,
      T2:T2,
      T3:T3,
      T1:T1,
      T4S:T4S,
      T1S:T1S,
      T3S:T3S,
      E1:E1,
      E2:E2,
      E1Old:E1Old,
      E2Old:E2Old,
      Wc:Wc,
      Wt:Wt,
      Qin:Qin,
      pr:pr,
      cp:cp,
      Pressure1:Pressure1,
      unitsTemperature : unitsTemperature,
      unitsTemperatures : unitsTemperatures,
      unitsPressure : unitsPressure,
      unitsSpecificEnthalpy: unitsSpecificEnthalpy,

    },
    correct_answers: {
       BWR : BWR,
       Eff : Eff,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> To determine the back work ratio and the thermal efficiency we must find $w_{comp}$, $w_{turb}$, and $q_{in}$.
     </pl-hint>
    <pl-hint level=""2"" data-type=""text""> 
        <ul> 
            <li>  The compressor work: $w_{comp}$ = $\frac{ w_{comp,s} }{ &#951_{comp} }$ = $\frac{c_p*(T_{2,s} - T_1)}{ &#951_{comp} }$ (where $T_{2,s}$ is the temperature at state 2 assuming an isentropic process).</li>
            <li>  similarly, the turbine work: $w_{turb}$ = ($&#951_{turb}$)*($w_{turb,s}$) = ($&#951_{turb}$)*$c_p$*($T_3$ - $T_{4,s}$) (where $T_{4,s}$ is the temperature at state 4 assuming an isentropic process) </li> 
        </ul>  
 </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  
        <ul>
            <li>  $T_{2,s}$ = $T_1$*$(\frac{P_2}{P_1})^\frac{k-1}{k}$ = {{params.T1S}} * $({{params.pr}})^\frac{1.4-1}{1.4}$ = {{params.T2S}}${{params.unitsTemperatures}}$  </li>
            <li>  $T_{4,s}$ = $T_3$*$(\frac{P_4}{P_3})^\frac{k-1}{k}$ = {{params.T3S}} * $(\frac{1}{ {{params.pr}} })^\frac{1.4-1}{1.4}$ = {{params.T4S}}${{params.unitsTemperatures}}$ </li> 
            <li>  $w_{comp}$ = $\frac{ {{params.cp}}*({{params.T2S}} - {{params.T1S}}) }{ {{params.E1}} }$ = {{params.Wc}} ${{params.unitsSpecificEnthalpy}}$ </li>
            <li>  $w_{turb}$ = ({{params.E2}})*${{params.cp}}$*(${{params.T3S}}$ - ${{params.T4S}}$) = {{params.Wt}} ${{params.unitsSpecificEnthalpy}}$ </li>
            <li>  The back work ratio is then: BWR = $\frac{ w_{comp} }{ w_{turb} }$ = {{correct_answers.BWR}}%. </li>
        </ul> 
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> The heat transfer input in this cycle is $q_{in}$ = $h_3$ - $h_2$ = $c_p$*($T_3$ - $T_2$). (where $T_2$ is the actual temperature) </li>
            <li> $T_2$ can be found using the $w_{comp}$ equation: $T_2$ = $\frac{ w_{comp} }{c_p}$ + $T_1$ = {{params.T2}}{{params.unitsTemperatures}}. </li>
            <li> $q_{in}$ = {{params.Qin}} ${{params.unitsSpecificEnthalpy}}$</li> 
    
        </ul> 
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> The thermal efficiency can then be written as: $&#951$ = $\frac{ w_{net} }{ q{in} }$ = $\frac{ w_{turb} - w_{comp} }{ q{in} }$ = {{correct_answers.Eff}}%.
      </pl-hint>


</pl-solution-panel>",,,"air enters the compressor of a gas turbine at a pressure of $2.5$ bar and at a temperature of $300$ k.

the pressure ratio is $10$ and the maximum temperature is $1500$ k. 
the compressor and turbine efficiencies are $85\%$ and $90\%$.

using the brayton cycle, determine the back work ratio and the thermal efficiency. (assume $k = 1.4$)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Brayton cycle,Heat,Thermodynamics,"Back work ratio,Efficiencies,Temperature",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 117, ME 100B","Gas Turbine Cycles, Thermal Efficiency in Power Cycles"
222,compressor1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Compressor"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""power"", ""mass flow rate"",""heat""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> Air flowing at {{params.Mf}} ${{params.unitsMassFlowRate}}$ is compressed from a temperature of {{params.T1}} ${{params.unitsTemperature}}$ to a temperature of {{params.T2}} ${{params.unitsTemperature}}$.
     </p>
    <p> For each {{params.unitsMass}} of air that passes through the compressor, {{params.Q}} ${{params.unitsHeat}}$ of heat is lost.
    <p> Assume steady state and any kinetic and potential effects are negligible. </p>
   </pl-question-panel>
    
    <p> Calculate the power required by the compressor. </p>
    <pl-number-input answers-name=""Power"" comparison=""sigfig"" digits=""3"" label=""Power (in {{params.unitsPower}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {

    T1 = math.randomInt(250,350);
    T2 = math.randomInt(450,550);
    Q = math.randomInt(10,30);
    Mf = math.randomInt(1,10);
    cp = 1.005;
} 
else {
    
    T1 = math.randomInt(80,150);
    T2 = math.randomInt(250,300);
    Q = math.randomInt(5,15);
    Mf =  math.randomInt(5,15);
    cp = 0.24028;
}
 
Power = Mf*((cp*(T1-T2)) - Q );
if (unitSel === 1) {
 Power = Power * 1.41485 //converting to HP
}
Power=(math.round(Power*100))/100;
data = {
    params: { 
        T1:T1,
        T2:T2,
        Q:Q,
        Mf: Mf, 
        unitsMassFlowRate: unitsMassFlowRate,
        unitsTemperature : unitsTemperature,
        unitsPower: unitsPower,
        unitsHeat: unitsHeat,
        unitsMass : unitsMass,

    
    },
    correct_answers: {
        Power : Power
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Write the energy rate balance for this problem. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> At steady state, the energy rate balance can be written as: 0 = $\dot{Q}$ - $\dot{W}$ + $\dot{m}$*($h_1$ - $h_2$ + $\frac{V_1^2 - V_2^2}{2}$ + g*($z_1$ - $z_2$)). </pl-hint>
    <pl-hint level=""3"" data-type=""text""> To find power, the energy rate balance can be reduced to : $\dot{W}$ = $\dot{Q}$ + $\dot{m}$*($h_1$ - $h_2$) = $\dot{m}$*Q + $\dot{m}$*$c_p$*($T_1$ - $T_2$) (where Q is energy per unit mass).
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Plugging in all the given values and making any necessary conversions should give:  $\dot{W}$ = {{correct_answers.Power}} ${{params.unitsPower}}$
    </pl-hint>

</pl-solution-panel>",,,"air flowing at 2 kg/s is compressed from a temperature of 300 k to a temperature of 400 k.
     
for each kg of air that passes through the compressor, 1000 j of heat is lost.
assume steady state and any kinetic and potential effects are negligible. 

calculate the power required by the compressor.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Compressor,Heat,Thermodynamics,"Power,Mass flow rate,Heat",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 135","Refrigeration Cycles, Heat Transfer Area"
223,compressor2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Compressor"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""ideal gas"", ""heat transfer rate"",""work""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> Air enters a compressor at a temperature of {{params.T1}} ${{params.unitsTemperature}}$ and is compressed at steady state reaching a temperature of {{params.T2}} ${{params.unitsTemperature}}$.
     </p>
    <p> The mass flow rate of the air entering is  {{params.Mf}} ${{params.unitsMassFlowRate}}$, and the work input to the compressor is {{params.Power}} ${{params.unitsEnergy}}$ per ${{params.unitsMass}}$ of air flowing.
    <p> Neglect any kinetic and potential energy effects. </p>
   </pl-question-panel>
    
    <p> Calculate the heat transfer rate. </p>
    <pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Heat Transfer Rate (in {{params.unitsHeatRate}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""heat"": ""kJ"",
            ""heatRate"":""kW"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""heatRate"": ""BTU/s"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;
    unitsHeatRate = units[unitSystems[unitSel]].heatRate;

    
    




if (unitSel === 0) {
    T1 = math.randomInt(20,30);
    T2 = math.randomInt(60,70);
    Power = math.randomInt(50,70);
    Mf = math.randomInt(1,5);
    cp = 1.005;
} 
else {
    T1 = math.randomInt(80,90);
    T2 = math.randomInt(120,130);
    Power = math.randomInt(50,70);
    Mf =  math.randomInt(1,5);
    cp = 0.24028;
}
 
 Q = Mf*((cp*(T2-T1)) - Power );

Q =(math.round(Q*100))/100;
data = {
    params: { 
        T1:T1,
        T2:T2,
        Power: Power,
        Mf: Mf, 
        unitsMassFlowRate: unitsMassFlowRate,
        unitsTemperature : unitsTemperature,
        unitsEnergy: unitsEnergy,
        unitsHeatRate: unitsHeatRate,
        unitsMass : unitsMass,

    
    },
    correct_answers: {
        Q: Q
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Write the energy rate balance for this problem. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> At steady state, the energy rate balance can be written as: 0 = $\dot{Q}$ - $\dot{W}$ + $\dot{m}$*($h_1$ - $h_2$ + $\frac{V_1^2 - V_2^2}{2}$ + g*($z_1$ - $z_2$)). </pl-hint>
    <pl-hint level=""3"" data-type=""text""> To find the heat transfer rate, the energy rate balance can be reduced to : $\dot{Q}$ = $\dot{W}$ + $\dot{m}$*($h_1$ - $h_2$) = $\dot{m}$*W + $\dot{m}$*$c_p$*($T_1$ - $T_2$) (where W is work per unit mass).
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Plugging in all the given values and making any necessary conversions should give:  $\dot{Q}$ = {{correct_answers.Q}} ${{params.unitsHeatRate}}$
    </pl-hint>

</pl-solution-panel>",,,"air enters a compressor at a temperature of 300 k and is compressed at steady state reaching a temperature of 400 k.
     
the mass flow rate of the air entering is  2 kg/s, and the work input to the compressor is 1000 j per kg of air flowing.
neglect any kinetic and potential energy effects. 

calculate the heat transfer rate.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Compressor,Heat,Thermodynamics,"Ideal gas,Heat transfer rate,Work",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 100A, ME 135","Refrigeration Cycles, Heat Transfer Area"
224,ericssonCycle1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Ericsson Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""work"", ""heat input"",""temperature""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
        Air enters the compressor of an Ericsson cycle at a pressure of ${{params.Pressure1S}}$ ${{params.unitsPressure}}$ and at a temperature of  ${{params.T1}}$${{params.unitsTemperature}}$ .</div>
    </p>
    <p> The pressure ratio is {{params.pr}} and the maximum temperature is ${{params.T3}} {{params.unitsTemperature}}$. </p>
    </pl-question-panel>
    
    <p> Determine the work output and the heat input.</p>
    <pl-number-input answers-name=""Work"" comparison=""sigfig"" digits=""3"" label=""Work Output (in {{params.unitsSpecificEnthalpy}})""></pl-number-input>
    <pl-number-input answers-name=""Qin"" comparison=""sigfig"" digits=""3"" label=""Heat Input (in {{params.unitsSpecificEnthalpy}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""specificVolume"":""m^3/kg"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""pressures"":""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""specificVolume"":""ft^3/lb"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""pressures"":""psf"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsPressures = units[unitSystems[unitSel]].pressures;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;
    unitsSpecificVolume = units[unitSystems[unitSel]].specificVolume;


    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(175,225);
   Pressure1S = Pressure1;
   T1 = math.randomInt(85,115);
   T3= math.randomInt(575,625);
   T1Old = T1;
   T3Old = T3;
   T1 = T1 + 273; //convertkelvin
   T3 = T3 + 273; //convertkelvin
   T2 = T1;
   T4 = T3;
   T1S = T1;
   T3S = T3;
   cp = 1.005
   R = 0.287
   pr = math.randomInt(7,12);
}
else {
    Pressure1S = math.randomInt(25,35);
    Pressure1 = Pressure1S * 144; //psi to psf
    T1 = math.randomInt(180,220); 
    T3 = math.randomInt(1100,1120); 
    T1Old = T1;
    T3Old = T3;
    T1 = T1 + 459.67; //converting F to R
    T3 = T3 + 459.67; //converting F to R
    T1S = T1;
    T3S = T3;
    T2 = T1;
    T4 = T3;
    cp = 0.241 //cp of air in btu/(lb F)
    R = 53.34 //R in (ft lbf)/(lbm R)
    pr = math.randomInt(7,12);
}

//finding specific volume
v1 = (R*T1)/(Pressure1);
v4 = (T4/T1)*v1;
v2 = (v4/pr);
Pressure2 = (R*T2)/v2;
Pressure3 = Pressure2;
v3 = (R*T3)/(Pressure3);

//finding work
W12 = R*T1*Math.log(v2/v1); //Work from process 1 to 2
W23 = Pressure2*(v3 - v2);
W34 = R*T3*Math.log(v4/v3);
W41 = Pressure1*(v1 - v4);
Work = W12 + W23 + W34 + W41;
if(unitSel==1){
Work = Work/778.2 //converting lb ft to BTU
}

//finding heat input
Eff = 1 - (T1 / T3) //efficiency
Qin = (Work/Eff)


Work = math.round(Work *10)/10;
Qin = math.round(Qin*10)/10;
T1 = T1Old;
T3 = T3Old;

data = {
    params: { 
      T2:T2,
      T3:T3,
      T1:T1,
      T4:T4,
      T1S:T1S,
      T3S:T3S,
      v1:v1,
      v2:v2,
      v3:v3,
      v4:v4,
      pr:pr,
      cp:cp,
      R:R,
      Eff:Eff,
      W12:W12,
      W23:W23,
      W34:W34,
      W41:W41,
      Pressure1:Pressure1,
      Pressure2:Pressure2,
      Pressure1S:Pressure1S,
      unitsTemperature : unitsTemperature,
      unitsTemperatures : unitsTemperatures,
      unitsPressure : unitsPressure,
      unitsPressures : unitsPressures,
      unitsSpecificEnthalpy:unitsSpecificEnthalpy,
      unitsSpecificVolume:unitsSpecificVolume,

    },
    correct_answers: {
       Work:Work,
       Qin:Qin,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> To determine the work output for the Ericsson cycle, we must find the work for each process: $W_{out}$ = $W_{1-2}$ + $W_{2-3}$ + $W_{3-4}$ + $W_{4-1}$.
     </pl-hint>
    <pl-hint level=""2"" data-type=""text""> 
        <ul> 
            <li>  For process 1-2: since it is an isothermal process, $W_{1-2}$ = R*$T_1$*ln($\frac{v_2}{v_1}$).</li>
            <li>  For process 2-3: since it is an isobaric process, $W_{2-3}$ = $P_2$*($v_3$ - $v_2$).</li> 
            <li>  For process 3-4: since it is an isothermal process, $W_{3-4}$ = R*$T_3$*ln($\frac{v_4}{v_3}$).</li>
            <li>  For process 4-1: since it is an isobaric process, $W_{4-1}$ = $P_1$*($v_1$ - $v_4$).</li>
            <li>  We must now calculate the unknowns ($P_2$,$v_1$,$v_2$,$v_3$,$v_4$).</li>
        </ul>  
 </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  
        <ul>
            <li> Using the ideal gas law, $v_1$ = $\frac{R*T_1}{P_1}$ = {{params.v1}}${{params.unitsSpecificVolume}}$. (make any necessary conversions) </li>
            <li> For the isobaric process 4-1, $\frac{T_4}{v_4}$ = $\frac{T_1}{v_1}$ $\implies$ $v_4$ = $\frac{T_4}{T_1}$ * $v_1$ = {{params.v4}}${{params.unitsSpecificVolume}}$.</li>
            <li> From the definition of the compression ratio, $\frac{v_4}{v_2}$ = {{params.pr}} $\implies$ $v_2$ = $\frac{v_4}{ {{params.pr}} }$ = {{params.v2}}${{params.unitsSpecificVolume}}$. </li>
            <li> Using the ideal gas law, $P_2$ = $\frac{R*T_2}{v_2}$ = {{params.Pressure2}}{{params.unitsPressures}}.</li>
            <li> $v_3$ can now be solved since $P_2$ = $P_3$: $v_3$ = $\frac{R*T_3}{P_3}$ = {{params.v3}}${{params.unitsSpecificVolume}}$. </li>
        </ul> 
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Making any necessary conversions and plugging in all the values, $W_{output}$ = {{correct_answers.Work}}{{params.unitsSpecificEnthalpy}}.
    </pl-hint>
    <pl-hint level=""5"" data-type=""text"">
        <u1>
             <li> Finally, the thermal efficiency is: $&#951$ = 1 - $\frac{ T_{Low} }{ T_{High} }$ = {{params.Eff}}. </li>
             <li>  $q_{in}$ = $\frac{ W_{output} }{&#951}$ = {{correct_answers.Qin}}{{params.unitsSpecificEnthalpy}}.  </li>

        </u1>
      </pl-hint>


</pl-solution-panel>",,,"air enters the compressor of an ericsson cycle at a pressure of $2.5$ bar and at a temperature of $300$ k.

the pressure ratio is $4$ and the maximum temperature is $1200$ k.

determine the work output and the heat input.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Ericsson cycle,Heat,Thermodynamics,"Work,Heat input,Temperature",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,ME 100B,"Thermal Efficiency in Power Cycles, Refrigeration Cycles"
225,mixture1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Mixture"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Humidity Ratio"", ""mass"",""Pressure""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> In a ${{params.Volume}}$ ${{params.unitsVolume}}$ room, the air at ${{params.OldT1}}$${{params.unitsTemperature}}$ and {{params.Pressure1}} ${{params.unitsPressure}}$ has a relative humidity of {{params.OldRH}}%. </div>
    </p>
    </pl-question-panel>
    
    <p> Calculate the humidity ratio and the mass of water vapor in the air. </p>
    <pl-number-input answers-name=""HR"" comparison=""sigfig"" digits=""3"" label=""Humidity Ratio (in {{params.unitsMassRatio}} )""></pl-number-input>
    <pl-number-input answers-name=""Mv"" comparison=""sigfig"" digits=""3"" label=""$m_v$ (in {{params.unitsMass}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
            ""massRatio"": ""kg/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
            ""massRatio"": ""lbm/lbm"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;
    unitsMassRatio = units[unitSystems[unitSel]].massRatio;


    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(100,110);
   Volume = math.randomInt(125,175);
   T1 = math.randomInt(3,8) * 5;
   OldT1 = T1;
   T1 = T1 + 273;
   RH = math.randomInt(55,70);
   OldRH = RH;
   RH = RH/100;
   R = 0.287;

}
else {
    Pressure1 = math.randomInt(27,31) * 0.5;
    Volume = math.randomInt(44,60)*100;
    T1 = math.randomInt(6,11) * 10;
    OldT1 = T1;
    T1 = T1 + 459.67; //F to R
    RH = math.randomInt(55,70);
    OldRH = RH;
    RH = RH/100;
    R = 53.34; 
}

if (OldT1 == 15){
    Pg = 0.001705; //MPa
}
else if (OldT1 == 20){
    Pg = 0.002338
}
else if (OldT1 == 25){
    Pg = 0.003169
}
else if (OldT1 == 30){
    Pg = 0.004246
}
else if (OldT1 == 35){
    Pg = 0.005628
}

//uscs
if (OldT1 == 60){
    Pg = 0.2563
}
else if (OldT1 == 70){
    Pg = 0.3632
}
else if (OldT1 == 80){
    Pg = 0.5073
}
else if (OldT1 == 90){
    Pg = 0.6988
}
else if (OldT1 == 100){
    Pg = 0.9503
}

if (unitSel==0){  
  Pg = Pg * 1000; //MPa to KPa
}
else{
  Pg = Pg;
}
Pv = Pg * RH;
Pa = Pressure1 - Pv; //partial pressure of air
HR = 0.622 * (Pv/Pa) //Humidity Ratio
if (unitSel==0){
    Mv = HR*((Pa*Volume)/(R * T1));
  }
  else{
    Mv = HR*((Pa*Volume)/(R * T1)) * 144;
  }
Mv =  math.round(Mv *10)/10;
HR = math.round(HR*10000)/10000;

data = {
    params: { 
        T1:T1,
      OldT1:OldT1,
      Volume:Volume,
      RH:RH,
      OldRH:OldRH,
      Pressure1:Pressure1,
      Pg:Pg,
      Pv:Pv,
      Pa:Pa,
      unitsVolume:unitsVolume,
      unitsTemperature : unitsTemperature,
      unitsPressure : unitsPressure,
      unitsMass : unitsMass,
      unitsMassRatio : unitsMassRatio,

    },
    correct_answers: {
       HR: HR,
       Mv : Mv,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> The partial pressure ($P_v$) of water vapor can be found using the formula: $P_v$ = $P_g$ * $&#981$ = {{params.Pg}} * {{params.RH}} = {{params.Pv}} {{params.unitsPressure}}, where $P_g$ is the saturation pressure at {{params.OldT1}}{{params.unitsTemperature}} found in the steam tables.
     </pl-hint>
    <pl-hint level=""2"" data-type=""text""> 
    <ul>
        <li>  The partial pressure of air is then $P_a$ = $P$ - $P_v$ = {{params.Pressure1}} - {{params.Pv}} = {{params.Pa}} {{params.unitsPressure}}.</li>
        <li>  The humidity ratio is then $&#969$ = 0.622*$\frac{P_v}{P_a}$ = {{correct_answers.HR}} {{params.unitsMassRatio}}.</li> 
    </ul> 
 </pl-hint>
    <pl-hint level=""3"" data-type=""text""> The humidity ratio by definition is $&#969$ = $\frac{m_v}{m_a}$.
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Using the ideal gas equation, $m_a$ = $\frac{P_a*V}{R_a*T}$.
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        After making any necessary conversions, $m_v$ = $&#969$ * $m_a$ = {{correct_answers.Mv}} {{params.unitsMass}}s.
      </pl-hint>


</pl-solution-panel>",,,"In a room of 100 m^3, the air at 25°C and 1 atm has a relative humidity of 60%.  Calculate:  The humidity ratio. The mass of water vapor in the air. Determine:  Humidity Ratio (in g/kg for example) Mass of water vapor, m_v (in kg for example)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Mixture,Heat,Thermodynamics,"Humidity ratio,Mass,Pressure",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,ME 135,Humidity Ratio
226,pistonCylinder1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Piston-Cylinder Assembly"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Work"", ""Energy"",""Pressure""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
     Energy is added to a piston-cylinder assembly. The initial pressure and volume are ${{params.Pressure1}} {{params.unitsPressure}}$ and ${{params.Volume1}} {{params.unitsVolume}}$.</div>
    </p>
    <p> Determine the work done by the gas on the piston if the final pressure is ${{params.Pressure2}} {{params.unitsPressure}}$, and the quantity PV remains constant. </p>
    </pl-question-panel>
    
    <pl-number-input answers-name=""Work"" comparison=""sigfig"" digits=""3"" label=""Work (in {{params.unitsEnergy}})""></pl-number-input>
    
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
   Pressure1 = math.randomInt(200,300);
    Pressure2 = math.randomInt(50,150);
    Volume1 = math.randomInt(1,5);

}
else {
    Pressure1 = math.randomInt(15,25);
    Pressure2 = math.randomInt(1,10);
    Volume1 = math.randomInt(1,15);
}

Const = Pressure1*Volume1;
Volume2 = (Pressure1*Volume1)/(Pressure2);
Work=Const*Math.log(Volume2/Volume1);

if (unitSel === 1) {
    Work= Work/(0.00694444)
 
 }
Work=(math.round(Work*10))/10;
data = {
    params: { 
        Pressure1: Pressure1,
        Pressure2: Pressure2,
        Work: Work,
        Volume1: Volume1,
        unitsPressure: unitsPressure,
        unitsVolume: unitsVolume,
        unitsEnergy: unitsEnergy,
    },
    correct_answers: {
        Work: Work,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Work is found by the equation &#8747PdV. Plug the relationship PV = C into this equation to get $\int_{V_1}^{V_2}\frac{C}{V}dV$. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Solving for the constant ""C"" gives: C = $P_1$ * $V_1$ = {{params.Pressure1}} * {{params.Volume1}}.  </pl-hint>
    <pl-hint level=""3"" data-type=""text""> Since this is an isothermal process, solve for $V_2$ using the relationship $P_2$ * $V_2$ =  $P_1$ * $V_1$. </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Now find Work, Work = C*ln($\frac{V_2}{V_1}$) = {{correct_answers.Work}} ${{params.unitsEnergy}}$.

    </pl-hint>
</pl-solution-panel>

",,,"energy is added to a piston-cylinder assembly. the initial pressure and volume are $5 \, \text{bar}$ and $2 \, \text{m}^3$.

determine the work done by the gas on the piston if the final pressure is $10 \, \text{bar}$, and the quantity pv remains constant.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Piston-cylinder assembly,Heat,Thermodynamics,"Work,Energy,Pressure",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B","Polytropic Processes, Ideal Gas Behavior"
227,pistonCylinder2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Piston-Cylinder Assembly"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Work"", ""Energy"",""Pressure""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> Within a piston-cylinder assembly, air undergoes three processes. </p>
    <p><b>Process 1-2:</b> Compression where PV= $constant$ with initial pressure and volume of ${{params.Pressure1}} {{params.unitsPressure}}$ and ${{params.Volume1}} {{params.unitsVolume}}$ and final pressure of ${{params.Pressure2}} {{params.unitsPressure}}$. </p>
    <p><b>Process 2-3:</b> Constant volume where pressure = ${{params.Pressure3}} {{params.unitsPressure}}$.  </p>
    <p><b>Process 3-1:</b> Constant pressure expansion to initial state. </p>
   
    </pl-question-panel>

    <p> What is the volume at state 2? </p>
    <pl-number-input answers-name=""Volume2"" comparison=""sigfig"" digits=""3"" label=""Volume 2 (in ${{params.unitsVolume}}$)""></pl-number-input>
    <p> What is the total work done? </p>
    <pl-number-input answers-name=""Work"" comparison=""sigfig"" digits=""3"" label=""Work (in ${{params.unitsEnergy}}$)""></pl-number-input>
   
    
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    Pressure1 = math.randomInt(50,150);
    Pressure2 = math.randomInt(200,300);
    Volume1 = math.randomInt(1,5);

}
else {
    Pressure1 = math.randomInt(5,20);
    Pressure2 = math.randomInt(30,60);
    Volume1 = math.randomInt(1,15);
}
//process 1-2
Const = Pressure1*Volume1;
Volume2 = (Pressure1*Volume1)/(Pressure2);
Work1 =Const*Math.log(Volume2/Volume1);
//process 2-3
Work2 = 0;
//process 3-1
Work3 = Pressure1 * (Volume1 - Volume2);

Work = Work1 + Work2 + Work3;

if (unitSel === 1) {
    Work= Work/(0.00694444) //converting lb/in^2 to lb/ft^2
    Work1= Work1/(0.00694444)
    Work3= Work3/(0.00694444)
 }
Work=(math.round(Work*10))/10;
data = {
    params: { 
        Pressure1: Pressure1,
        Pressure2: Pressure2,
        Pressure3: Pressure2,
        Work1: Work1,
        Work2: Work2,
        Work3: Work3,
        Volume1: Volume1,
        unitsPressure: unitsPressure,
        unitsVolume: unitsVolume,
        unitsEnergy: unitsEnergy,
    },
    correct_answers: {
        Volume2: Volume2,
        Work: Work,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> To find the volume at state 2 use the relationship: $P_2$ * $V_2$ =  $P_1$ * $V_1$  </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Notice that work is solved using a different relationship for each process. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> Process 1-2: Since PV = C, $Work_1$ = Cln($\frac{V_2}{V_1}$) = {{params.Work1}} ${{params.unitsEnergy}}$</li>
            <li> Process 2-3: Since volume is constant, $Work_2$ = 0 </li>
            <li> Process 3-1: Since $P_3$ = $P_1$ , $Work_3$ = $P_1$ ($V_1$ - $V_3$) = {{params.Work3}} ${{params.unitsEnergy}}$</li>
        </ul>
    </pl-hint>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Now find total Work: Total Work = $Work_1$ + $Work_2$ + $Work_3$ = {{correct_answers.Work}} ${{params.unitsEnergy}}$.

    </pl-hint>
</pl-solution-panel>

",,,"Within a piston-cylinder assembly, air undergoes three processes:  Process 1-2: Compression where PV = constant. Initial pressure and volume are 100 kPa and 0.5 m^3, respectively. The final pressure is 200 kPa.  Process 2-3: The process occurs at a constant volume where the pressure is 150 kPa.  Process 3-1: Constant pressure expansion returning to the initial state.  Calculate:  The volume at state 2. The total work done. Determine:  Volume at state 2 (in m^3 for example) Total work done (unit would be provided in the original question, such as J or kJ)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Piston-cylinder assembly,Heat,Thermodynamics,"Work,Energy,Pressure",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B, ME 135","Polytropic Processes, Ideal Gas Behavior"
228,pistonCylinder3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Piston-Cylinder Assembly"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Work"", ""Energy"",""polytropic process""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
    ${{params.Mass}} {{params.unitsMass}}s$ of Refrigerant 134a undergoes a polytropic process in a piston-cylinder assembly.
     </div>
    </p>
    <p> The refrigerant goes from an initial state of saturated vapor at ${{params.Pressure1}} {{params.unitsPressure}}$ to a final state of ${{params.Pressure2}} {{params.unitsPressure}}$ .</p>
    </pl-question-panel>
    
    <p> If n = {{params.n}}, calculate the work for the process. </p>
    <pl-number-input answers-name=""Work"" comparison=""sigfig"" digits=""3"" label=""Work (in {{params.unitsWork}})""></pl-number-input>
    
   
        ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""kJ"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""degree C"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg""
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""degree F"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb""
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    Pressure1 = math.randomInt(8,13);
    Pressure1 = Pressure1 * 20;
    Pressure2 = Pressure1 * 6;
    n=math.randomInt(110,300)
    n=n/100;
    Mass = math.randomInt(2,6);
}
else {
    Pressure1 = math.randomInt(6,11);
    Pressure1 = Pressure1 * 10;
    Pressure2 = math.randomInt(200,280);
    n=math.randomInt(110,300)
    n=n/100;
    Mass = math.randomInt(2,6);
}

//SI
if (Pressure1 == 160){
    SV1 = 0.1229;
}
else if (Pressure1 == 180){
    SV1 = 0.1098
}
else if (Pressure1 == 200){
    SV1 = 0.0993
}
else if (Pressure1 == 220){
    SV1 = 0.9135
}
else if (Pressure1 == 240){
    SV1 = 0.0834
}

//uscs
if (Pressure1 == 60){
    SV1 = 0.7887
}
else if (Pressure1 == 70){
    SV1 = 0.6778
}
else if (Pressure1 == 80){
    SV1 = 0.5938
}
else if (Pressure1 == 90){
    SV1 = 0.5278
}
else if (Pressure1 == 100){
    SV1 = 0.4747
}

SV2 = ((Pressure1 / Pressure2)**(1/n))*SV1;
Work = Mass*(((Pressure2*SV2)-(Pressure1*SV1))/(1-n));



if (unitSel === 1) {
    Work= Work/(0.00694444)
 
 }
Work=(math.round(Work*10))/10;
data = {
    params: { 
        Pressure1: Pressure1,
        Pressure2: Pressure2,
        Mass : Mass,
        n : n,
        Work: Work,
        SV1: SV1,
        SV2: SV2,
        unitsPressure: unitsPressure,
        unitsMass: unitsMass,
        unitsWork: unitsWork,
    },
    correct_answers: {
        Work: Work,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Since this is a polytropic process, use the relationship $PV^n$ = C. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> Work can be found using the equation: Work =  $\int_{V_1}^{V_2}\frac{C}{V^n}dV$ = $\frac{P_2*V_2 - P_1*V_1}{1 - n}$. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> Since mass is given and volume is not, plug in the relationship V = m*$v$ (where $v$ = specific volume) into the work equation to get: Work = m*($\frac{P_2*v_2 - P_1*v_1}{1 - n}$).
    </pl-hint>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Use the pressure table from the textbook at {{params.Pressure1}} ${{params.unitsPressure}}$ to get $v$={{params.SV1}}. Now use the relationship $P_1$*$v_1^n$ = $P_2$*$v_2^n$ to solve for $v_2$.  

    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> Plug all values in to get: Work = {{correct_answers.Work}} ${{params.unitsWork}}$

    </pl-hint>

</pl-solution-panel>

",,,"$150 \, \text{kg}$ of refrigerant 134a undergoes a polytropic process in a piston-cylinder assembly.

the refrigerant goes from an initial state of saturated vapor at $200 \, \text{kpa}$ to a final state of $800 \, \text{kpa}$.

if $n = 1.5$, calculate the work for the process.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Piston-cylinder assembly,Heat,Thermodynamics,"Work,Energy,Polytropic process",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B, ME 135","Refrigeration Cycles, Polytropic Processes"
229,pistonCylinder4,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Piston-Cylinder Assembly"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Heat Transfer"", ""Ideal Gas Law"",""firstlaw""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
    {{params.Mass}} ${{params.unitsMass}}$ of air fills the cylinder of a piston-cylinder assembly. The initial volume and pressure are ${{params.Volume1}} {{params.unitsVolume}}$ and ${{params.Pressure1}} {{params.unitsPressure}}$. 
    </div>
     </p>
    <p> At constant pressure, heat transfer to the air occurs until the volume is doubled. Kinetic and potential energy effects are negligible. </p>
       <p> If the specific heat is constant, $c_v$ = ${{params.Cv}} {{params.unitsCv}}$, and the specific gas constant R = ${{params.Rs}} {{params.unitsRs}} $.</p>
   </pl-question-panel>
    
    <p> Calculate the heat transfer for the process. </p>
    <pl-number-input answers-name=""Q"" comparison=""sigfig"" digits=""3"" label=""Q (in {{params.unitsHeat}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""kJ"",
            ""pressure"": ""bar"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""Cv"": ""kJ/kg K"",
            ""heatingvalue"": ""MJ/kg"",
            ""Rs"":""J/(Kg * K)"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lbs"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""Cv"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""Rs"": ""(ft lb)/(slug R) "",
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsCv = units[unitSystems[unitSel]].Cv;
    unitsRs = units[unitSystems[unitSel]].Rs;

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    Pressure1 = math.randomInt(10,21);
    Pressure1 = Pressure1 / 10;
    Cv= 0.72
    Volume1 = math.randomInt(1,4);
    Mass = math.randomInt(4,8);
    OldPressure1 = Pressure1;
}
else {
    Pressure1 = math.randomInt(25,35);
    Cv= 0.17
    Volume1 = math.randomInt(70,100);
    Mass = math.randomInt(5,10);
    OldPressure1 = Pressure1;
}


if (unitSel === 0) {
    Pressure1 = Pressure1 * 10**5  //converting to Pa
    Rs = 287;
    Volume2 = 2 * Volume1
    T1 = (Pressure1 * Volume1)/(Mass * Rs);
    T2 = (Volume2/Volume1)*T1;
    U = Mass * Cv * (T2 - T1);
    Work = (Pressure1 * ( Volume2 - Volume1)) / 10**3; //converting to kj
}
else {
    Pressure1 = Pressure1 * 144
    Rs = 53.34; //R value of air in (ft*lbf)/(lbm*R)
    Volume2 = 2 * Volume1;
    T1 = (Pressure1 * Volume1)/(Mass * Rs);
    T1 = T1 - 459.67; //coverting Rankine scale to Fahrenheit
    T2 = (Volume2/Volume1)*T1;
    U = Mass * Cv * (T2 - T1)
    Work = (Pressure1 * ( Volume2 - Volume1)) / (778.17); //converting to BTU
}

Q = Work + U;

Q=(math.round(Q*10))/10;
Pressure1 = OldPressure1;
data = {
    params: { 
        Pressure1: Pressure1,
        Cv : Cv,
        Mass : Mass,
        unitsPressure: unitsPressure,
        Volume1 : Volume1,
        Rs : Rs,
        T1:T1,
        T2:T2,
        unitsTemperature: unitsTemperature,
        unitsVolume: unitsVolume,
        unitsMass: unitsMass,
        unitsHeat: unitsHeat,
        unitsCv: unitsCv,
        unitsRs : unitsRs,
    },
    correct_answers: {
        Q: Q,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Write the energy balance for this problem. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The energy balance can be written as: &#9651KE + &#9651PE + &#9651U = Q - W. This then can be reduced to: Q = &#9651U + W. Expand ""&#9651U"" and ""W"" using the correct assumptions for this problem. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> The change of internal energy can be expressed as: &#9651U = m*($U_2$ - $U_1$) = m*$c_v$*($T_2$ - $T_1$).</li>
            <li> At constant pressure, Work can be expressed as: W = $\int_{V_1}^{V_2}PdV$ = P*($V_2$ - $V_1$). </li>
            <li> The heat transfer for this process can now be written as: Q = m*$c_v$*($T_2$ - $T_1$) + P*($V_2$ - $V_1$). </li>
        
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> To evalute $T_1$, we need to use the ideal gas equation: $P_1$*$V_1$ = m*R*$T_1$ $\implies$ $T_1$ = $\frac{P_1*V_1}{m*R}$ = {{params.T1}}{{params.unitsTemperature}} </li>
            <li> Since $P_1$ = $P_2$, $\frac{m*R*T_1}{V_1}$ = $\frac{m*R*T_2}{V_2}$  $\implies$ $T_2$ = $\frac{V_2}{V_1}$*$T_1$ = {{params.T2}}{{params.unitsTemperature}} </li> 
        </ul> 

    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> Plug all values in to get: Q = {{correct_answers.Q}} ${{params.unitsHeat}}$

    </pl-hint>

</pl-solution-panel>

",,,"5 kg of air fills the cylinder of a piston-cylinder assembly. The initial volume and pressure are 1 m^3 and 100 kPa, respectively.  Heat is transferred to the air at constant pressure until the volume is doubled. We can neglect kinetic and potential energy effects.  Given that the specific heat is constant, cv = 0.718 kJ/kg·K, and the specific gas constant R = 0.287 kJ/kg·K.  Calculate:  The heat transfer for the process. Determine: Heat transfer Q (in kJ for example).",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Piston-cylinder assembly,Heat,Thermodynamics,"Heat transfer,Ideal gas law,Firstlaw",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B","Ideal Gas Behavior, Heat Transfer Area"
230,pistonCylinder5,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Piston-Cylinder Assembly"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Heat Transfer"", ""Ideal Gas Law"",""firstlaw""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
    {{params.Mass}} ${{params.unitsMass}}s$ of helium gas is contained in a piston-cylinder assembly whose piston is being supported by stops. The
    </div>
     </p>
    <p> helium is initially at {{params.Pressure1}}{{params.unitsPressure}} and {{params.T1}}{{params.unitsTemperature}}. {{params.Q}} {{params.unitsHeat}} of energy must be transferred to the helium by heat before </p>
    <p> the piston can began rising due to its mass and the effects of the atmospheric pressure. For helium, assume the </p>
    <p> ideal gas behavior $c_p$ = 2/5 R.</p>
   </pl-question-panel>
    <p> At what pressure will the helium be at just before the piston begans to rise? </p>
    <pl-number-input answers-name=""Pressure2"" comparison=""sigfig"" digits=""3"" label=""Pressure (in {{params.unitsPressure}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": "" &degC"",
            ""temperaturec"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""&degF"",
            ""temperaturec"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperaturec = units[unitSystems[unitSel]].temperaturec;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    
    

convToMega = 1e-6;
convToGiga = 1e-9;
convToKilo = 1e-3;
convToCenti = 1e2;
convToMilli = 1e3;
convToMicro = 1e6;



if (unitSel === 0) {
    Pressure1 = math.randomInt(50,150);
    Q = math.randomInt(1500,2500);
    Mass = (math.randomInt(10,30))/20;
    T1 = math.randomInt(15,30);
    OldQ = Q;
    OldT1 = T1;
    T1 = T1 + 273;
    R=(8.314/4.003)
    Cv=(3/2)*R

}
else {
    Pressure1 = math.randomInt(10,20);
    Q = math.randomInt(1400,2300);
    Mass = (math.randomInt(30,60))/20;
    T1 = math.randomInt(60,90);
    OldT1 = T1;
    OldQ = Q;
    T1 = T1 + 459.67; //converting to Rankine scale
    Q = Q * 778.2; //Converting to lb*ft
    R = 386;
    Cv=(3/2)* R;
}

T2= ((Q)/(Mass*Cv)) + T1;
Pressure2 = T2 * (Pressure1 / T1);



Pressure2=(math.round(Pressure2*10))/10;
T1 = OldT1;
Q = OldQ;
data = {
    params: { 
        Pressure1: Pressure1,
        Q: Q,
        Mass: Mass,
        T1 : T1,
        T2 : T2,
        unitsPressure: unitsPressure,
        unitsTemperature: unitsTemperature,
        unitsTemperaturec: unitsTemperaturec,
        unitsHeat: unitsHeat,
        unitsMass : unitsMass,
    },
    correct_answers: {
        Pressure2 : Pressure2
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Write the energy balance for this problem. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The energy balance can be written as: &#9651KE + &#9651PE + &#9651U = Q - W. This then can be reduced to: &#9651U = Q. Expand ""&#9651U"" using the correct assumption for this problem. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> Since $c_p$ - $c_v$ = R, $c_v$ = $\frac{5}{2}$R - R = $\frac{3}{2}$R. </li>
            <li> The change of internal energy can now be expressed as: &#9651U = m*($U_2$ - $U_1$) = m*$c_v$*($T_2$ - $T_1$) =  m*$\frac{3}{2}$R*($T_2$ - $T_1$). </li>
            <li> The heat transfer for this process can now be written as: Q = m*$\frac{3}{2}$R*($T_2$ - $T_1$). </li>
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> To evalute $T_2$, we need to use the heat transfer equation to get: $T_2$ = $\frac{Q}{m*c_v}$ + $T_1$ = {{params.T2}}{{params.unitsTemperaturec}}</li>
            <li> Now, use the ideal gas equation to find the final pressure. </li> 
        </ul> 

    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> Since $V_1$ = $V_2$, $\frac{m*R*T_1}{P_1}$ = $\frac{m*R*T_2}{P_2}$ $\implies$ $P_2$ = $T_2$*$\frac{P_1}{T_1}$ = {{correct_answers.Pressure2}} ${{params.unitsPressure}}$

    </pl-hint>

</pl-solution-panel>",,,"2 kg of helium gas is contained in a piston-cylinder assembly, with the piston being supported by stops. The helium is initially at 100 kPa and 25°C. Before the piston can start rising due to its mass and the effects of atmospheric pressure, 50 kJ of energy must be transferred to the helium by heat. For helium, assume the ideal gas behavior with cp = 2/5 R.  Calculate:  At what pressure will the helium be just before the piston starts to rise? Determine: Pressure (in kPa for example).",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Piston-cylinder assembly,Heat,Thermodynamics,"Heat transfer,Ideal gas law,Firstlaw",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B",Ideal Gas Behavior
231,refrigerationCycle1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Refrigeration Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""COP"", ""power"",""efficiency""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
        A simple gas cycle compresses air from ${{params.Pressure1}}$ ${{params.unitsPressure}}$ to a pressure of ${{params.Pressure2}}$ ${{params.unitsPressure}}$ producing ${{params.OldQin}}$ ${{params.unitsMass}}$ of refrigeration.</div>
    </p>
    <p> The compressor and turbine efficiencies are ${{params.E1}}$% and ${{params.E2}}$%, and the maximum and minimum temperatures are ${{params.T3}} {{params.unitsTemperature}}$ and ${{params.T1}} {{params.unitsTemperature}}$.</p>
    </pl-question-panel>
    
    <p> Find the compressor's power and the cycle COP. (Assume k = 1.4) </p>
    <pl-number-input answers-name=""Powerc"" comparison=""sigfig"" digits=""3"" label=""Power (in {{params.unitsPower}})""></pl-number-input>
    <pl-number-input answers-name=""COP"" comparison=""sigfig"" digits=""3"" label=""COP""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(150,250);
   Pressure2 = math.randomInt(1900,2100);
   T3c = math.randomInt(280,330);
   T1c = math.randomInt(-100,-75); //Negative
   T3 = T3c + 273; //convertkelvin
   T1 = T1c + 273;
   E1 = math.randomInt (80,85); //efficiency1
   E2 = math.randomInt (85,90);
   Qin = math.randomInt (5,15);
   OldQin = Qin;
   E1c = E1/100;
   E2t = E2/100;
   Qin = Qin*3.52; //converting ton to kw
   cp = 1.005

}
else {
    Pressure1 = math.randomInt(20,35);
    Pressure2 = math.randomInt(300,350);
    T3c = math.randomInt(550,600);
    T1c = math.randomInt(-150,-135); 
    T3 = T3c + 459.67; //converting F to R
    T1 = T1c + 459.67;
    E1 = math.randomInt (80,85); //efficiency1
    E2 = math.randomInt (85,90);
    E1c = E1/100;
    E2t = E2/100;
    Qin =  math.randomInt (5,15);
    OldQin = Qin;
    Qin = Qin * 3.333; //converting ton to Btu/s\
    cp = 0.241 //cp of air in btu/lb F
}
 
 T20 = T3 * ((Pressure1 / Pressure2)**((1.4-1)/1.4));
 T2 = T3 - ((1/E1c)*(T3-T20));
 Mf = (Qin) / ((cp)*(T2-T1)); //mass flow rate

 if (unitSel === 0) {
 Powerc = Mf * (cp) * (T3 - T2); // power of the compressor
 }
 else{
 Powerca = Mf * (cp) * (T3 - T2);
 Powerc = Powerca * 1.415; //converting to hp
 }
 T40 = T1 * (Pressure2 / Pressure1)**((1.4-1)/1.4);
 T4 = E2t*(T40 - T1) + T1;

 if (unitSel === 0) {
 Powert = Mf * (cp) * (T4 - T1); // power of the compressor
 COP = (Qin) / (Powerc - Powert);
} 
else{
Powerta = Mf * (cp) * (T4 - T1);
Powert = Powerta * 1.415; //converting to hp
COP = (Qin) / (Powerca - Powerta);
}
Powerc =  math.round(Powerc *10)/10;
COP = math.round(COP*1000)/1000;


data = {
    params: { 
      Powert: Powert,
      T3 : T3c,
      T1 : T1c,
      Mf : Mf,
      Pressure1 : Pressure1,
      Pressure2 : Pressure2,
      E1 : E1,
      E2 : E2,
      OldQin: OldQin,
      Qin : Qin,
      unitsTemperature : unitsTemperature,
      unitsTemperatures : unitsTemperatures,
      unitsPressure : unitsPressure,
      unitsMass : unitsMass,
      unitsPower : unitsPower,
      unitsPowers : unitsPowers,
      unitsMassFlowRate : unitsMassFlowRate,
      T2: T2,
      T20:T20,
      T4: T4,
      T40: T40,

    },
    correct_answers: {
       Powerc : Powerc,
       COP : COP,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">  The ideal compressor inlet temperature is $T_2^i$ = $T_3$*$\frac{P_2}{P_3}^\frac{k-1}{k}$ = {{params.T20}} {{params.unitsTemperatures}}. </pl-hint>
    <pl-hint level=""2"" data-type=""text"">  Since the compressor is {{params.E1}}% efficient, the actual inlet temperature $T_2$ is found as follows: $&#951_C$ = $\frac{c_p*(T_3 - T_2^i)} {c_p*(T_3 - T_2)}$  $\implies$ $T_2$ = $\frac{1}{&#951_C}$*($&#951_C$*$T_3$ - $T_3$ + $T_2^i$) = {{params.T2}}{{params.unitsTemperatures}}. </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  The heat exhanger produces {{params.OldQin}} {{params.unitsMass}} of refrigeration which equals {{params.Qin}} {{params.unitsPowers}}.
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> We can now find $\dot{m}$ using the equation: $\dot{Q_i}$ = $\dot{m}$*$c_p$*($T_2$ - $T_1$). $\dot{m}$ = {{params.Mf}} {{params.unitsMassFlowRate}}. </li>
            <li> The compressor power is then $\dot{W_c}$ = $\dot{m}$*$c_p$*($T_3$ - $T_2$) = {{correct_answers.Powerc}} {{params.unitsPower}}. </li> 
        </ul> 
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        <ul>
            <li> Ideal inlet temperature for the turbine: $T_4^i$ = $T_1$*$\frac{P_4}{P_1}^\frac{k-1}{k}$ = {{params.T40}} {{params.unitsTemperatures}}.  </li>
            <li> The actual inlet temperature for the turbine: $T_4$ = $&#951_T$*($T_4^i$ - $T_1$) + $T_1$ = {{params.T4}} {{params.unitsTemperatures}}. </li> 
            <li>  The turbine power output is then $\dot{W_T}$ =  $\dot{m}$*$c_p$*($T_4$ - $T_1$) = {{params.Powert}} {{params.unitsPower}}. </li> 
        </ul> 
    </pl-hint>

    <pl-hint level=""6"" data-type=""text"">  The cycle COP can now be calculated to be: COP = $\frac{\dot{Q_i}}{\dot{W}}$ = $\frac{\dot{Q_i}}{\dot{W_C} - \dot{W_T}}$ = {{correct_answers.COP}}. </pl-hint>

</pl-solution-panel>",,,"A simple gas cycle compresses air from 100 kPa to a pressure of 500 kPa, producing 20 kg of refrigeration. The compressor and turbine efficiencies are 80% and 85% respectively. The maximum and minimum temperatures during the cycle are 300°C and 25°C.  Calculate:  The compressor's power. The cycle's coefficient of performance (COP). (Note: Assume k = 1.4 for this problem)  Determine:  Power (in kW for example) COP",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Refrigeration cycle,Heat,Thermodynamics,"Cop,Power,Efficiency",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 100A, ME 135","Refrigeration Cycles, Thermal Efficiency in Power Cycles"
232,refrigerationCycle2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Refrigeration Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""COP"", ""Temperature"",""Isentropic""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
        In a simple gas refrigeration cycle, air enters a compressor at a pressure of ${{params.Pressure1}}$ ${{params.unitsPressure}}$ and at a temperature of ${{params.T2}}$ ${{params.unitsTemperature}}$ </div>
    </p>
    <p> The compression ratio is {{params.pr}} and the turbine inlet temperature is ${{params.T4}}$ ${{params.unitsTemperature}}$.</p>
    </pl-question-panel>
    
    <p> Find the minimum cycle temperature and the cycle COP. (Assume k = 1.4) </p>
    <pl-number-input answers-name=""T1"" comparison=""sigfig"" digits=""3"" label=""Minimum Temperature (in {{params.unitsTemperature}})""></pl-number-input>
    <pl-number-input answers-name=""COP"" comparison=""sigfig"" digits=""3"" label=""COP""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(80,120);
   T2 = math.randomInt(-15,-10);
   T4= math.randomInt(25,35);
   T2Old = T2;
   T4Old = T4;
   T2 = T2 + 273; //convertkelvin
   T4 = T4 + 273; //convertkelvin
   T2S = T2;
   T4S = T4;
   cp = 1.005
   pr = math.randomInt(5,10);
}
else {
    Pressure1 = math.randomInt(20,35);
    T2 = math.randomInt(5,15); 
    T4 = math.randomInt(77,95); 
    T2Old = T2;
    T4Old = T4;
    T2 = T2 + 459.67; //converting F to R
    T4 = T4 + 459.67; //converting F to R
    T2S = T2;
    T4S = T4;
    cp = 0.241 //cp of air in btu/lb F
    pr = math.randomInt(5,10);
}
T3 = T2 * (pr)**((1.4-1)/1.4);
T1 = T4 * (1/pr)**((1.4-1)/1.4);
T1S = T1,
Qin = cp*(T2 - T1);
Wc = cp*(T3 - T2);
Wt = cp*(T4 - T1);
COP = Qin / (Wc - Wt);

if (unitSel === 0) {
   T1 = T1 - 273; //converting K to degC
 }
 else {
   T1 = T1 - 459.67; //converting degR to degF
 }
T1 =  math.round(T1 *10)/10;
COP = math.round(COP*1000)/1000;
T2 = T2Old;
T4 = T4Old;

data = {
    params: { 
      T2:T2,
      T3:T3,
      T4:T4,
      T1S:T1S,
      T2S:T2S,
      T4S:T4S,
      Qin:Qin,
      Wc:Wc,
      Wt:Wt,
      pr:pr,
      cp:cp,
      Pressure1:Pressure1,
      unitsSpecificEnthalpy:unitsSpecificEnthalpy,
      unitsTemperature : unitsTemperature,
      unitsTemperatures : unitsTemperatures,
      unitsPressure : unitsPressure,

    },
    correct_answers: {
       T1 : T1,
       COP : COP,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">  Assuming isentropic compression and expansion processes occur, we can use the equations: $\frac{T_3}{T_2}$ =$(\frac{P_3}{P_2})^\frac{k-1}{k}$ and $\frac{T_1}{T_4}$ =$(\frac{P_1}{P_4})^\frac{k-1}{k}$.
     </pl-hint>
    <pl-hint level=""2"" data-type=""text"">  <ul>
        <li>  $T_3$ = $T_2$*$(\frac{P_3}{P_2})^\frac{k-1}{k}$ = {{params.T2S}} * $({{params.pr}})^\frac{1.4-1}{1.4}$ = {{params.T3}}${{params.unitsTemperatures}}$  </li>
        <li>  $T_1$ = $T_4$*$(\frac{P_1}{P_4})^\frac{k-1}{k}$ = {{params.T4S}} * $(\frac{1}{ {{params.pr}} })^\frac{1.4-1}{1.4}$ = ... = {{correct_answers.T1}}${{params.unitsTemperature}}$ </li> 
    </ul> 
 </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  The COP can be calculated using the formula: COP = $\frac{ Q_{in} }{ W_{comp} - W_{turb} }$
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> $Q_{in}$ = $c_p$*($T_2$ - $T_1$) = {{params.cp}}*({{params.T2S}} - {{params.T1S}}) = {{params.Qin}} ${{params.unitsSpecificEnthalpy}}$ </li>
            <li> $W_{comp}$ = $c_p$*($T_3$ - $T_2$) = {{params.cp}}*({{params.T3}} - {{params.T2S}}) = {{params.Wc}} ${{params.unitsSpecificEnthalpy}}$ </li> 
            <li> $W_{turb}$ = $c_p$*($T_4$ - $T_1$) = {{params.cp}}*({{params.T4S}} - {{params.T1S}}) = {{params.Wt}} ${{params.unitsSpecificEnthalpy}}$. </li> 
        </ul> 
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        Finally, COP = {{correct_answers.COP}}
      </pl-hint>


</pl-solution-panel>",,,"in a simple gas refrigeration cycle, air enters a compressor at a pressure of $2.5$ bar and at a temperature of $300$ k. the compression ratio is $8$ and the turbine inlet temperature is $600$ k.

find the minimum cycle temperature and the cycle cop. (assume k = 1.4)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Refrigeration cycle,Heat,Thermodynamics,"Cop,Temperature,Isentropic",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 135",Refrigeration Cycles
233,refrigerationCycle3,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Refrigeration Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""COP"", ""heat exhanger"",""Isentropic""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
       Air enters the compressor of a gas refrigeration cycle at a pressure of ${{params.Pressure1}}$ ${{params.unitsPressure}}$ and at a temperature of ${{params.T3}}$${{params.unitsTemperature}}$. </div>
    </p>
    <p> An ideal heat exhanger is added to the cycle so that the air enters the turbine at ${{params.T6}}$${{params.unitsTemperature}}$.</p>
    </pl-question-panel>
    
    <p> If the compression ratio is {{params.pr}}, find the minimum cycle temperature and the cycle COP. (Assume k = 1.4) </p>
    <pl-number-input answers-name=""T1"" comparison=""sigfig"" digits=""3"" label=""Minimum Temperature (in {{params.unitsTemperature}})""></pl-number-input>
    <pl-number-input answers-name=""COP"" comparison=""sigfig"" digits=""3"" label=""COP""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   Pressure1 = math.randomInt(80,120);
   T3 = math.randomInt(-15,-10);
   T6= math.randomInt(-45,-35);
   T3Old = T3;
   T6Old = T6;
   T3 = T3 + 273; //convertkelvin
   T6 = T6 + 273; //convertkelvin
   T2 = T6;
   T5 = T3;
   T3S = T3;
   T6S = T6;
   cp = 1.005
   pr = math.randomInt(8,12);
}
else {
    Pressure1 = math.randomInt(20,35);
    T3 = math.randomInt(5,15); 
    T6 = math.randomInt(-40,-35); 
    T3Old = T3;
    T6Old = T6;
    T3 = T3 + 459.67; //converting F to R
    T6 = T6 + 459.67; //converting F to R
    T2 = T6;
    T5 = T3;
    T3S = T3;
    T6S = T6;
    cp = 0.241 //cp of air in btu/lb F
    pr = math.randomInt(5,10);
}
T4 = T3 * (pr)**((1.4-1)/1.4);
T1 = T6 * (1/pr)**((1.4-1)/1.4);
T1S = T1,
Qin = cp*(T2 - T1);
Wc = cp*(T4 - T3);
Wt = cp*(T6 - T1);
COP = Qin / (Wc - Wt);

if (unitSel === 0) {
   T1 = T1 - 273; //converting K to degC
 }
 else {
   T1 = T1 - 459.67; //converting degR to degF
 }
T1 =  math.round(T1 *10)/10;
COP = math.round(COP*1000)/1000;
T3 = T3Old;
T6 = T6Old;

data = {
    params: { 
      T2:T2,
      T3:T3,
      T4:T4,
      T1S:T1S,
      T6:T6,
      T3S:T3S,
      T6S:T6S,
      Qin:Qin,
      Wc:Wc,
      Wt:Wt,
      pr:pr,
      cp:cp,
      Pressure1:Pressure1,
      unitsSpecificEnthalpy:unitsSpecificEnthalpy,
      unitsTemperature : unitsTemperature,
      unitsTemperatures : unitsTemperatures,
      unitsPressure : unitsPressure,

    },
    correct_answers: {
       T1 : T1,
       COP : COP,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">  Assuming isentropic compression and expansion processes occur, we can use the equations: $\frac{T_4}{T_3}$ =$(\frac{P_4}{P_3})^\frac{k-1}{k}$ and $\frac{T_1}{T_6}$ =$(\frac{P_1}{P_6})^\frac{k-1}{k}$.
     </pl-hint>
    <pl-hint level=""2"" data-type=""text"">  <ul>
        <li>  For an ideal heat exhanger we would have $T_5$ = $T_3$ = {{params.T3S}}{{params.unitsTemperatures}} and $T_6$ = $T_2$ = {{params.T6S}}{{params.unitsTemperatures}}. </li>
        <li>  $T_4$ = $T_3$*$(\frac{P_4}{P_3})^\frac{k-1}{k}$ = {{params.T3S}} * $({{params.pr}})^\frac{1.4-1}{1.4}$ = {{params.T4}}${{params.unitsTemperatures}}$  </li>
        <li>  $T_1$ = $T_6$*$(\frac{P_1}{P_6})^\frac{k-1}{k}$ = {{params.T6S}} * $(\frac{1}{ {{params.pr}} })^\frac{1.4-1}{1.4}$ = ... = {{correct_answers.T1}}${{params.unitsTemperature}}$ </li> 
    </ul> 
 </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  The COP can be calculated using the formula: COP = $\frac{ Q_{in} }{ W_{comp} - W_{turb} }$
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> $Q_{in}$ = $c_p$*($T_2$ - $T_1$) = {{params.cp}}*({{params.T2}} - {{params.T1S}}) = {{params.Qin}} ${{params.unitsSpecificEnthalpy}}$ </li>
            <li> $W_{comp}$ = $c_p$*($T_4$ - $T_3$) = {{params.cp}}*({{params.T4}} - {{params.T3S}}) = {{params.Wc}} ${{params.unitsSpecificEnthalpy}}$ </li> 
            <li> $W_{turb}$ = $c_p$*($T_6$ - $T_1$) = {{params.cp}}*({{params.T6S}} - {{params.T1S}}) = {{params.Wt}} ${{params.unitsSpecificEnthalpy}}$. </li> 
        </ul> 
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        Finally, COP = {{correct_answers.COP}}
      </pl-hint>


</pl-solution-panel>",,,"Air enters the compressor of a gas refrigeration cycle at a pressure of 100 kPa and at a temperature of 25°C. An ideal heat exchanger is added to the cycle, causing the air to enter the turbine at 150°C.  Given a compression ratio of 10,  Calculate:  The minimum temperature in the cycle. The cycle's coefficient of performance (COP). (Note: Assume k = 1.4 for this problem)  Determine:  Minimum Temperature (in °C for example) COP",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Refrigeration cycle,Heat,Thermodynamics,"Cop,Heat exhanger,Isentropic",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 135","Refrigeration Cycles, Ideal Gas Behavior"
234,reversibleCycle1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Reversible Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""Heat Transfer"", ""Reversibility"",""efficiency""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> A reversible power cycle receives {{params.Qh}} ${{params.unitsEnergy}}$ by heat transfer from a hot reservoir that's at {{params.T1}} ${{params.unitsTemperature}}$.
     </p>
    <p> The power cycle rejects energy by heat transfer to a cold reservoir at temperature $T_c$, and has a thermal efficiency of {{params.Efficiency}} %.</p>
   </pl-question-panel>
    
    <p> Determine the energy rejected and $T_c$. </p>
    <pl-number-input answers-name=""Qc"" comparison=""sigfig"" digits=""3"" label=""Qc (in {{params.unitsEnergy}})""></pl-number-input>
    <pl-number-input answers-name=""Tc"" comparison=""sigfig"" digits=""3"" label=""$T_c$ (in {{params.unitsTemperature}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   Qh = math.randomInt(40,60);
   T1 = math.randomInt(500,700);
   Efficiency = math.randomInt(35,45);
   Efficiency1 = Efficiency/100;

}
else {
    Qh = math.randomInt(40,60);
    T1 = math.randomInt(500,700);
    Efficiency = math.randomInt(35,45);
    Efficiency1 = Efficiency/100;
}
 
Qc = (1 - Efficiency1)*(Qh);
Tc = (1 - Efficiency1)*(T1);

Qc=(math.round(Qc*10))/10;
Tc=(math.round(Tc*10))/10;
data = {
    params: { 
      Qh : Qh,
      T1 : T1,
      Efficiency : Efficiency,
      unitsTemperature : unitsTemperature,
      unitsEnergy : unitsEnergy,

    },
    correct_answers: {
        Qc : Qc,
        Tc : Tc,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> The thermal efficiency is given and can be expressed as: $&#951$ = $\frac{W}{Q_H}$ = $\frac{Q_H - Q_C}{Q_H}$ = 1 - $\frac{Q_C}{Q_H}$. </pl-hint>
    <pl-hint level=""2"" data-type=""text"">  Since the cycle is reversible, the thermal efficiency can aslo be expressed as: $&#951$ = 1 - $\frac{T_C}{T_H}$.</pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> The energy rejected: $Q_C$ = (1 - $&#951$)*($Q_H$) = {{correct_answers.Qc}} ${{params.unitsEnergy}}$</li>
            <li> Since cycle is reversible: $T_C$ = (1 - $&#951$)*($T_H$) = {{correct_answers.Tc}} ${{params.unitsTemperature}}$. </li> 
        </ul> 
    </pl-hint>

</pl-solution-panel>",,,"a reversible power cycle receives 5000 j by heat transfer from a hot reservoir that's at 400 k.

the power cycle rejects energy by heat transfer to a cold reservoir at temperature $t_c$, and has a thermal efficiency of 40%.

determine the energy rejected and $t_c$.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Reversible cycle,Heat,Thermodynamics,"Heat transfer,Reversibility,Efficiency",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B","Thermal Efficiency in Power Cycles, Refrigeration Cycles"
235,reversibleCycle2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Reversible Cycle"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""2 cycles"", ""Reversibility"",""efficiency""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> Two reversible power cycles are in series aand each produce the same net work. </p>
    <p> The first cycle accepts energy <b>$Q_H$</b> from a hot reservoir that is at {{params.T1}} ${{params.unitsTemperature}}$ and reject energy <b>Q</b> to a reservoir at an intermediate temperature <b>T</b> by heat transfer.</p>
    <p> The second cycle revceives energy <b>Q</b> from the reservior at <b>T</b> and rejects energy <b>$Q_C$</b> to a reservoir at {{params.T2}} ${{params.unitsTemperature}}$ via heat transfer. </p>
   </pl-question-panel>
    
    <p> Determine the intermediate temperature and the thermal efficiencies. </p>
    <pl-number-input answers-name=""T"" comparison=""sigfig"" digits=""3"" label=""T (in {{params.unitsTemperature}})""></pl-number-input>
    <pl-number-input answers-name=""Efficiency1"" comparison=""sigfig"" digits=""3"" label="" $&#951_1$ (in %)""></pl-number-input>
    <pl-number-input answers-name=""Efficiency2"" comparison=""sigfig"" digits=""3"" label="" $&#951_2$  (in %)""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
   T1 = math.randomInt(1000,1200);
   T2 = math.randomInt(400,500);
}
else {
    T1 = math.randomInt(1000,1200);
    T2 = math.randomInt(400,500);
}
 
T = (T1 + T2) / 2;
Efficiency1 = 1 - (T/T1);
Efficiency2 = 1 - (T2/T);

T=(math.round(T*10))/10;
Efficiency1 = math.round(Efficiency1*1000)/10
Efficiency2 = math.round(Efficiency2*1000)/10
data = {
    params: { 
      T1 : T1,
      T2 : T2,
      unitsTemperature : unitsTemperature,

    },
    correct_answers: {
        T : T,
       Efficiency1 : Efficiency1,
      Efficiency2 : Efficiency2,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">  Write the energy balance. </pl-hint>
    <pl-hint level=""2"" data-type=""text"">  Since $W_c$ is the net work developed by each cycle, $W_c$ = $Q_H$ - $Q$ = $Q$ - $Q_C$. </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  Since the two cycles are reversible, $\frac{Q}{Q_H}$ = $\frac{T}{T_H}$ and $\frac{Q_C}{Q}$ = $\frac{T_C}{T}$.
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> Substituting in for $Q_H$ and $Q_C$: $Q$ = $\frac{\frac{T_H}{T}*Q + \frac{T_C}{T}*Q}{2}$.  </li>
            <li> Now we can solve for the intermediate temperature: T = $\frac{T_H + T_C}{2}$ = {{correct_answers.T}} ${{params.unitsTemperature}}$. </li> 
        </ul> 
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        <ul>
            <li> For a single reversible cycle operating between $T_H$ and $T_C$, the thermal efficiency is: $&#951$ = 1 - $\frac{T_C}{T_H}$. </li>
            <li> For the first cycle, the intermediate temperature becomes the new cold temperature. So, the thermal efficiency for this cycle is:  $&#951_1$ = 1 - $\frac{T}{T_H}$ = {{correct_answers.Efficiency1}}% </li> 
            <li> For the second cycle, the intermediate temperature becomes the new hot temperature. So, the thermal efficiency for this cycle is:  $&#951_2$ = 1 - $\frac{T_C}{T}$ = {{correct_answers.Efficiency2}}% </li> 
        </ul> 
    </pl-hint>


</pl-solution-panel>",,,"two reversible power cycles are in series aand each produce the same net work. 
 the first cycle accepts energy $q_h$ from a hot reservoir that is at 500 k and reject energy q to a reservoir at an intermediate temperature t by heat transfer.
 the second cycle revceives energy q from the reservior at t and rejects energy $q_c$ to a reservoir at 300 k via heat transfer. 

 determine the intermediate temperature and the thermal efficiencies.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Reversible cycle,Heat,Thermodynamics,"2 cycles,Reversibility,Efficiency",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100B, ME 100A, ME 243","Thermal Efficiency in Power Cycles, Heat Transfer"
236,turbine1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Turbine"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""power"", ""mass flow rate"",""ethalpy""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> At steady state, steam enters a well-insulated turbine operating at {{params.Pressure1}} ${{params.unitsPressure}}$ with a velocity of {{params.Vel1}} ${{params.unitsSpeed}}$ and a specific enthalphy of {{params.SE1}} ${{params.unitsSpecificEnthalpy}}$.
     </p>
    <p> The steam expands to the exit of the turbine where the pressure is {{params.Pressure2}} ${{params.unitsPressure}}$, velocity is {{params.Vel2}} ${{params.unitsSpeed}}$ and the specific enthalphy is {{params.SE2}} ${{params.unitsSpecificEnthalpy}}$.</p>
    <p> The mass flow rate is {{params.Mf}} ${{params.unitsMassFlowRate}}$ and neglect potential energy. </p>
   </pl-question-panel>
    
    <p> Calculate the power developed by the turbine. </p>
    <pl-number-input answers-name=""Power"" comparison=""sigfig"" digits=""3"" label=""Power (in {{params.unitsPower}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": "" &degC"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
    Pressure1 = math.randomInt(200,300);
    Pressure2 = math.randomInt(50,150);
    Vel1 = 10 //math.randomInt(5,15);
    Vel2 = Vel1 * 9;
    SE1 = math.randomInt(3000,3200);
    SE2 = math.randomInt(2400,2600);
    Mf = (math.randomInt(150,300))/20;

}
else {
    Pressure1 = math.randomInt(200,300);
    Pressure2 = math.randomInt(50,150);
    Vel1 = math.randomInt(10,20); // velecotiy 1
    Vel2 = Vel1 * 9;
    SE1 = math.randomInt(1500,1800); // specific enthalpy 1
    SE2 = math.randomInt(1000,1200);
    Mf = (math.randomInt(150,300))/20; // mass flow rate 
}
 
Power =((Mf)*((SE1 - SE2) + (((Vel1**2 - Vel2**2)/2)/10**3)));
if (unitSel === 1) {
 Power = Power * 1.41485 //converting to HP
}
Power=(math.round(Power*10))/10;
data = {
    params: { 
        Pressure1: Pressure1,
        Pressure2: Pressure2,
        Vel1: Vel1,
        Vel2: Vel2,
        SE1: SE1,
        SE2: SE2,
        Mf: Mf, 
        unitsMassFlowRate: unitsMassFlowRate,
        unitsPressure: unitsPressure,
        unitsSpeed: unitsSpeed,
        unitsPower: unitsPower,
        unitsSpecificEnthalpy: unitsSpecificEnthalpy,
    
    },
    correct_answers: {
        Power : Power
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Write the energy rate balance for this problem. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> For the control volume at steady state, the energy rate balance can be written as: 0 = $\dot{Q}$ - $\dot{W}$ + $\dot{m}$*($h_1$ - $h_2$ + $\frac{V_1^2 - V_2^2}{2}$ + g*($z_1$ - $z_2$)). </pl-hint>
    <pl-hint level=""3"" data-type=""text""> To find power, the energy rate balance can be reduced to : $\dot{W}$ =  $\dot{m}$*($h_1$ - $h_2$ + $\frac{V_1^2 - V_2^2}{2}$)
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Plugging in all the given values and making any necessary conversions should give:  $\dot{W}$ = {{correct_answers.Power}} ${{params.unitsPower}}$
    </pl-hint>

</pl-solution-panel>",,,"at steady state, steam enters a well-insulated turbine operating at 5 bar with a velocity of 50 m/s and a specific enthalpy of 3000 kj/kg.

the steam expands to the exit of the turbine where the pressure is 1 bar, velocity is 150 m/s, and the specific enthalpy is 2500 kj/kg.
the mass flow rate is 10 kg/s and neglect potential energy.

calculate the power developed by the turbine.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Turbine,Heat,Thermodynamics,"Power,Mass flow rate,Ethalpy",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 100A, ME 100B, ME 135","Enthalpy, Energy Balance"
237,turbine2,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Turbine"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""power"", ""ideal gas"",""area""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p> Through a turbine, air expands from a pressure of {{params.Pressure1}} ${{params.unitsPressure}}$ and a temperature of {{params.T1}} ${{params.unitsTemperature}}$ to  {{params.Pressure2}} ${{params.unitsPressure}}$ and {{params.T2}} ${{params.unitsTemperature}}$. The exit 
     </p>
    <p> velocity, which is {{params.Vel2}} ${{params.unitsSpeed}}$, is much faster than the entrance velocity. The turbine generates {{params.Power}} ${{params.unitsPower}}$ while it is operating </p>
    <p> in steady state. Heat transfer between the turbine and its surroundings and any potential energy effects are negligible.</p>
   </pl-question-panel>
    
    <p> Calculate the air's mass flow rate and exit area using an ideal gas model of air. </p>
    <pl-number-input answers-name=""Mf"" comparison=""sigfig"" digits=""3"" label=""Mass (in {{params.unitsMassFlowRate}})""></pl-number-input>
    <pl-number-input answers-name=""A2"" comparison=""sigfig"" digits=""3"" label=""Area (in {{params.unitsArea}})""></pl-number-input>","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""kg"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""kN"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""bar"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": "" &degK"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
            ""area"" : ""m^2"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""lb"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lb"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""ft-lb"",
            ""temperature"": ""&degF"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
            ""area"" : ""ft^2""
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;
    unitsArea = units[unitSystems[unitSel]].area;

    
    




if (unitSel === 0) {
    Pressure1 = math.randomInt(5,10);
    Pressure2 = math.randomInt(1,4);
    Vel2 = math.randomInt(80,110);
    cp = 1.005;
    Power = math.randomInt(2000,3000);
    T1 = math.randomInt(600,700);
    T2 = math.randomInt(200,300);
    R = 287;
    OldT2 = T2;
    OldPressure2 = Pressure2;
    OldPower = Power;

}
else {
    Pressure1 = math.randomInt(200,300);
    Pressure2 = math.randomInt(50,150);
    Vel2 = math.randomInt(80,110);
    cp = 0.24028;
    Power = math.randomInt(2000,3000);
    T1 = math.randomInt(600,700);
    T2 = math.randomInt(200,300);
    R = 53.34;
    OldT2 = T2 //keeping T2 fahrenheit
    OldPressure2 = Pressure2
    OldPower = Power;
}

if (unitSel === 0) {
     Replace = (Vel2**2 / 2) / 10**3; //converting to kJ/kg
     Pressure2 = Pressure2 * (10**5) ;//converting to Pa
    
   }
   else{
    Replace = (Vel2**2 / 2) /  (778.2 * 32.2) // converting to BTU/lb
    T2 = T2 + 459.67 // converting to Rankine scale
    Pressure2 = Pressure2 * 144 //converting to lb/ft^2
    Power = Power * 0.707 //converting hp to BTU/s
   }
Mf = (Power) / ((cp*(T1-OldT2)) - Replace); // Finding Mass Flow Rate
A2 =(Mf * R * T2 ) / (Vel2 * Pressure2) //finding exit Area

Mf=(math.round(Mf*100))/100;
A2=(math.round(A2*1000))/1000;
T2 = OldT2;
Pressure2 = OldPressure2;
Power = OldPower;
data = {
    params: { 
        Pressure1: Pressure1,
        Pressure2: Pressure2,
        Vel2: Vel2,
        T1:T1,
        T2 :T2,
        Power : Power,
        unitsMassFlowRate: unitsMassFlowRate,
        unitsPressure: unitsPressure,
        unitsSpeed: unitsSpeed,
        unitsPower: unitsPower,
        unitsTemperature : unitsTemperature,
        unitsArea : unitsArea,
    
    },
    correct_answers: {
        Mf : Mf,
        A2 : A2,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Write the energy rate balance for this problem. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> At steady state, the energy rate balance can be written as: 0 = $\dot{Q}$ - $\dot{W}$ + $\dot{m}$*($h_1$ - $h_2$ + $\frac{V_1^2 - V_2^2}{2}$ + g*($z_1$ - $z_2$)). </pl-hint>
    <pl-hint level=""3"" data-type=""text""> 
        <ul>
            <li> Neglecting heat transfer and potential energy effects, and setting $V_1$ = 0, the energy rate balance can be reduced to: 0 =  - $\dot{W}$ + $\dot{m}$*($h_1$ - $h_2$ + $\frac{- V_2^2}{2}$).</li>
            <li> To find the mass flow rate ($\dot{m}$), the energy rate balance can be rearranged: $\dot{m}$ = $\frac{\dot{W}}{h_1 - h_2 + \frac{- V_2^2}{2}}$ =  $\frac{\dot{W}}{c_p*(T_1 - T_2) + \frac{- V_2^2}{2}}$  </li>
        </ul>
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> 
        <ul>
            <li> The mass flow rate can be expressed as: $\dot{m}$ = $\frac{A_2*V_2}{v_2}$ (where $v_2$ is the specific volume).</li>
            <li> For the ideal gas equation, P*$v$ = R*T, the specific volume can be expressed as $v$ = $\frac{R*T}{P}$ (where R is the gas constant).</li>
            <li> The mass flow rate can now be written as: $\dot{m}$ = $\frac{A_2*V_2*P_2}{R*T_2}$.  </li>
        </ul>
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        <ul>
            <li> Solving for the mass flow rate should give: $\dot{m}$ = {{correct_answers.Mf}} ${{params.unitsMassFlowRate}}$.</li>
            <li> Solving for exit area, $A_2$ = $\frac{\dot{m}*R*T_2}{V_2*P_2}$ = {{correct_answers.A2}} ${{params.unitsArea}}$.</li>
        </ul>
    </pl-hint>

</pl-solution-panel>",,,"through a turbine, air expands from a pressure of 1.5 mpa and a temperature of 300 k to 0.5 mpa and 200 k. the exit velocity, which is 500 m/s, is much faster than the entrance velocity. the turbine generates 1000 kw while it is operating in steady state. heat transfer between the turbine and its surroundings and any potential energy effects are negligible.

calculate the air's mass flow rate and exit area using an ideal gas model of air.",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Turbine,Heat,Thermodynamics,"Power,Ideal gas,Area",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,"ME 135, ME 100A, ME 100B, ME 117","Mass Flow Rate, Ideal Gas Behavior, Gas Turbine Cycles"
238,turbojetEngine1,"{
    ""uuid"": ""8abcd91d6-64d1-4e89-b72d-ad2133f25b2f"",
    ""title"": ""Turbojet Engine"",
    ""stem"":""Heat"",
    ""topic"": ""Thermodynamics"",
    ""tags"": [""velocity"", ""thrust"",""pressure""],
    ""prereqs"":"""",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""epere176@ucr.edu"",
    ""qType"":""num"",
    ""nSteps"": 1,
    ""updatedBy"":"""", 
    ""difficulty"": 1,
	""codelang"": ""javascript""
}","<pl-question-panel>
    <p>
        Air at ${{params.Pressure1}}$ ${{params.unitsPressure}}$ and ${{params.T1}}$${{params.unitsTemperature}}$ enters a turbojet engine with an inlet velocity of {{params.Vel1}} {{params.unitsSpeed}}.</div>
    </p>
    <p> The compressor discharge pressure is ${{params.Pressure2}}$ ${{params.unitsPressure}}$ and the turbine inlet temperature is ${{params.T3}} {{params.unitsTemperature}}$. </p>
    <p> The air mass flow rate is {{params.MF}} {{params.unitsMassFlowRate}} and kinetic energy is negligible except at the inlet and exit of the engine.</p>
    </pl-question-panel>
    
    <p> Determine the exit velocity and the thrust developed by the engine.</p>
    <pl-number-input answers-name=""Vel5"" comparison=""sigfig"" digits=""3"" label=""Exit Velocity (in {{params.unitsSpeed}})""></pl-number-input>
    <pl-number-input answers-name=""Thrust"" comparison=""sigfig"" digits=""3"" label=""Thrust (in {{params.unitsForce}})""></pl-number-input>
    ","//const { data } = require('cheerio/lib/api/attributes.js');
const math = require('mathjs');
const mathhelper = require('../../mathhelper.js');
//const props = require('./properties.js');
//const mathhelper = require('../../helpers/mathhelper.js');

const generate = () => {

    unitSystems = ['si', ""uscs""];
    masslabels = [""mass"", ""weight""];
    
    units = { 
        ""si"": { 
            ""masslabel"": ""mass"",
            ""mass"": ""tons"",
            ""speed"": ""m/s"",
            ""dim"": ""cm"",
            ""dist"": ""m"",
            ""volume"":""m^3"",
            ""force"": ""N"",
            ""angle"": ""degrees"",
            ""work"": ""J"",
            ""pressure"": ""kPa"",
            ""springConst"": ""N/cm"",
            ""springLength"": ""cm"",
            ""modulusElasticity"": ""GPa"",
            ""stress"": ""MPa"",
            ""dLength"": ""mm"",
            ""dDiameter"": ""\\(  \\mu m \\) "",
            ""diameter"" : ""mm"",
            ""energy"": ""kJ"",
            ""temperature"": ""&degC"",
            ""temperatures"": ""K"",
            ""heat"": ""kJ"",
            ""Cp"": ""kJ/kg C"",
            ""power"": ""kW"",
            ""powers"":""kW"",
            ""heatingvalue"": ""MJ/kg"",
            ""massFlowRate"": ""kg/s"",
            ""specificEnthalpy"":""kJ/kg"",
        },
        ""uscs"": {
            ""masslabel"": ""weight"",
            ""mass"": ""tons"",
            ""speed"": ""ft/s"",
            ""dim"": ""in"",
            ""dist"": ""ft"",
            ""volume"": ""ft^3"",
            ""force"": ""lbf"",
            ""angle"": ""degrees"",
            ""work"": ""ft-lb"",
            ""pressure"": ""psi"",
            ""springConst"": ""lb/in"",
            ""springLength"": ""in"",
            ""modulusElasticity"": ""Mpsi"",
            ""stress"": ""Kpsi"",
            ""dLength"": ""inch"",
            ""dDiameter"": ""\\(\mu inch\\) "",
            ""diameter"" : ""inch"",
            ""energy"": ""BTU"",
            ""temperature"": ""&degF"",
            ""temperatures"": ""&degR"",
            ""heat"": ""BTU"",
            ""Cp"": ""BTU/ lb F"",
            ""power"": ""hp"",
            ""powers"":""BTU/s"",
            ""heatingvalue"": ""BTU/lb"",
            ""massFlowRate"": ""lb/s"",
            ""specificEnthalpy"":""BTU/lb"",
    
        }
    }
    
    unitSel = math.randomInt(0,2); //SI
    unitsDist = units[unitSystems[unitSel]].dist;
    unitsSpeed = units[unitSystems[unitSel]].speed;
    unitsMass = units[unitSystems[unitSel]].mass;
    unitsForce = units[unitSystems[unitSel]].force;
    unitsAngle = units[unitSystems[unitSel]].angle;
    unitsWork = units[unitSystems[unitSel]].work;
    masslabel = units[unitSystems[unitSel]].masslabel;
    unitsSpringConst = units[unitSystems[unitSel]].springConst;
    unitsSpringLength = units[unitSystems[unitSel]].springLength;
    unitsModulusElasticity = units[unitSystems[unitSel]].modulusElasticity;
    unitsStress = units[unitSystems[unitSel]].stress;
    unitsDLength = units[unitSystems[unitSel]].dLength;
    unitsDiameter = units[unitSystems[unitSel]].diameter;
    unitsVolume = units[unitSystems[unitSel]].volume;
    unitsPressure = units[unitSystems[unitSel]].pressure;
    unitsDDiameter = units[unitSystems[unitSel]].dDiameter;
    unitsTemperature = units[unitSystems[unitSel]].temperature;
    unitsTemperatures = units[unitSystems[unitSel]].temperatures;
    unitsCp = units[unitSystems[unitSel]].Cp;
    unitsHeat = units[unitSystems[unitSel]].heat;
    unitsPower = units[unitSystems[unitSel]].power;
    unitsPowers = units[unitSystems[unitSel]].powers;
    unitsEnergy = units[unitSystems[unitSel]].energy;
    unitsMassFlowRate = units[unitSystems[unitSel]].massFlowRate;
    unitsSpecificEnthalpy = units[unitSystems[unitSel]].specificEnthalpy;

    
    




if (unitSel === 0) {
    Pressure1 = math.randomInt(30,40);
    Pressure2 = math.randomInt(330,350);
    Pressure5 = Pressure1;
    Pressure3 = Pressure2;
    MF = math.randomInt(40,50);
    Vel1 = math.randomInt(175,190);
    T1 = math.randomInt(-50,-40); 
    T3 = math.randomInt(1000,1100); 
    T1Old = T1;
    T3Old = T3
   T1 = T1 + 273; //convertkelvin
   T3 = T3 + 273; //convertkelvin
   T1S = T1;
   T3S = T3;
   cp = 1.005
}
else {
    Pressure1 = math.randomInt(3,7);
    Pressure2 = math.randomInt(45,55);
    Pressure5 = Pressure1;
    Pressure3 = Pressure2;
    MF = math.randomInt(90,110);
    Vel1 = math.randomInt(590,610);
    T1 = math.randomInt(-55,-45); 
    T3 = math.randomInt(1900,2100); 
    T1Old = T1;
    T3Old = T3;
    T1 =T1 + 459.67; //converting F to R
    T3 = T3 + 459.67; //converting F to R
    T1S = T1;
    T3S = T3;
    cp = 0.240 //cp of air in btu/lb F
}
T2 = T1 * (Pressure2 / Pressure1)**((1.4-1)/1.4);
T4 = T3 - (T2 - T1);
Pressure4 = Pressure3 * (T4 / T3)**(1.4/(1.4-1));
T5 = T4 * (Pressure5 / Pressure4)**((1.4-1)/1.4);
if (unitSel==0){
    Vel5 = (2*cp*(1000)*(T4 - T5))**(1/2);
    Thrust = MF *(Vel5 - Vel1);
}
else{
    Vel5 = (2*cp*(778)*(32.2)*(T4 - T5))**(1/2); // used 778ftlb/btu and 32.2lbm-ft/lb-sec^2
    Thrust = (MF/32.2)*(Vel5 - Vel1);

}
Vel5 =  math.round(Vel5 *10)/10;
Thrust = math.round(Thrust*10)/10;
T1 = T1Old;
T3 = T3Old;

data = {
    params: { 
      T1:T1,
      T3:T3,
      cp:cp,
      Pressure1:Pressure1,
      Pressure2:Pressure2,
      Pressure4:Pressure4,
      T5:T5,
      T2:T2,
      T4:T4,
      MF:MF,
      Vel1:Vel1,
      unitsTemperature : unitsTemperature,
      unitsTemperatures: unitsTemperatures,
      unitsMassFlowRate:unitsMassFlowRate,
      unitsSpeed:unitsSpeed,
      unitsPressure : unitsPressure,
      unitsForce : unitsForce,

    },
    correct_answers: {
       Thrust : Thrust,
       Vel5 : Vel5,
    },
    nDigits: 2,
    sigfigs: 2
}

console.log(data);
return data;
}

generate();

module.exports = {
    generate
}","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> 
        <ul> 
            <li> The energy equation can be applied across the nozzle as: $(\frac{V_4}{2})^2$ + $h_4$ = $(\frac{V_5}{2})^2$ + $h_5$. </li>
            <li> This equation can then be reduced to find the exit velocity: $V_5$ = $[2*c_p*(T_4 - T_5)]^{1/2}$ </li>
        </ul>   
     </pl-hint>
    <pl-hint level=""2"" data-type=""text""> 
        <ul>
            <li> To solve the energy equation, we must find $T_4$ and $T_5$. Lets start with $T_4$. </li>
            <li> Since the work from the turbine is the same as the work required by the compressor: $h_2$ - $h_1$ = $h_3$ - $h_4$ $\implies$ $T_2$ - $T_1$ = $T_3$ - $T_4$. </li> 
            <li> Assuming isentropic compression and expansion: $T_2$ = $T_1$*$(\frac{P_2}{P_1})^\frac{k-1}{k}$ = {{params.T2}}{{params.unitsTemperatures}}. </li>
            <li> $T_4$ = $T_3$ - ($T_2$ - $T_1$) = {{params.T4}}{{params.unitsTemperatures}}. </li>
        </ul>
     </pl-hint>
    <pl-hint level=""3"" data-type=""text"">  
        <ul>
            <li>  Assuming an isentropic process, $T_5$ at the nozzle exit (where $P_5$ = {{params.Pressure1}} {{params.unitsPressure}}) is: $T_5$ = $T_4$*$(\frac{P_5}{P_4})^\frac{k-1}{k}$  </li>
            <li>  The isentropic expansion through the turbine shows: $P_4$ = $P_3$*$(\frac{T_4}{T_3})^\frac{k}{k-1}$ = {{params.Pressure4}} {{params.unitsPressure}} </li> 
            <li>  Now, $T_5$ = {{params.T5}}{{params.unitsTemperatures}}.</li>
        </ul> 
    </pl-hint>
    <pl-hint level=""4"" data-type=""text""> After doing necessary conversions, the exit velocity is: $V_5$ = $[2*c_p*(T_4 - T_5)]^{1/2}$ = {{correct_answers.Vel5}} {{params.unitsSpeed}}.
    </pl-hint>
    <pl-hint level=""5"" data-type=""text""> 
        After doing necessary conversions, the thrust is: thrust = $\dot{m}$*($V_5$ - $V_1$) = {{correct_answers.Thrust}}{{params.unitsForce}}.
      </pl-hint>


</pl-solution-panel>",,,"Air enters a turbojet engine at a pressure of 100 kPa and a temperature of 25°C with an inlet velocity of 250 m/s. The compressor discharges the air at a pressure of 500 kPa, and the temperature at the turbine inlet is 600°C. The mass flow rate of the air is 20 kg/s, and kinetic energy is negligible except at the engine's inlet and exit.  Calculate:  The exit velocity of the air. The thrust developed by the engine. Determine:  Exit Velocity (in m/s for example) Thrust (in N for example)",8abcd91d6-64d1-4e89-b72d-ad2133f25b2f,Turbojet engine,Heat,Thermodynamics,"Velocity,Thrust,Pressure",,True,epere176@ucr.edu,Num,1,,1.0,Javascript,,,,ME 135,Gas Turbine Cycles
239,P_1.10_Distance-Time Graphs,"{
    ""uuid"": ""d7f7a3e6-8b3d-4e3d-9c3a-6f7d8e9a2b1c"",
    ""title"": ""Distance-Time Graphs"",
    ""stem"": ""On a distance-time graph, a horizontal straight line indicates"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""distance-time graph"",
        ""physics"",
        ""motion""
    ],
    ""prereqs"": [
        ""Understanding of distance and time measurements""
    ],
    ""isAdaptive"": ""false"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""none""
}","<pl-question-panel> 
  <p>
    On a distance-time graph, a horizontal straight line indicates:
  </p>
</pl-question-panel>

<pl-multiple-choice answers-name=""distanceTimeGraph"" weight=""1"" inline=""true"">
  <pl-answer correct=""false""> constant speed </pl-answer>
  <pl-answer correct=""true""> zero speed </pl-answer>
  <pl-answer correct=""false""> increasing speed </pl-answer>
  <pl-answer correct=""false""> decreasing speed </pl-answer>
</pl-multiple-choice>",,,,,"On a distance-time graph, a horizontal straight line indicates:
Options: 
- constant speed
- zero speed
- increasing speed
- decreasing speed",D7f7a3e6-8b3d-4e3d-9c3a-6f7d8e9a2b1c,Distance-time graphs,"On a distance-time graph, a horizontal straight line indicates",Physics,"Distance-time graph,Physics,Motion",Understanding of distance and time measurements,False,lberm007@ucr.edu,Num,1,,,,,,1.0,,Kinematics
240,P_1.11_Interpreting Distance-Time Graphs,"{
    ""uuid"": ""f47ac10b-58cc-4372-a567-0e02b2c3d479"",
    ""title"": ""Interpreting Distance-Time Graphs"",
    ""stem"": ""On a distance-time graph, a downward sloping line indicates"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""distance-time graph"",
        ""motion"",
        ""physics""
    ],
    ""prereqs"": ""Understanding of distance, time, and basic graph interpretation"",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""none""
}","<pl-question-panel> 
  <p>
    On a distance-time graph, a downward sloping line indicates: 
  </p>
    
  </pl-question-panel>
    
  <pl-multiple-choice answers-name=""distanceTimeGraph"" weight=""1"" inline=""true"">
    <pl-answer correct=""false"">a particle moving at decreasing velocity in the positive direction </pl-answer>
    <pl-answer correct=""false""> a particle moving in free fall under gravity </pl-answer>
    <pl-answer correct=""false""> a particle moving at a constant velocity in the positive direction</pl-answer>
    <pl-answer correct=""false""> a particle moving at decreasing velocity in the negative direction</pl-answer>
    <pl-answer correct=""true""> a particle moving at a constant velocity in the negative direction </pl-answer>
    
  </pl-multiple-choice>",,,,,"On a distance-time graph, a downward sloping line indicates:
Options:
- a particle moving at decreasing velocity in the positive direction
- a particle moving in free fall under gravity
- a particle moving at a constant velocity in the positive direction
- a particle moving at decreasing velocity in the negative direction
- a particle moving at a constant velocity in the negative direction",F47ac10b-58cc-4372-a567-0e02b2c3d479,Interpreting distance-time graphs,"On a distance-time graph, a downward sloping line indicates",Physics,"Distance-time graph,Motion,Physics","Understanding of distance, time, and basic graph interpretation",False,lberm007@ucr.edu,Num,1,,,,,,1.0,,Kinematics
241,P_1.12_Velocity-Time Graph,"{
    ""uuid"": ""d7f7a3e6-8b3d-4e3b-9c3a-6f3d7a8b3d4e"",
    ""title"": ""Velocity-Time Graph"",
    ""stem"": ""On a velocity-time graph, a downward sloping line indicates"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""velocity-time graph"",
        ""physics"",
        ""kinematics""
    ],
    ""prereqs"": ""Understanding of velocity-time graphs and kinematics"",
    ""isAdaptive"": ""false"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""none""
}","<pl-question-panel> 
  On a velocity-time graph, a downward sloping line indicates:
</pl-question-panel>
<pl-checkbox answers-name=""velocityTime"" weight=""1"" inline=""true"">
  <pl-answer correct=""true"">A body decelerating.  </pl-answer>
  <pl-answer correct=""false"">A body accelerating.  </pl-answer>
  <pl-answer correct=""false"">A body moving in the negative direction.  </pl-answer>
  <pl-answer correct=""false"">A body moving at constant speed.</pl-answer>
</pl-checkbox>",,,,,"On a velocity-time graph, a downward sloping line indicates:
Options:
- A body decelerating.
- A body accelerating.
- A body moving in the negative direction.
- A body moving at constant speed.",D7f7a3e6-8b3d-4e3b-9c3a-6f3d7a8b3d4e,Velocity-time graph,"On a velocity-time graph, a downward sloping line indicates",Physics,"Velocity-time graph,Physics,Kinematics",Understanding of velocity-time graphs and kinematics,False,lberm007@ucr.edu,Num,1,,,,,,1.0,ME 103,Kinematics
242,P_1.1_Acceleration Calculation Example Q1,"{""uuid"": ""d6a7f8b3-9c4e-4e3d-8f3a-6b6c7d8e9f2a"", ""title"": ""Acceleration Calculation Example"", ""stem"": ""A car accelerates from rest and reaches a velocity of 30 mph in 4 seconds."", ""topic"": ""Physics"", ""tags"": [""acceleration"", ""velocity"", ""kinematics"", ""motion""], ""prereqs"": [""basic understanding of velocity and time""], ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A car accelerates from rest and reaches a velocity of {{params.v}} {{params.unitsSpeed}} in {{params.t}} {{params.unitsTime}}.</p>
  <p> What is its acceleration (in {{params.unitsAcceleration}})?</p>
</pl-question-panel>

<pl-number-input answers-name=""a"" comparison=""sigfig"" digits=""3"" label=""Acceleration (in {{params.unitsAcceleration}})""></pl-number-input>","const math = require('mathjs');

function convertKmphToMs(speedKmph) {
    const conversionFactor = 2.77778; // This factor converts km/h to m/s
    let speedMs = Math.round(speedKmph * conversionFactor);
    return speedMs;
}

function convertMPHtoFts(speedMPH){
    const conversionFactor = 1.46667; // This factor converts mph to ft/s
    let speedFts = Math.round(speedMPH * conversionFactor);
    return speedFts;
}

const generate = () => {
    const unitSystems = {
        si: {
            speed: 'kmh',
            time: 's',
            acceleration: 'm/s^2'
        },
        uscs: {
            speed: 'mph',
            time: 's',
            acceleration: 'ft/s^2'
        }
    };
    
    // Randomly select a unit system (SI or USC)
    const unitSystemKeys = Object.keys(unitSystems);
    const selectedUnitSystem = unitSystems[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];
    
    // Generate random values for velocity (v) and time (t)
    let v = math.randomInt(10, 31); // Random velocity between 10 and 30 units
    const t = math.randomInt(1, 11);  // Random time between 1 and 10 units
    
    // Conversion based on unit system
    let v_converted;
    if (selectedUnitSystem.speed == ""kmh""){
        v_converted = convertKmphToMs(v);
    } else if (selectedUnitSystem.speed == ""mph""){
        v_converted = convertMPHtoFts(v);
    }

    // Calculate acceleration (a = v / t)
    const a = v_converted / t;

    // Round the acceleration to the desired number of significant figures
    const sigfigs = 3;
    const roundedAcceleration = math.round(a, sigfigs);

    data = {
        params: {
            v: v,
            t: t,
            v_converted:v_converted,
            unitsSpeed: selectedUnitSystem.speed,
            unitsTime: selectedUnitSystem.time,
            unitsAcceleration: selectedUnitSystem.acceleration
        },
        correct_answers: {
            a: roundedAcceleration
        },
        nDigits: 2,  // Define the number of digits after the decimal place.
        sigfigs: sigfigs   // Define the number of significant figures for the answer.
    };
    console.log(data)
    return data
};
module.exports = {
    generate
};

","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        Acceleration is defined as the rate of change of velocity over time. Use the formula \(a = \frac{\Delta v}{\Delta t}\), where \(\Delta v\) is the change in velocity and \(\Delta t\) is the change in time. Ensure all units are in a consistent system (m/s for SI or ft/s for USCS) before applying this formula.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        For unit conversion in SI, use dimensional analysis. For example, to convert km/h to m/s, set up the ratio: \( \frac{1000\, \text{m}}{1\, \text{km}} \times \frac{1\, \text{hour}}{3600\, \text{s}} \). In USCS, to convert miles/h to ft/s, use: \( \frac{5280\, \text{ft}}{1\, \text{mile}} \times \frac{1\, \text{hour}}{3600\, \text{s}} \). These setups ensure that units cancel out properly, leaving you with the desired unit.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        With the car starting from rest, initial velocity is 0. The final velocity is {{params.v}} {{params.unitsSpeed}}, and time taken is {{params.t}} {{params.unitsTime}}. Convert final velocity into a consistent unit (m/s or ft/s) using dimensional analysis, then substitute these values into the formula: \(a = \frac{{v_converted}}{{params.t}}\) in the chosen acceleration unit (m/sÂ² or ft/sÂ²).
    </pl-hint>
    </pl-solution-panel>",,,"a car accelerates from rest and reaches a velocity of 25 m/s in 5 seconds.
what is its acceleration (in m/s^2)?

acceleration (in m/s^2): [input field]",D6a7f8b3-9c4e-4e3d-8f3a-6b6c7d8e9f2a,Acceleration calculation example,A car accelerates from rest and reaches a velocity of 30 mph in 4 seconds.,Physics,"Acceleration,Velocity,Kinematics,Motion",Basic understanding of velocity and time,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Kinematics, Newton's Second Law of Motion"
243,P_1.2_Distance Traveled by Accelerating Car,"{""uuid"": ""d3f7b3a1-8e3d-4c7b-9f3a-6e1d8c2f4a9e"", ""title"": ""Distance Traveled by Accelerating Car"", ""stem"": ""A car accelerates from rest and reaches a velocity of 30 mph in 4 seconds."", ""topic"": ""Kinematics"", ""tags"": [""acceleration"", ""velocity"", ""distance"", ""kinematics""], ""prereqs"": [""Understanding of velocity and acceleration"", ""Knowledge of basic kinematics equations""], ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A car accelerates from rest and reaches a velocity of {{params.v}} {{params.unitsSpeed}} in {{params.t}} {{params.unitsTime}}. </p>
  <p> The distance traveled by the car in {{params.unitsDistance}} is:</p>
</pl-question-panel>

<pl-number-input answers-name=""d"" comparison=""sigfigs"" digits=""3"" label=""Distance ({{params.unitsDistance}})""></pl-number-input>","const math = require('mathjs');

function convertKmphToMs(speedKmph) {
    const conversionFactor = 2.77778; // This factor converts km/h to m/s
    let speedMs = Math.round(speedKmph * conversionFactor);
    return speedMs;
}

function convertMPHtoFts(speedMPH){
    const conversionFactor = 1.46667; // This factor converts mph to ft/s
    let speedFts = Math.round(speedMPH * conversionFactor);
    return speedFts;
}
const generate = () => {
    const unitSystems = {
        si: {
            speed: 'kmh',
            distance: 'm',
            time: 's'
        },
        uscs: {
            speed: 'mph',
            distance: 'ft',
            time: 's'
        }
    };

    // 1. Dynamic Parameter Selection
    const selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];

    // 3. Value Generation
    const v = math.randomInt(10, 31); // velocity between 10 and 30 units
    const t = math.randomInt(1, 11); // time between 1 and 10 units

    // Conversion based on unit system
    let v_converted;
    if (units.speed == ""kmh""){
        v_converted = convertKmphToMs(v);
    } else if (units.speed == ""mph""){
        v_converted = convertMPHtoFts(v);
    }
    // 4. Solution Synthesis
    // Using the kinematic equation: d = v * t / 2 (since initial velocity is 0 and acceleration is constant)
    let d = (v_converted * t) / 2;
    d = math.round(d)

    // Return the structured data
    data= {
        params: {
            v: v,
            t: t,
            unitsSpeed: units.speed,
            unitsTime: units.time,
            unitsDistance: units.distance
        },
        correct_answers: {
            d: d
        },
        nDigits: 3,
        sigfigs: 3
    };
    console.log(data)
    return data
   
};

module.exports = {
    generate
};

generate()","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The car starts from rest, meaning its initial velocity (\(u\)) is 0. The final velocity (\(v\)) is given as {{params.v}} {{params.unitsSpeed}}, and the time (\(t\)) taken for acceleration is {{params.t}} {{params.unitsTime}}.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        Use the equation of motion \(d = ut + \frac{1}{2}at^2\). With \(u = 0\), this simplifies to \(d = \frac{1}{2}at^2\). Acceleration (\(a\)) can be found using \(v = u + at\), which becomes \(a = \frac{v}{t}\) as \(u = 0\).
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Substitute \(a = \frac{v}{t}\) into \(d = \frac{1}{2}at^2\) to get \(d = \frac{1}{2}vt\). Finally, insert the given values of \(v\) and \(t\) to calculate \(d = \frac{1}{2}({{params.v}})({{params.t}}) = {{correct_answers.d}} {{params.unitsDistance}}\).
    </pl-hint>
    </pl-solution-panel>",,,"a car accelerates from rest and reaches a velocity of {{params.v}} {{params.unitsspeed}} in {{params.t}} {{params.unitstime}}.
the distance traveled by the car in {{params.unitsdistance}} is:",D3f7b3a1-8e3d-4c7b-9f3a-6e1d8c2f4a9e,Distance traveled by accelerating car,A car accelerates from rest and reaches a velocity of 30 mph in 4 seconds.,Kinematics,"Acceleration,Velocity,Distance,Kinematics","Understanding of velocity and acceleration,Knowledge of basic kinematics equations",True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,"ME 003, ME 103","Kinematics, Newton's Second Law of Motion"
244,P_1.3_Car Speed Reduction,"{
    ""uuid"": ""d7f6b8a1-9c4e-4e3b-8c7d-6f3a2e1d0b9a"",
    ""title"": ""Car Speed Reduction"",
    ""stem"": ""Calculating the time required for a car to reduce its speed"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""kinematics"",
        ""speed"",
        ""acceleration""
    ],
    ""prereqs"": [
        ""Understanding of speed, acceleration, and distance""
    ],
    ""isAdaptive"": ""true"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""javascript""
}","<pl-question-panel>
  <p> The car traveling at {{params.v1}} {{params.unitsSpeed}} needs to reduce its speed to {{params.v2}} {{params.unitsSpeed}} in {{params.d}} {{params.unitsDist}}. </p>
  <p> How long (in seconds) does the car take to reduce its speed? </p>
</pl-question-panel>

<pl-number-input answers-name=""t"" comparison=""sigfig"" digits=""3"" label=""Time (in seconds)""></pl-number-input>","const math = require('mathjs');

function convertKmphToMs(speedKmph) {
    const conversionFactor = 2.77778; // This factor converts km/h to m/s
    let speedMs = Math.round(speedKmph * conversionFactor);
    return speedMs;
}

function convertMPHtoFts(speedMPH){
    const conversionFactor = 1.46667; // This factor converts mph to ft/s
    let speedFts = Math.round(speedMPH * conversionFactor);
    return speedFts;}

const generate = () => {
    // Define unit systems and their corresponding units
    const unitSystems = {
        si: {
            speed: ""kmh"",
            dist: ""m"",
            time: ""s""
        },
        uscs: {
            speed: ""mph"",
            dist: ""ft"",
            time: ""s""
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(unitSystems);
    const selectedUnitSystem = unitSystems[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];

    // Generate random values for initial speed, final speed, and distance
    const v1 = math.randomInt(20, 100); // Initial speed
    const v2 = math.randomInt(10, v1);  // Final speed (must be less than initial speed)
    const d = math.randomInt(100, 1000); // Distance

    // Unit Conversion
    // Conversion based on unit system
    let v1_converted;
    if (selectedUnitSystem.speed == ""kmh""){
        v1_converted = convertKmphToMs(v1);
    } else if (selectedUnitSystem.speed == ""mph""){
        v1_converted = convertMPHtoFts(v1);
    }

    // Conversion based on unit system
    let v2_converted;
    if (selectedUnitSystem.speed == ""kmh""){
        v2_converted = convertKmphToMs(v2);
    } else if (selectedUnitSystem.speed == ""mph""){
        v2_converted = convertMPHtoFts(v2);
    }

    // Calculate the time taken to reduce speed (assuming constant deceleration)
    // Using the formula: d = ((v1 + v2) / 2) * t
    const t = (2 * d) / (v1_converted + v2_converted);

    // Return the generated data
    return {
        params: {
            v1: v1,
            v2: v2,
            d: d,
            unitsSpeed: selectedUnitSystem.speed,
            unitsDist: selectedUnitSystem.dist,
            unitsTime: selectedUnitSystem.time
        },
        correct_answers: {
            t: t
        },
        nDigits: 3,
        sigfigs: 3
    };
};` `

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        For a decelerating car, use the equation of motion: \(v^2 = u^2 + 2as\), where \(v\) is the final speed, \(u\) is the initial speed, \(a\) is the acceleration, and \(s\) is the distance. Rearrange it to find acceleration: \(a = \frac{v^2 - u^2}{2s}\).
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        Substitute the given values to calculate acceleration: \(a = \frac{({params.v2})^2 - ({params.v1})^2}{2*{params.d}}\). Then, use this acceleration to find the time with \(t = \frac{v - u}{a}\).
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Finally, calculate the time: \(t = \frac{{params.v2} - {params.v1}}{a}\). The time taken for the car to reduce its speed is \({correct_answers.t}\) seconds.
    </pl-hint>
    </pl-solution-panel>",,,"the car traveling at 60 km/h needs to reduce its speed to 30 km/h in 100 meters.

how long (in seconds) does the car take to reduce its speed?",D7f6b8a1-9c4e-4e3b-8c7d-6f3a2e1d0b9a,Car speed reduction,Calculating the time required for a car to reduce its speed,Physics,"Kinematics,Speed,Acceleration","Understanding of speed, acceleration, and distance",True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Braking Mechanics, Time and Motion Analysis"
245,P_1.4_Maximum Acceleration of a Car Q4,"{
    ""uuid"": ""d7f6a8b3-9c4e-4f3d-8e3a-6b2c1e9f5a2d"",
    ""title"": ""Maximum Acceleration of a Car"",
    ""stem"": ""What is the 0-60 mph time in seconds?"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""acceleration"",
        ""car"",
        ""physics""
    ],
    ""prereqs"": ""Understanding of acceleration and conversion of units"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""javascript""
}","<pl-question-panel>
  <p> If the maximum acceleration of a car is {{params.a}} {{params.unitsAcceleration}}. </p>
  <p> What is the 0-60 mph time in seconds?</p>
</pl-question-panel>

<pl-number-input answers-name=""t"" comparison=""sigfig"" digits=""3"" label=""Time (in seconds)""></pl-number-input>","const math = require('mathjs');

const generate = () => {
    // Define unit systems and their corresponding units
    const units = {
        ""si"": {
            ""acceleration"": ""m/s^2"",
            ""time"": ""s"",
            ""speed"": ""m/s""
        },
        ""uscs"": {
            ""acceleration"": ""ft/s^2"",
            ""time"": ""s"",
            ""speed"": ""ft/s""
        }
    };

    // Randomly select a unit system
    const unitSystems = ['si', 'uscs'];
    const unitSystem = unitSystems[math.randomInt(0, unitSystems.length)];
    const selectedUnits = units[unitSystem];

    // Generate a random acceleration value
    const a = math.round(math.random(2, 10)); // Random acceleration between 2 and 10 units

    // Convert 60 mph to the unit system's speed unit
    const targetSpeedMph = 60;
    let targetSpeed;
    if (unitSystem === 'si') {
        targetSpeed = targetSpeedMph * 0.44704; // Convert mph to m/s
    } else {
        targetSpeed = targetSpeedMph * 0.44704 * 3.28084; // Convert mph to ft/s
    }

    // Calculate the time to reach 60 mph using the formula t = v/a
    const t = targetSpeed / a;

    // Return the generated data
    return {
        params: {
            a: a, // Round to 2 decimal places for display
            unitsAcceleration: selectedUnits.acceleration
        },
        correct_answers: {
            t: t // Round to 3 decimal places for the answer
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The time it takes to reach a certain speed can be calculated using the formula: \( t = \frac{v}{a} \), where \( v \) is the final speed and \( a \) is the acceleration.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        If acceleration is given in m/sÂ², first convert 60 mph to m/s by multiplying by 0.44704. Then, divide the result by the acceleration to find the time. If the acceleration is given in ft/sÂ², use 60 mph directly.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        For acceleration in m/sÂ²: The time it takes to reach 60 mph is \( t = \frac{60 \times 0.44704}{a} \) seconds. For acceleration in ft/sÂ²: The time is \( t = \frac{60}{a} \) seconds, assuming \( a \) is already in ft/sÂ².
    </pl-hint>
</pl-solution-panel>
",,,"if the maximum acceleration of a car is {{params.a}} {{params.unitsacceleration}}, what is the 0-60 mph time in seconds?",D7f6a8b3-9c4e-4f3d-8e3a-6b2c1e9f5a2d,Maximum acceleration of a car,What is the 0-60 mph time in seconds?,Physics,"Acceleration,Car,Physics",Understanding of acceleration and conversion of units,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Time and Motion Analysis, Newton's Second Law of Motion"
246,P_1.5_Deceleration Calculation,"{
    ""uuid"": ""d7f6b9a8-4c3e-4f3d-9a2b-1e8c7d6f5a2e"",
    ""title"": ""Deceleration Calculation"",
    ""stem"": ""A 70-0 mph braking distance for a car is 170 feet. What's the deceleration in ft/s^2?"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""deceleration"",
        ""braking"",
        ""physics""
    ],
    ""prereqs"": [
        ""Understanding of distance, speed, and acceleration""
    ],
    ""isAdaptive"": ""true"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""javascript""
}","<pl-question-panel>
  <p> A 70-0 mph braking distance for a car is {{params.distance}} {{params.unitsDistance}}. </p>
  <p> What's the deceleration in {{params.unitsAcceleration}} ?</p>
</pl-question-panel>

<pl-number-input answers-name=""a"" comparison=""sigfig"" digits=""3"" label=""Deceleration (in {{params.unitsAcceleration}})""></pl-number-input>","const math = require('mathjs');

const generate = () => {
    // Define unit systems and their corresponding units
    const unitSystems = {
        'si': {
            'distance': 'meters',
            'speed': 'm/s',
            'time': 'seconds',
            'acceleration': 'm/s^2'
        },
        'uscs': {
            'distance': 'feet',
            'speed': 'ft/s',
            'time': 'seconds',
            'acceleration': 'ft/s^2'
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(unitSystems);
    const selectedSystem = unitSystems[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];

    // Generate random braking distance within a reasonable range
    const distance = math.randomInt(50, 200);

    // Convert 70 mph to the selected unit system's speed unit
    const initialSpeed = 70 * (selectedSystem.speed === 'm/s' ? 0.44704 : 1.46667);

    // Calculate deceleration using the formula v^2 = u^2 + 2as (where v = 0, u = initial speed, s = distance)
    const deceleration = -Math.pow(initialSpeed, 2) / (2 * distance);

    // Return the generated data
    data = {
        params: {
            distance: distance,
            unitsDistance: selectedSystem.distance,
            unitsAcceleration: selectedSystem.acceleration
        },
        correct_answers: {
            a: deceleration // Note: Rounding not yet implemented
        },
        nDigits: 2,
        sigfigs: 2
    };
    return data
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> Use the equation of motion: $v^2 = u^2 + 2as$ where $v$ is the final velocity, $u$ is the initial velocity, $a$ is the acceleration and $s$ is the distance. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> In this case, the final velocity $v$ is 0 (as the car comes to a stop), the initial velocity $u$ is 70 mph (which needs to be converted to {{params.unitsAcceleration}}), and the distance $s$ is {{params.distance}} {{params.unitsDistance}}. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> Rearrange the equation to solve for $a$: $a = (v^2 - u^2) / (2s)$. </pl-hint>
    <pl-hint level=""4"" data-type=""text""> Substituting the given values and solving for $a$ gives the deceleration. </pl-hint>
</pl-solution-panel>",,,"a 70-0 mph braking distance for a car is 50 meters. 

what's the deceleration in meters per second squared?",D7f6b9a8-4c3e-4f3d-9a2b-1e8c7d6f5a2e,Deceleration calculation,A 70-0 mph braking distance for a car is 170 feet. what's the deceleration in ft/s^2?,Physics,"Deceleration,Braking,Physics","Understanding of distance, speed, and acceleration",True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Braking Mechanics, Newton's Second Law of Motion"
247,P_1.6_Braking Distance Calculation,"{
    ""uuid"": ""d7f6b8a1-9c4d-4e3b-8e3a-6f3c2d1a9e2f"",
    ""title"": ""Braking Distance Calculation"",
    ""stem"": ""Calculating the time required for a car to come to rest given its braking distance and initial speed"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""kinematics"",
        ""braking distance"",
        ""car physics""
    ],
    ""prereqs"": [
        ""Understanding of kinematics equations"",
        ""Knowledge of car braking systems""
    ],
    ""isAdaptive"": ""true"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""javascript""
}","<pl-question-panel>
  <p> A {{params.v1}} {{params.unitsSpeed}} - {{params.v2}} {{params.unitsSpeed}} braking distance for a car is {{params.d}} {{params.unitsDistance}}. </p>
  <p> How long (in {{params.unitsTime}}) does it take for the car to come to rest? </p>
</pl-question-panel>

<pl-number-input answers-name=""t"" comparison=""sigfig"" digits=""3"" label=""Time (in {{params.unitsTime}})""></pl-number-input>","const { unit } = require(""mathjs"");

const generate = () => {
    const randomInt = (min, max) => {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };

    // Generate random values for initial speed (v1) and braking distance (d)
    const v1 = randomInt(50, 80); // Initial speed in selected unit
    const d = randomInt(50, 200); // Braking distance in selected unit

    // 1. Dynamic Parameter Selection:
    // Randomly select units for speed, distance, and time.
    const unitsSpeed = ['mph', 'kmh'];
    const unitsDist = ['feet', 'meters'];
    const unitsTime = ['seconds'];

    // Randomly select a unit system for the problem.
    const selectedSpeedUnit = unitsSpeed[Math.floor(Math.random() * unitsSpeed.length)];
    const selectedDistUnit = unitsDist[Math.floor(Math.random() * unitsDist.length)];
    const selectedTimeUnit = unitsTime[0]; // Only one option available

    // Conversion factors
    const mphToFeetPerSec = 5280 / 3600;
    const mphToMeterPerSec = 1609.344 / 3600;
    const kmhToMeterPerSec = 1000 / 3600;
    const kmhToFeetPerSec = 3280.8399 / 3600;

    // Convert speed to the appropriate unit
    const convertSpeed = (speed, unit_speed, unit_distance) => {
        let speed_converted;

        if (unit_speed === ""mph"" && unit_distance === ""feet"") {
            speed_converted = speed * mphToFeetPerSec;
        } else if (unit_speed === ""mph"" && unit_distance === ""meters"") {
            speed_converted = speed * mphToMeterPerSec;
        } else if (unit_speed === ""kmh"" && unit_distance === ""feet"") {
            speed_converted = speed * kmhToFeetPerSec;
        } else if (unit_speed === ""kmh"" && unit_distance === ""meters"") {
            speed_converted = speed * kmhToMeterPerSec;
        } else {
            speed_converted = speed;
        }

        return speed_converted;
    };

    
    let v1_converted = convertSpeed(v1, selectedSpeedUnit, selectedDistUnit);

    // Calculate the acceleration (a) and time (t)
    const a = -(v1_converted ** 2) / (2 * d); // Acceleration in m/s^2 (negative for deceleration)
    const t = -v1_converted / a; // Time in seconds

    // Return the problem data
    return {
        params: {
            v1: v1,
            v2: 0, // Final speed is 0 since the car comes to rest
            d: d,
            unitsSpeed: selectedSpeedUnit,
            unitsDistance: selectedDistUnit,
            unitsTime: selectedTimeUnit
        },
        correct_answers: {
            t: t
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};
","<pl-solution-panel>
<pl-hint level=""1"" data-type=""text""> The braking distance is the area under the speed-time graph. </pl-hint>
<pl-hint level=""2"" data-type=""text""> The area under the graph is a trapezium, so we can use the formula for the area of a trapezium to find the time. </pl-hint>
<pl-hint level=""3"" data-type=""text""> 
<ul>
<li> The formula for the area of a trapezium is $A = \frac{1}{2}(a+b)h$, where $a$ and $b$ are the lengths of the parallel sides and $h$ is the height. </li>
<li> In this case, $a = {params.v1}$, $b = {params.v2}$, and $h = t$. </li>
<li> We know that $A = {params.d}$, so we can rearrange the formula to find $t$. </li>
<li> $t = \frac{2A}{a+b} = \frac{2*{params.d}}{{params.v1}+{params.v2}}$ </li>
<li> $t = {correct_answers.t}$ ${params.unitsTime}$ </li>
</ul>
</pl-hint>
</pl-solution-panel>",,,"a 20 m/s - 10 m/s braking distance for a car is 50 meters.
how long (in seconds) does it take for the car to come to rest?

time (in seconds): [input field]",D7f6b8a1-9c4d-4e3b-8e3a-6f3c2d1a9e2f,Braking distance calculation,Calculating the time required for a car to come to rest given its braking distance and initial speed,Physics,"Kinematics,Braking distance,Car physics","Understanding of kinematics equations,Knowledge of car braking systems",True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,"ME 103, ME 003","Braking Mechanics, Time and Motion Analysis, Kinematics"
248,P_1.9_Total Distance Traveld given Breaking Speed,"{
    ""uuid"": ""d3f7b3a1-8e3d-4c7b-9e3a-6f3d8e1c7b9e"",
    ""title"": ""Total Distance Traveld given Breaking Speed"",
    ""stem"": ""A 70 mph - 0 mph braking distance for a car is 170 feet. How far (in feet) will the car travel in 1.5 seconds?"",
    ""topic"": ""Physics"",
    ""tags"": [
        ""kinematics"",
        ""motion"",
        ""braking distance""
    ],
    ""prereqs"": [
        ""basic understanding of velocity and time""
    ],
    ""isAdaptive"": ""true"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""javascript""
}","<pl-question-panel>
  <p> A {{params.v1}} {{params.unitsSpeed}} - 0 {{params.unitsSpeed}} braking distance for a car is {{params.d1}} {{params.unitsDist}}. How far (in {{params.unitsDist}}) will the car travel in {{params.t1}} {{params.unitsTime}}?</p>
</pl-question-panel>

<pl-number-input answers-name=""d"" comparison=""sigfig"" digits=""3"" label=""Distance (in {{params.unitsDist}})""></pl-number-input>","const { unit } = require(""mathjs"");

const generate = () => {
    // External Data Integration:
    // Placeholder values for the example, in a real scenario these would be imported or dynamically generated.

    // 1. Dynamic Parameter Selection:
    // Randomly select units for speed, distance, and time.
    const unitsSpeed = ['mph', 'kmh'];
    const unitsDist = ['feet', 'meters'];
    const unitsTime = ['seconds'];

    // Randomly select a unit system for the problem.
    const selectedSpeedUnit = unitsSpeed[Math.floor(Math.random() * unitsSpeed.length)];
    const selectedDistUnit = unitsDist[Math.floor(Math.random() * unitsDist.length)];
    const selectedTimeUnit = unitsTime[Math.floor(Math.random() * unitsTime.length)];

    // Conversion factors
    const mphToFeetPerSec = 5280 / 3600;
    const mphToMeterPerSec = 1609.344 / 3600;
    const kmhToMeterPerSec = 1000 / 3600;
    const kmhToFeetPerSec = 3280.8399 / 3600;

    // Convert speed to the appropriate unit
    const convertSpeed = (speed, unit_speed, unit_distance) => {
        let speed_converted;

        if (unit_speed === ""mph"" && unit_distance === ""feet"") {
            speed_converted = speed * mphToFeetPerSec;
        } else if (unit_speed === ""mph"" && unit_distance === ""meters"") {
            speed_converted = speed * mphToMeterPerSec;
        } else if (unit_speed === ""kmh"" && unit_distance === ""feet"") {
            speed_converted = speed * kmhToFeetPerSec;
        } else if (unit_speed === ""kmh"" && unit_distance === ""meters"") {
            speed_converted = speed * kmhToMeterPerSec;
        } else {
            speed_converted = speed;
        }

        return speed_converted;
    };

    // 3. Value Generation:
    // Generate random values for initial speed and braking distance
    const initialSpeed = Math.round((Math.random() * (100 - 20) + 20),3); // Random speed between 20 and 100
    const brakingDistance = Math.round(Math.random() * (500 - 100) + 100,3); // Random distance between 100 and 500
    const time = Math.round((Math.random() * 2 + 1) * 100) / 100; // Given time in seconds between 1-3 and up to 3 decimals

    // 4. Solution Synthesis:
    // Unit Conversion to Appropriate Units 
    const converted_speed = convertSpeed(initialSpeed, selectedSpeedUnit,selectedDistUnit);

    // Calculate deceleration using the formula a = -(V_0^2) / (2 * Î”x)
    const deceleration = -(converted_speed ** 2) / (2 * brakingDistance);

    // Calculate the distance traveled in 1.5 seconds using Î”x = V_0 * t + (1/2) * a * t^2
    const distanceTraveled = converted_speed * time + 0.5 * deceleration * time ** 2;

    // Return the result
    data = {
        params: {
            v1: initialSpeed,
            d1: brakingDistance,
            t1: time,
            unitsSpeed: selectedSpeedUnit,
            unitsDist: selectedDistUnit,
            unitsTime: selectedTimeUnit
        },
        correct_answers: {
            d: distanceTraveled
        },
        nDigits: 3,
        sigfigs: 3
    };
    return data
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text""> The braking distance is the distance covered by the car from the time the brakes are applied until it comes to a stop. </pl-hint>
    <pl-hint level=""2"" data-type=""text""> The car is initially moving at a speed of {{params.v1}} {{params.unitsSpeed}} and comes to a stop, so the average speed during braking is {{params.v1}}/2 {{params.unitsSpeed}}. </pl-hint>
    <pl-hint level=""3"" data-type=""text""> The time taken to stop the car can be calculated by dividing the braking distance by the average speed. </pl-hint>
    <pl-hint level=""4"" data-type=""text""> The total distance covered by the car in {{params.t1}} {{params.unitsTime}} can be calculated by multiplying the average speed during braking by the total time. </pl-hint>
    <pl-hint level=""5"" data-type=""text""> The total distance covered by the car in {{params.t1}} {{params.unitsTime}} is {{correct_answers.d}} {{params.unitsDist}}. </pl-hint>
</pl-solution-panel>",,,"a 60 km/h - 0 km/h braking distance for a car is 20 meters. how far (in meters) will the car travel in 4 seconds?

distance (in meters): [input box]",D3f7b3a1-8e3d-4c7b-9e3a-6f3d8e1c7b9e,Total distance traveld given breaking speed,A 70 mph - 0 mph braking distance for a car is 170 feet. how far (in feet) will the car travel in 1.5 seconds?,Physics,"Kinematics,Motion,Braking distance",Basic understanding of velocity and time,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,"ME 003, ME 103","Braking Mechanics, Time and Motion Analysis"
249,preclass_2.1.10_Cannon Ball Range Calculation,"{""uuid"": ""a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"", ""title"": ""Cannon Ball Range Calculation"", ""stem"": ""A cannon fires a cannon ball at an angle 30Â° at a muzzle velocity of 50 m/s."", ""topic"": ""Projectile Motion"", ""tags"": [""Physics"", ""Mechanics"", ""Kinematics"", ""Projectile Motion""], ""prereqs"": ""Understanding of projectile motion equations and trigonometry"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A cannon fires a cannon ball at an angle of {{params.theta}} degrees at a muzzle velocity of {{params.v}} {{params.unitsSpeed}}. </p>
  <p> What's the range (in {{params.unitsDist}}) that the cannon ball reaches? </p>
</pl-question-panel>

<pl-number-input answers-name=""R"" comparison=""sigfig"" digits=""3"" label=""R = (in {{params.unitsDist}})""></pl-number-input>","const math = require('mathjs');
function solveQuadratic(a, b, c) {
    const discriminant = b * b - 4 * a * c;
    if (discriminant < 0) {
        return []; // No real roots
    } else {
        const root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
        const root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
        return [root1, root2];
    }
}
const generate = () => {
    // Define unit systems and their corresponding units
    const unitSystems = {
        si: {
            speed: ""m/s"",
            dist: ""m"",
            angle: ""degrees"",
            gravity: 9.81 // m/s^2
        },
        uscs: {
            speed: ""ft/s"",
            dist: ""ft"",
            angle: ""degrees"",
            gravity: 32.174 // ft/s^2
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(unitSystems);
    const selectedUnitSystem = unitSystems[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];

    // Generate random values for velocity, angle, and height
    const v = math.randomInt(20, 100); // Random initial velocity between 20 and 100 units
    const theta = math.randomInt(15, 75); // Random angle between 15 and 75 degrees
    const H = 0; // Height is 0 for this problem as it's not mentioned in the guide

    // Convert angle to radians for calculations
    const thetaRad = math.unit(theta, 'deg').toNumber('rad');

    // Calculate horizontal and vertical components of the velocity
    const Vx = v * Math.cos(thetaRad);
    const Vy = v * Math.sin(thetaRad);

    // Calculate time of flight using the quadratic formula
    const g = selectedUnitSystem.gravity;
    const a = -0.5 * g;
    const b = Vy;
    const c = H;
    
    let t1;
    let t2;
    [t1,t2]= solveQuadratic(a,b,c)
    let t;
    if (t1>0){
        t= t1
    }else t=t2

    // Calculate the range of the projectile
    const R = Vx * t;

    // Return the generated data
    return {
        params: {
            v: v,
            theta: theta,
            H: H,
            unitsSpeed: selectedUnitSystem.speed,
            unitsDist: selectedUnitSystem.dist
        },
        correct_answers: {
            R: R
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The range of a projectile launched at an angle can be calculated using the formula: \( R = \frac{v^2 \sin(2\theta)}{g} \), where \( v \) is the initial velocity, \( \theta \) is the launch angle, and \( g \) is the acceleration due to gravity.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        First, convert the launch angle from degrees to radians by multiplying by \( \frac{\pi}{180} \). Then, substitute the given values into the formula to calculate the range.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        The range of the cannon ball is \( R = \frac{{params.v}^2 \sin(2 \times {params.theta} \times \frac{\pi}{180})}{9.8} = {correct_answers.R} {params.unitsDist} \).
    </pl-hint>
</pl-solution-panel>",,,a cannon fires a cannon ball at an angle of 45 degrees at a muzzle velocity of 300 meters per second. what's the range (in meters) that the cannon ball reaches?,A1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6,Cannon ball range calculation,A cannon fires a cannon ball at an angle 30â° at a muzzle velocity of 50 m/s.,Projectile motion,"Physics,Mechanics,Kinematics,Projectile motion",Understanding of projectile motion equations and trigonometry,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,Projectile Motion
250,preclass_2.1.12_Projectile Motion,"{""uuid"": ""a1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7"", ""title"": ""Projectile Motion"", ""stem"": ""A cannon fires a cannon ball at an angle 30Â° at a muzzle velocity of 50 m/s. What's the range (in m) that the cannon ball reaches?"", ""topic"": ""Physics"", ""tags"": [""Projectile Motion"", ""Physics"", ""Kinematics""], ""prereqs"": ""Understanding of projectile motion equations and trigonometry"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A cannon fires a cannon ball at an angle {{params.theta}} degrees at a muzzle velocity of {{params.v}} {{params.unitsSpeed}}. </p>
  <p> What's the range (in {{params.unitsDist}}) that the cannon ball reaches? </p>
</pl-question-panel>

<pl-number-input answers-name=""R"" comparison=""sigfig"" digits=""3"" label=""R = (in {{params.unitsDist}})""></pl-number-input>","const math = require('mathjs');
function solveQuadratic(a, b, c) {
    // Calculate the discriminant
    const inside = b ** 2 - 4 * a * c;

    if (inside < 0) {
        return 'No real roots';
    } else if (inside === 0) {
        // One real root
        const root = -b / (2 * a);
        return [root];
    } else {
        // Two real roots
        const root1 = (-b + Math.sqrt(inside)) / (2 * a);
        const root2 = (-b - Math.sqrt(inside)) / (2 * a);
        return [root1, root2];
    }
}
const generate = () => {
    // Define unit systems and their corresponding units
    const unitSystems = {
        si: {
            speed: ""m/s"",
            dist: ""m"",
            angle: ""degrees"",
            gravity: 9.81 // m/s^2
        },
        uscs: {
            speed: ""ft/s"",
            dist: ""ft"",
            angle: ""degrees"",
            gravity: 32.174 // ft/s^2
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(unitSystems);
    const randomIndex = math.randomInt(0, unitSystemKeys.length);
    const selectedUnitSystem = unitSystems[unitSystemKeys[randomIndex]];

    // Generate random values for initial velocity, angle, and height
    const v = math.randomInt(20, 101); // Initial velocity between 20 and 100
    const theta = math.randomInt(15, 76); // Angle between 15 and 75 degrees

    // Convert angle to radians for calculations
    const thetaRad = math.unit(theta, 'deg').toNumber('rad');

    // Calculate horizontal and vertical components of velocity
    const Vx = v * Math.cos(thetaRad);
    const Vy = v * Math.sin(thetaRad);

    // Calculate time of flight
    const a = -0.5 * selectedUnitSystem.gravity; // For instance, gravity might be 9.81 m/s^2
    const b = Vy; // Initial vertical velocity
    const c = 0 // Height

    const results = solveQuadratic(a, b, c);

    let t = 0;
    if (Array.isArray(results)) {
        const [t1, t2] = results;
        // Choose the positive and meaningful time value
        t = t1 > 0 ? t1 : t2 > 0 ? t2 : 0;
    } else {
        console.log(results); // No real roots, or other messages
    }

    // Calculate range
    let R = 0;
    if (t > 0) {
        R = Vx * t; // Range calculation is meaningful only if time is positive
    }


    // Return the generated data
    return {
        params: {
            v: v,
            theta: theta,
            unitsSpeed: selectedUnitSystem.speed,
            unitsDist: selectedUnitSystem.dist
        },
        correct_answers: {
            R: R, 
        },
        nDigits: 3, // Define the number of digits after the decimal place
        sigfigs: 3 // Define the number of significant figures for the answer
    };
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The range of a projectile launched at an angle can be calculated using the formula: \( R = Vx \times t \), where \( Vx \) is the horizontal component of the initial velocity and \( t \) is the time of flight.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        To find \( Vx \), use \( Vx = {params.v} \times \cos({params.theta}) \) where \( {params.v} \) is the initial velocity and \( {params.theta} \) is the launch angle in radians. Convert the launch angle from degrees to radians by multiplying by \( \frac{\pi}{180} \).
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Calculate the time of flight by solving the quadratic equation \( 0.5 \times {selectedUnitSystem.gravity} \times t^2 - Vy \times t = 0 \), where \( Vy = {params.v} \times \sin({params.theta}) \).
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        Substitute the calculated values of \( Vx \) and \( t \) into the range formula to find \( R \). The range of the projectile is \( R = Vx \times t = {correct_answers.R} {params.unitsDist} \).
    </pl-hint>
</pl-solution-panel>
",,,"a cannon fires a cannon ball at an angle {{params.theta}} degrees at a muzzle velocity of {{params.v}} {{params.unitsspeed}}.
what's the range (in {{params.unitsdist}}) that the cannon ball reaches?",A1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7,Projectile motion,A cannon fires a cannon ball at an angle 30â° at a muzzle velocity of 50 m/s. what's the range (in m) that the cannon ball reaches?,Physics,"Projectile motion,Physics,Kinematics",Understanding of projectile motion equations and trigonometry,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,Projectile Motion
251,preclass_2.1.13_Bridge Construction Problem,"{""uuid"": ""a1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7"", ""title"": ""Bridge Construction Problem"", ""stem"": ""A bridge under construction has a 'Bridge ends here' sign. The bridge is being constructed over a river that is 70 ft below. A drunk driver speeding at 75 mph misses the sign and goes off horizontally from the end of the bridge."", ""topic"": ""Physics"", ""tags"": [""bridge construction"", ""kinematics"", ""horizontal motion""], ""prereqs"": ""Understanding of kinematics and horizontal motion"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A bridge under construction has a ""Bridge ends here"" sign. The bridge is being constructed over a river that is {{params.H}} {{params.unitsDist}} below. A drunk driver speeding at {{params.v}} {{params.unitsSpeed}} misses the sign and goes off horizontally from the end of the bridge. What is the horizontal distance (in {{params.unitsDist}}) from the point at which the car runs off the end of the bridge and at which the car hits the river?</p>
</pl-question-panel>

<pl-number-input answers-name=""R"" comparison=""sigfig"" digits=""3"" label=""R (in {{params.unitsDist}})""></pl-number-input>","const math = require('mathjs');

/**
 * The SpeedConverter class provides static methods to convert speeds between
 * different units: feet per second (ft/s), meters per second (m/s),
 * miles per hour (mph), and kilometers per hour (km/h).
 */
class SpeedConverter {
    /**
     * Converts speed from feet per second to miles per hour.
     * 
     * @param {number} speedFts - The speed in feet per second.
     * @return {number} The speed in miles per hour.
     */
    static ftstoMPH(speedFts) {
        return speedFts * (3600 / 5280);
    }

    /**
     * Converts speed from meters per second to kilometers per hour.
     * 
     * @param {number} speedMs - The speed in meters per second.
     * @return {number} The speed in kilometers per hour.
     */
    static mstoKmH(speedMs) {
        return speedMs * (3600 / 1000);
    }

    /**
     * Converts speed from miles per hour to feet per second.
     * 
     * @param {number} speedMPH - The speed in miles per hour.
     * @return {number} The speed in feet per second.
     */
    static mphToFts(speedMPH) {
        return speedMPH * (5280 / 3600);
    }

    /**
     * Converts speed from kilometers per hour to meters per second.
     * 
     * @param {number} speedKMH - The speed in kilometers per hour.
     * @return {number} The speed in meters per second.
     */
    static kmHtoMs(speedKMH) {
        return speedKMH * (1000 / 3600);
    }
}

const generate = () => {
    const unitSystems = {
        si: {
            speed: 'Kmh',
            distance: 'm',
            time: 's',
            gravity: 9.81 // m/s^2
        },
        uscs: {
            speed: 'mph',
            distance: 'ft',
            time: 's',
            gravity: 32.2 // ft/s^2
        }
    };

    // 1. Dynamic Parameter Selection
    const selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];

    // 3. Value Generation
    const v = math.randomInt(50, 101); // velocity between 50 and 100 units
    const H = math.randomInt(20, 101); // height between 20 and 100 units

    // Conversion based on unit system
    let v_converted;
    let g = units.gravity;
    if (units.speed === 'mph') {
        v_converted = SpeedConverter.mphToFts(v);
    } else {
        // Assuming the input speed is already in m/s for SI units
        v_converted = SpeedConverter.kmHtoMs(v);
    }
    // 4. Solution Synthesis
    // Using the kinematic equation: t = sqrt(2 * H / g)
    let t = Math.sqrt(2 * H / g);
    // Using the horizontal motion equation: R = v_converted * t
    let R = v_converted * t;
    R = math.round(R, 3); // Round to 3 decimal places

    // Return the structured data
    return {
        params: {
            v: v,
            H: H,
            unitsSpeed: units.speed,
            unitsDist: units.distance,
            unitsTime: units.time
        },
        correct_answers: {
            R: R
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
console.log(generate());","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The car is moving horizontally with a speed of {{params.v}} {{params.unitsSpeed}} and vertically under the acceleration due to gravity. The horizontal distance covered by the car before it hits the river can be calculated using the equation \( R = vt \), where \( R \) is the horizontal distance, \( v \) is the horizontal speed, and \( t \) is the time taken to hit the river.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The time taken to hit the river can be calculated using the equation \( t = \sqrt{\frac{2{{params.H}}}{g}} \), where \( H \) is the height of the bridge and \( g \) is the acceleration due to gravity.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Substituting the value of \( t \) from the second equation into the first equation gives \( R = {{params.v}}\sqrt{\frac{2{{params.H}}}{g}} \). Substituting the given values of \( v \), \( H \), and \( g \) (assuming \( g = 9.8 \, m/s^2 \) if the units are in meters and \( g = 32.2 \, ft/s^2 \) if the units are in feet) gives the horizontal distance \( R \) that the car travels before hitting the river.
    </pl-hint>
</pl-solution-panel>
<pl-number-input answers-name=""R"" comparison=""sigfig"" digits=""3"" label=""R (in {{params.unitsDist}})""></pl-number-input>
",,,"a bridge under construction has a ""bridge ends here"" sign. the bridge is being constructed over a river that is {{params.h}} {{params.unitsdist}} below. a drunk driver speeding at {{params.v}} {{params.unitsspeed}} misses the sign and goes off horizontally from the end of the bridge. what is the horizontal distance (in {{params.unitsdist}}) from the point at which the car runs off the end of the bridge and at which the car hits the river?

would you like me to provide an example with specific values for {{params.h}}, {{params.unitsdist}}, {{params.v}}, and {{params.unitsspeed}}?",A1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7,Bridge construction problem,A bridge under construction has a 'bridge ends here' sign. the bridge is being constructed over a river that is 70 ft below. a drunk driver speeding at 75 mph misses the sign and goes off horizontally from the end of the bridge.,Physics,"Bridge construction,Kinematics,Horizontal motion",Understanding of kinematics and horizontal motion,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,"ME 103, ME 010",Projectile Motion
252,preclass_2.1.14_Bridge Construction and Car Velocity,"{""uuid"": ""a1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7"", ""title"": ""Bridge Construction and Car Velocity"", ""stem"": ""A bridge under construction has a 'Bridge ends here' sign. The bridge is being constructed over a river that is 70 ft below. A drunk driver speeding at 75 mph misses the sign and goes off horizontally from the end of the bridge."", ""topic"": ""Physics"", ""tags"": [""bridge construction"", ""velocity"", ""kinematics"", ""horizontal motion""], ""prereqs"": ""Understanding of kinematics and horizontal motion"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A bridge under construction has a ""Bridge ends here"" sign. The bridge is being constructed over a river that is {{params.H}} {{params.unitsDist}} below. A drunk driver speeding at {{params.vx}} {{params.unitsSpeed}} misses the sign and goes off horizontally from the end of the bridge. </p>
  <p> What is the magnitude of the velocity (in {{params.unitsSpeed}}) with which the car hits the river? </p>
</pl-question-panel>

<pl-number-input answers-name=""v"" comparison=""sigfig"" digits=""3"" label=""v = (in {{params.unitsSpeed}})""></pl-number-input>","const math = require('mathjs');

/**
 * The SpeedConverter class provides static methods to convert speeds between
 * different units: feet per second (ft/s), meters per second (m/s),
 * miles per hour (mph), and kilometers per hour (km/h).
 */
class SpeedConverter {
    /**
     * Converts speed from feet per second to miles per hour.
     * 
     * @param {number} speedFts - The speed in feet per second.
     * @return {number} The speed in miles per hour.
     */
    static ftstoMPH(speedFts) {
        return speedFts * (3600 / 5280);
    }

    /**
     * Converts speed from meters per second to kilometers per hour.
     * 
     * @param {number} speedMs - The speed in meters per second.
     * @return {number} The speed in kilometers per hour.
     */
    static mstoKmH(speedMs) {
        return speedMs * (3600 / 1000);
    }

    /**
     * Converts speed from miles per hour to feet per second.
     * 
     * @param {number} speedMPH - The speed in miles per hour.
     * @return {number} The speed in feet per second.
     */
    static mphToFts(speedMPH) {
        return speedMPH * (5280 / 3600);
    }

    /**
     * Converts speed from kilometers per hour to meters per second.
     * 
     * @param {number} speedKMH - The speed in kilometers per hour.
     * @return {number} The speed in meters per second.
     */
    static kmHtoMs(speedKMH) {
        return speedKMH * (1000 / 3600);
    }
}

const generate = () => {
    const unitSystems = {
        si: {
            distance: 'm',
            speed: 'kmh',
            acceleration: 'm/s^2',
            gravity: 9.81 // m/s^2
        },
        uscs: {
            distance: 'ft',
            speed: 'mph',
            acceleration: 'ft/s^2',
            gravity: 32.174 // ft/s^2
        }
    };
    
    // 1. Dynamic Parameter Selection
    const selectedSystem = Math.random() < 0.5 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];
    
    // 3. Value Generation
    const H = math.randomInt(50, 100); // Height between 50 and 100 units
    const vx = math.randomInt(30, 60); // Velocity between 30 and 60 units
    
    // Conversion based on unit system
    let vx_converted;
    if (units.speed === 'kmh') {
        vx_converted = SpeedConverter.kmHtoMs(vx);
    } else if (units.speed === 'mph') {
        vx_converted = SpeedConverter.mphToFts(vx);
    }
    
    const g = units.gravity;
    
    // 4. Solution Synthesis
    // Kinematic equation for vertical motion: v_fy = sqrt(2 * g * H)
    let v_fy = Math.sqrt(2 * g * H);
    
    // Calculate the magnitude of the final velocity using Pythagorean theorem
    let v_f = Math.sqrt(vx_converted ** 2 + v_fy ** 2);
    v_f = math.round(v_f, 3); // Round the final velocity
    
    let v_f_converted;
    if (units.speed === 'kmh') {
        v_f_converted = SpeedConverter.mstoKmH(v_f);
    } else if (units.speed === 'mph') {
        v_f_converted = SpeedConverter.ftstoMPH(v_f);
    }

    // Return the structured data
    return {
        params: {
            vx:vx,
            vy:v_fy,
            vf:v_f_converted,
            vx_converted:vx_converted,
            H: H,
            vx: vx,
            unitsDist: units.distance,
            unitsSpeed: units.speed
        },
        correct_answers: {
            v: v_f_converted
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
console.log(generate());","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The car is projected horizontally with an initial velocity of {params.vx} {params.unitsSpeed}. The vertical component of the velocity when the car hits the river, denoted as \( v_y \), can be found using the equation \( v_y = \sqrt{2 \times {params.units.gravity} \times {params.H}} \), where \( g \) is the acceleration due to gravity and \( H \) is the height from which the car falls.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The magnitude of the velocity with which the car hits the river can be found using the Pythagorean theorem: \( v_f = \sqrt{{params.vx_converted}^2 + {params.vy}^2} \), where \( v_x \) is the horizontal component of the velocity (converted to {params.unitsSpeed}) and \( v_y \) is the vertical component calculated earlier.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Substituting the given values into the equation, we get \( v_f = \sqrt{({params.vx_converted})^2 + ({params.vy})^2} = {correct_answers.v} {params.unitsSpeed} \).
    </pl-hint>
</pl-solution-panel>
",,,"a bridge under construction has a ""bridge ends here"" sign. the bridge is being constructed over a river that is {{params.h}} {{params.unitsdist}} below. a drunk driver speeding at {{params.vx}} {{params.unitsspeed}} misses the sign and goes off horizontally from the end of the bridge.

what is the magnitude of the velocity (in {{params.unitsspeed}}) with which the car hits the river?

<pl-number-input answers-name=""v"" comparison=""sigfig"" digits=""3"" label=""v = (in {{params.unitsspeed}})""></pl-number-input>",A1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7,Bridge construction and car velocity,A bridge under construction has a 'bridge ends here' sign. the bridge is being constructed over a river that is 70 ft below. a drunk driver speeding at 75 mph misses the sign and goes off horizontally from the end of the bridge.,Physics,"Bridge construction,Velocity,Kinematics,Horizontal motion",Understanding of kinematics and horizontal motion,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,Projectile Motion
253,preclass_2.1.15_Bridge Construction and Car Accident,"{""uuid"": ""a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"", ""title"": ""Bridge Construction and Car Accident"", ""stem"": ""A bridge under construction has a 'Bridge ends here' sign. The bridge is being constructed over a river that is 70 ft below. A drunk driver speeding at 75 mph misses the sign and goes off horizontally from the end of the bridge. At what acute angle (in degrees) with the horizontal does the car hit the river?"", ""topic"": ""Physics"", ""tags"": [""bridge construction"", ""car accident"", ""kinematics"", ""projectile motion""], ""prereqs"": ""Understanding of kinematics and projectile motion"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A bridge under construction has a ""Bridge ends here"" sign. The bridge is being constructed over a river that is {{params.H}} {{params.unitsDist}} below. A drunk driver speeding at {{params.v}} {{params.unitsSpeed}} misses the sign and goes off horizontally from the end of the bridge. </p>
  <p> At what acute angle (in degrees) with the horizontal does the car hit the river? </p>
</pl-question-panel>

<pl-number-input answers-name=""ang"" comparison=""sigfig"" digits=""3"" label=""Angle (in degrees)""></pl-number-input>","const math = require('mathjs');

/**
 * The SpeedConverter class provides static methods to convert speeds between
 * different units: feet per second (ft/s), meters per second (m/s),
 * miles per hour (mph), and kilometers per hour (km/h).
 */
class SpeedConverter {
    /**
     * Converts speed from feet per second to miles per hour.
     * 
     * @param {number} speedFts - The speed in feet per second.
     * @return {number} The speed in miles per hour.
     */
    static ftstoMPH(speedFts) {
        return speedFts * (3600 / 5280);
    }

    /**
     * Converts speed from meters per second to kilometers per hour.
     * 
     * @param {number} speedMs - The speed in meters per second.
     * @return {number} The speed in kilometers per hour.
     */
    static mstoKmH(speedMs) {
        return speedMs * (3600 / 1000);
    }

    /**
     * Converts speed from miles per hour to feet per second.
     * 
     * @param {number} speedMPH - The speed in miles per hour.
     * @return {number} The speed in feet per second.
     */
    static mphToFts(speedMPH) {
        return speedMPH * (5280 / 3600);
    }

    /**
     * Converts speed from kilometers per hour to meters per second.
     * 
     * @param {number} speedKMH - The speed in kilometers per hour.
     * @return {number} The speed in meters per second.
     */
    static kmHtoMs(speedKMH) {
        return speedKMH * (1000 / 3600);
    }
}

function calculateTimeOfFlight(H, g) {
    return Math.sqrt(2 * H / g);
}

function calculateHorizontalDistance(vx, t) {
    return vx * t;
}

function calculateImpactAngle(H, d) {
    return math.atan(H / d);
}

function convertRadiansToDegrees(angleRadians) {
    return angleRadians * 180 / Math.PI;
}


const generate = () => {
    const unitSystems = {
        si: {
            distance: 'm',
            speed: 'kmh',
            acceleration: 'm/s^2',
            gravity: 9.81
        },
        uscs: {
            distance: 'ft',
            speed: 'mph',
            acceleration: 'ft/s^2',
            gravity: 32.174
        }
    };

    // 1. Dynamic Parameter Selection
    const selectedSystem = Math.random() < 0.5 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];
    
    // 3. Value Generation
    const H = math.randomInt(50, 100); // Height
    const v = math.randomInt(30, 60); // Horizontal velocity

    // Conversion of velocity based on unit system
    let vx_converted;
    if (units.speed === 'kmh') {
        vx_converted = SpeedConverter.kmHtoMs(v);
    } else if (units.speed === 'mph') {
        vx_converted = SpeedConverter.mphToFts(v);
    }

    const g = units.gravity;

    // Calculate time of flight
    const t = calculateTimeOfFlight(H, g);

    // Calculate horizontal distance
    const d = calculateHorizontalDistance(vx_converted, t);

    // Calculate the angle of impact in radians
    let angleRadians = calculateImpactAngle(H, d);

    // Convert the angle to degrees
    let angleDegrees = convertRadiansToDegrees(angleRadians);

    // Round the angle to 3 significant figures
    angleDegrees = math.round(angleDegrees, 3);

    // Return the structured data
    return {
        params: {
            v: v,
            H: H,
            unitsSpeed: units.speed,
            unitsDist: units.distance
        },
        correct_answers: {
            ang: angleDegrees
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
console.log(generate());

    
    
    ","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The car is projected horizontally with an initial velocity of {params.v} {params.unitsSpeed} and falls under gravity to hit the river {params.H} {params.unitsDist} below.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The time of flight can be calculated using the equation \( t = \sqrt{\frac{2H}{g}} \), where \( g \) is the acceleration due to gravity.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        The horizontal distance travelled by the car can be calculated using the equation \( d = vt \), where \( v \) is the initial horizontal velocity and \( t \) is the time of flight.
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        The angle of impact can be calculated using the equation \( \theta = \arctan{\frac{H}{d}} \), where \( H \) is the height of the bridge and \( d \) is the horizontal distance travelled by the car.
    </pl-hint>
    <pl-hint level=""5"" data-type=""text"">
        Substituting the given values into the equation gives the angle of impact as {correct_answers.ang} degrees.
    </pl-hint>
</pl-solution-panel>",,,"```plaintext
a bridge under construction has a ""bridge ends here"" sign. the bridge is being constructed over a river that is 20 meters below. a drunk driver speeding at 25 meters/second misses the sign and goes off horizontally from the end of the bridge.

at what acute angle (in degrees) with the horizontal does the car hit the river?
```",A1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6,Bridge construction and car accident,A bridge under construction has a 'bridge ends here' sign. the bridge is being constructed over a river that is 70 ft below. a drunk driver speeding at 75 mph misses the sign and goes off horizontally from the end of the bridge. at what acute angle (in degrees) with the horizontal does the car hit the river?,Physics,"Bridge construction,Car accident,Kinematics,Projectile motion",Understanding of kinematics and projectile motion,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Projectile Motion, Newton's Second Law of Motion"
254,preclass_2.1.16_Plane and Nut Problem,"{""uuid"": ""a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6"", ""title"": ""Plane and Nut Problem"", ""stem"": ""A plane has taken off the runway and has gained a speed of 300 mph making an angle 15 degrees with the horizontal. When the plane is 1600 ft off the ground, a loose nut detaches from the plane and falls to the ground. Neglect air resistance and assume that the plane travels in a straight line with uniform acceleration of 10 ft/sÂ². Approximately, how high (in ft) above the ground will the plane be when the nut hits the ground?"", ""topic"": ""Kinematics"", ""tags"": [""kinematics"", ""physics"", ""acceleration"", ""motion""], ""prereqs"": ""Understanding of kinematic equations and basic trigonometry"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A plane has taken off the runway and has gained a speed of {{params.v}} {{params.unitsSpeed}} making an angle {{params.theta}} degrees with the horizontal. When the plane is {{params.H}} {{params.unitsDist}} off the ground, a loose nut detaches from the plane and falls to the ground. Neglect air resistance and assume that the plane travels in a straight line with uniform acceleration of {{params.a}} {{params.unitsAcc}}. </p>
  <p> Approximately, how high (in {{params.unitsDist}}) above the ground will the plane be when the nut hits the ground? </p>
</pl-question-panel>

<pl-number-input answers-name=""h"" comparison=""sigfig"" digits=""3"" label=""h =  (in {{params.unitsDist}})""></pl-number-input>","const math = require('mathjs');

/**
 * The SpeedConverter class provides static methods to convert speeds between
 * different units: feet per second (ft/s), meters per second (m/s),
 * miles per hour (mph), and kilometers per hour (km/h).
 */
class SpeedConverter {
    /**
     * Converts speed from feet per second to miles per hour.
     * 
     * @param {number} speedFts - The speed in feet per second.
     * @return {number} The speed in miles per hour.
     */
    static ftstoMPH(speedFts) {
        return speedFts * (3600 / 5280);
    }

    /**
     * Converts speed from meters per second to kilometers per hour.
     * 
     * @param {number} speedMs - The speed in meters per second.
     * @return {number} The speed in kilometers per hour.
     */
    static mstoKmH(speedMs) {
        return speedMs * (3600 / 1000);
    }

    /**
     * Converts speed from miles per hour to feet per second.
     * 
     * @param {number} speedMPH - The speed in miles per hour.
     * @return {number} The speed in feet per second.
     */
    static mphToFts(speedMPH) {
        return speedMPH * (5280 / 3600);
    }

    /**
     * Converts speed from kilometers per hour to meters per second.
     * 
     * @param {number} speedKMH - The speed in kilometers per hour.
     * @return {number} The speed in meters per second.
     */
    static kmHtoMs(speedKMH) {
        return speedKMH * (1000 / 3600);
    }
}
function convertDegreestoRad(angleDegrees) {
    return angleDegrees * math.pi / 180;
}

function solveQuadratic(a, b, c) {
    const discriminant = b * b - 4 * a * c;
    if (discriminant < 0) {
        return []; // No real roots
    } else {
        const root1 = (-b + Math.sqrt(discriminant)) / (2 * a);
        const root2 = (-b - Math.sqrt(discriminant)) / (2 * a);
        return [root1, root2];
    }
}

const generate = () => {
    const unitSystems = {
        si: {
            speed: 'km/h',
            distance: 'm',
            time: 's',
            acceleration: 'm/sÂ²'
        },
        uscs: {
            speed: 'mph',
            distance: 'ft',
            time: 's',
            acceleration: 'ft/sÂ²'
        }
    };

    // 1. Dynamic Parameter Selection
    const selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];

    // 3. Value Generation
    const Vc = math.randomInt(200, 601); // Initial velocity of the plane (200-600 mph or equivalent)
    const theta = math.randomInt(5, 16); // Angle of ascent (5-15 degrees)
    const h0 = math.randomInt(1000, 2001); // Initial height of the plane (1000-2000 ft or equivalent)
    const a = math.randomInt(5,15) // Acceleration of Plane
    const g = units.acceleration === 'm/sÂ²' ? 9.81 : 32; // Acceleration due to gravity

    // Conversion based on unit system
    let Vc_converted;
    if (units.speed === 'km/h') {
        Vc_converted = SpeedConverter.kmHtoMs(Vc) ; // Convert mph to m/s
    } else {
        Vc_converted = SpeedConverter.mphToFts(Vc); // Convert mph to ft/s
    }

    // 4. Solution Synthesis
    const theta_rad = convertDegreestoRad(theta)
    const Vcy = Vc_converted * Math.sin(theta_rad);
    const deltaY = h0;

    // Solve the quadratic equation for time
    const times = solveQuadratic(-0.5 * g, Vcy, deltaY);
    let t1;
    let t2
    [t1,t2] = times
    if (t1>0){
        t = t1
    }
    else t=t2

    // Calculate the total height at the time the nut hits the ground
    const DeltaH = deltaY + Vcy * t + 0.5 * a * t * t;

    // Return the structured data
    return {
        params: {
            v: Vc,
            vy:Vcy,
            theta: theta,
            H: h0,
            a: a,
            t:t,
            unitsSpeed: units.speed,
            unitsTime: units.time,
            unitsDist: units.distance,
            unitsAcc: units.acceleration
        },
        correct_answers: {
            h: DeltaH
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
console.log(generate());","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The time it takes for the object to hit the ground can be calculated using the equation of motion: \( t = \sqrt{\frac{2H}{g}} \), where \( H \) is the initial height {params.H} {params.unitsDist} and \( g \) is the acceleration due to gravity {params.unitsAcc}.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The plane's vertical speed can be calculated as \( v_{y} = {params.v} \sin(\theta) \), where \( {params.v} \) is the plane's speed in {params.unitsSpeed} and \( \theta \) is the launch angle in degrees.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        The height of the plane at the time the object hits the ground is calculated using \( h = {params.H} + {params.vy} \times {params.t} + \frac{1}{2} \times {params.a} \times {params.t}^2 \), where \( a \) is the plane's acceleration in {params.unitsAcc}.
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        Substituting the values, the plane's height when the object hits the ground is \( h = {params.H} + {params.vy} \times {params.t} + \frac{1}{2} \times {params.a} \times {params.t}^2 = {correct_answers.h} {params.unitsDist} \).
    </pl-hint>
</pl-solution-panel>",,,"a plane has taken off the runway and has gained a speed of {{params.v}} {{params.unitsspeed}} making an angle {{params.theta}} degrees with the horizontal. when the plane is {{params.h}} {{params.unitsdist}} off the ground, a loose nut detaches from the plane and falls to the ground. neglect air resistance and assume that the plane travels in a straight line with uniform acceleration of {{params.a}} {{params.unitsacc}}.

approximately, how high (in {{params.unitsdist}}) above the ground will the plane be when the nut hits the ground?",A1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6,Plane and nut problem,"A plane has taken off the runway and has gained a speed of 300 mph making an angle 15 degrees with the horizontal. when the plane is 1600 ft off the ground, a loose nut detaches from the plane and falls to the ground. neglect air resistance and assume that the plane travels in a straight line with uniform acceleration of 10 ft/sâ². approximately, how high (in ft) above the ground will the plane be when the nut hits the ground?",Kinematics,"Kinematics,Physics,Acceleration,Motion",Understanding of kinematic equations and basic trigonometry,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Projectile Motion, Kinematics, Newton's Second Law of Motion"
255,preclass_2.1.2_Average Speed Calculation,"{""uuid"": ""d7f7a3e6-8b3d-4e3b-9c3a-6f3d7a8b3d4e"", ""title"": ""Average Speed Calculation"", ""stem"": ""A car starts from rest, accelerates to 30 mph in 4 seconds, travels at 30 mph for 25 seconds, and decelerates to zero in 6 seconds. What's its average speed in mph?"", ""topic"": ""Physics"", ""tags"": [""kinematics"", ""motion"", ""speed"", ""acceleration"", ""deceleration""], ""prereqs"": [""Basic understanding of speed, acceleration, and deceleration""], ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A car starts from rest, accelerates to {{params.v1}} {{params.unitsSpeed}} in {{params.t1}} {{params.unitsTime}}, travels at {{params.v1}} {{params.unitsSpeed}} for {{params.t2}} {{params.unitsTime}}, and decelerates to zero in {{params.t3}} {{params.unitsTime}}. </p>
  <p> What's its average speed in {{params.unitsSpeed}}? </p>
</pl-question-panel>

<pl-number-input answers-name=""va"" comparison=""sigfig"" digits=""3"" label=""Average speed ({{params.unitsSpeed}})""></pl-number-input>","const math = require('mathjs');

function convertKmphToMeterMin(speedKmph) {
    return speedKmph *1000/60; // This factor converts km/h to m/min
}

function convertMPHtoFtMin(speedMPH) {
    return speedMPH * 5280 / 60; // This factor converts mph to ft/min
}
function convertFeetToMiles(distanceFeet){
    return distanceFeet/5280
}
function convertMeterToKm(distanceMeter){
    return distanceMeter/1000
}


const generate = () => {
    const unitSystems = {
        si: {
            speed: 'km/h',
            distance: 'm',
            time: 'minutes'
        },
        uscs: {
            speed: 'mph',
            distance: 'ft',
            time: 'minutes'
        }
    };

    // 1. Dynamic Parameter Selection
    const selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];

    // 3. Value Generation
    const v1 = math.randomInt(40, 90); // velocity between 10 and 30 units
    const t1 = math.randomInt(1, 5); // time between 1 and 10 units
    const t2 = math.randomInt(10, 30); // time between 10 and 30 units
    const t3 = math.randomInt(1, 5); // time between 1 and 5 units

    // Conversion based on unit system
    let v1_converted;
    if (units.speed === ""km/h"") {
        v1_converted = convertKmphToMeterMin(v1);
    } else if (units.speed === ""mph"") {
        v1_converted = convertMPHtoFtMin(v1);
    }

    // 4. Solution Synthesis
    // Using the kinematic equation: d = 0.5 * (v0 + vf) * t
    // Since initial velocity is 0 for the first phase and final velocity is 0 for the last phase
    const d1 = 0.5 * v1_converted * t1; // Distance for the first phase
    const d2 = v1_converted * t2; // Distance for the second phase (constant speed)
    const d3 = 0.5 * v1_converted * t3; // Distance for the third phase

    const d_total = d1 + d2 + d3; // Total distance in either ft or meters
    const t_total = t1 + t2 + t3; // Total time in minutes 

    
    
    const t_converted = t_total/60 //Convert time from minutes to hours
    if (units.speed === ""km/h"") {
        distance_converted = convertMeterToKm(d_total)
    } else if (units.speed === ""mph"") {
        distance_converted = convertFeetToMiles(d_total);
    }
    const v_avg = distance_converted/t_converted; // Average speed in units.speed units


    // Return the structured data
    return {
        params: {
            v1: v1,
            t1: t1,
            t2: t2,
            t3: t3,
            x1:x1,
            x2:x2,
            x3:x3,
            unitsSpeed: units.speed,
            unitsTime: units.time,
            unitsDistance: units.distance
        },
        correct_answers: {
            va: math.round(v_avg, 3) // Round to 3 decimal places
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
console.log(generate());","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The average speed is calculated by dividing the total distance travelled by the total time taken.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The total distance travelled is the sum of the distances d1, d2, and d3.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Distance d1 is covered during acceleration for a time of {params.t1} {params.unitsTime}, calculated using \(d1 = \frac{1}{2} {params.v1} {params.t1}\).
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        Distance d2 is travelled at constant speed for {params.t2} {params.unitsTime}, calculated using \(d2 = {params.v1} {params.t2}\).
    </pl-hint>
    <pl-hint level=""5"" data-type=""text"">
        Distance d3 during deceleration for a time of {params.t3} {params.unitsTime}, calculated similarly to d1.
    </pl-hint>
    <pl-hint level=""6"" data-type=""text"">
        The average speed is calculated by dividing the total distance (d1 + d2 + d3) by the total time ({params.t1} + {params.t2} + {params.t3}). The car's average speed is {correct_answers.va} {params.unitsSpeed}.
    </pl-hint>
</pl-solution-panel>
",,,"a car starts from rest, accelerates to {{params.v1}} {{params.unitsspeed}} in {{params.t1}} {{params.unitstime}}, travels at {{params.v2}} {{params.unitsspeed}} for {{params.t2}} {{params.unitstime}}, and decelerates to zero in {{params.t3}} {{params.unitstime}}.
what's its average speed in {{params.unitsspeed}}?",D7f7a3e6-8b3d-4e3b-9c3a-6f3d7a8b3d4e,Average speed calculation,"A car starts from rest, accelerates to 30 mph in 4 seconds, travels at 30 mph for 25 seconds, and decelerates to zero in 6 seconds. what's its average speed in mph?",Physics,"Kinematics,Motion,Speed,Acceleration,Deceleration","Basic understanding of speed, acceleration, and deceleration",True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,Kinematics
256,preclass_2.1.4_Distance Traveled with Acceleration,"{""uuid"": ""d7f6b7a1-8e3d-4c3b-9e3a-6f8d2e1c4b9a"", ""title"": ""Distance Traveled with Acceleration"", ""stem"": ""Calculating distance traveled with acceleration"", ""topic"": ""Physics"", ""tags"": [""kinematics"", ""acceleration"", ""distance"", ""physics""], ""prereqs"": [""Understanding of initial speed, acceleration, and time""], ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A car traveling at an initial speed of {{params.v}} {{params.unitsSpeed}} accelerates at {{params.a}} {{params.unitsAcceleration}}. How far (in {{params.unitsDist}}) does it travel in the third second after it begins to accelerate?</p>
</pl-question-panel>

<pl-number-input answers-name=""d"" comparison=""sigfig"" digits=""3"" label=""Distance (in {{params.unitsDist}})""></pl-number-input>","const math = require('mathjs');

function convertMPHtoFts(speedMPH) {
    const conversionFactor = 1.46667; // This factor converts mph to ft/s
    return speedMPH * conversionFactor;
}

function convertKmphToMs(speedKmph) {
    const conversionFactor = 0.277778; // This factor converts km/h to m/s
    return speedKmph * conversionFactor;
}

const generate = () => {
    const unitSystems = {
        si: {
            speed: 'km/h',
            acceleration: 'm/sÂ²',
            distance: 'm',
            time: 's'
        },
        uscs: {
            speed: 'mph',
            acceleration: 'ft/sÂ²',
            distance: 'ft',
            time: 's'
        }
    };

    // 1. Dynamic Parameter Selection
    const selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];

    // 3. Value Generation
    const v = math.randomInt(20, 101); // initial velocity between 20 and 100 units
    const a = math.randomInt(1, 11); // acceleration between 1 and 10 units

    // Conversion based on unit system
    let v_converted;
    if (units.speed === ""km/h"") {
        v_converted = convertKmphToMs(v);
    } else if (units.speed === ""mph"") {
        v_converted = convertMPHtoFts(v);
    }

    // 4. Solution Synthesis
    // Using the kinematic equation: Î”x = v_0 * t + (1/2) * a * t^2
    const deltaX3 = v_converted * 3 + 0.5 * a * Math.pow(3, 2);
    const deltaX2 = v_converted * 2 + 0.5 * a * Math.pow(2, 2);
    const deltaD = deltaX3 - deltaX2; // Distance traveled during the third second

    // Return the structured data
    return {
        params: {
            v: v,
            a: a,
            unitsSpeed: units.speed,
            unitsAcceleration: units.acceleration,
            unitsDist: units.distance,
            unitsTime: units.time
        },
        correct_answers: {
            d: math.round(deltaD,3) // Round to 3 decimal places
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        To calculate the distance traveled in the third second, we first find the total distance traveled in the first three seconds and then subtract the distance traveled in the first two seconds.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The total distance traveled in the first three seconds can be calculated using the kinematic equation: \( \Delta x_3 = v_0 \times 3 + \frac{1}{2} \times a \times 3^2 \), where \( v_0 \) is the initial speed and \( a \) is the acceleration.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Similarly, the distance for the first two seconds is calculated as: \( \Delta x_2 = v_0 \times 2 + \frac{1}{2} \times a \times 2^2 \).
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        The distance traveled during the third second is then \( \Delta x_3 - \Delta x_2 \).
    </pl-hint>
    <pl-hint level=""5"" data-type=""text"">
        Substituting \( v_0 = {params.v} {params.unitsSpeed} \) and \( a = {params.a} {params.unitsAcceleration} \) gives the distance traveled in the third second as \( {correct_answers.d} {params.unitsDist} \).
    </pl-hint>
</pl-solution-panel>",,,"a car traveling at an initial speed of {{params.v}} {{params.unitsspeed}} accelerates at {{params.a}} {{params.unitsacceleration}}. how far (in {{params.unitsdist}}) does it travel in the third second after it begins to accelerate?

<pl-number-input answers-name=""d"" comparison=""sigfig"" digits=""3"" label=""distance (in {{params.unitsdist}})""></pl-number-input>",D7f6b7a1-8e3d-4c3b-9e3a-6f8d2e1c4b9a,Distance traveled with acceleration,Calculating distance traveled with acceleration,Physics,"Kinematics,Acceleration,Distance,Physics","Understanding of initial speed, acceleration, and time",True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,"ME 003, ME 103","Kinematics, Time and Motion Analysis"
257,preclass_2.1.5_Bicycle Race Time Calculation_1,"{""uuid"": ""d41d8cd98f00b204e9800998ecf8427e"", ""title"": ""Bicycle Race Time Calculation"", ""stem"": ""A bicycle race involves a track of 25 km. A cyclist travels the first 15 km in 45 minutes. The average speed record for this race was 22 kmph. The remaining time (in minutes) in which the cyclist needs to complete the race to beat this record is:"", ""topic"": ""Mathematics"", ""tags"": [""bicycle race"", ""speed"", ""time calculation"", ""math problem""], ""prereqs"": [""Basic understanding of speed and distance calculations""], ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A bicycle race involves a track of {{params.d}} {{params.unitsDist}}. A cyclist travels the first {{params.d1}} {{params.unitsDist}} in {{params.t1}} {{params.unitsTime}}. The average speed record for this race was {{params.vr}} {{params.unitsSpeed}}. </p>
  <p> The remaining time (in minutes) in which the cyclist needs to complete the race to beat this record is: </p>
</pl-question-panel>

<pl-number-input answers-name=""t"" comparison=""sigfig"" digits=""3"" label=""Time (in minutes)""></pl-number-input>","const math = require('mathjs');

// Helper functions for unit conversions
function convertHoursToMinutes(hours) {
    return hours * 60;
}

function convertMinutesToHours(minutes) {
    return minutes / 60;
}

function convertSpeedHourstoSpeedMin(speedHours){
    return speedHours/60
}

const generate = () => {
    // 1. Dynamic Parameter Selection
    const unitSystems = {
        si:{
            distance: 'km',
            speed: 'km/h',
            time: 'min'
        },
        uscs:{
            distance: 'miles',
            speed: 'mph',
            time: 'min'
        }
        
    };
    // Selected Unit System
    const selectedSystem = math.randomInt(0,2) === 0? 'si':'uscs'
    const units = unitSystems[selectedSystem]; 

    // 3. Value Generation
    const d_race = math.randomInt(21,40); // The total distance of the race in kilometers or Miles
    const d1 = math.randomInt(10, 21); // The distance already traveled, between 10 and 20 miles
    const t1 = math.randomInt(30, 61); // The time already traveled, between 30 and 60 minutes
    const vr = math.randomInt(20, 25); // The average speed record, between 20 and 25 kmh or mph

    // 2. Appropriate Transformations
    // Convert the average record speed to km/min
    const vr_converted = convertSpeedHourstoSpeedMin(vr);

    // 4. Solution Synthesis
    // Calculate the total time to complete the race at the record speed in hours
    const t_race = d_race / vr;
    // Convert the total time to minutes
    const t_race_min = convertHoursToMinutes(t_race);
    // Convert the time already traveled to hours
    const t1_hours = convertMinutesToHours(t1);
    // Calculate the remaining time in minutes
    const t_remaining = t_race_min - t1;

    // Return the structured data
    return {
        params: {
            d: d_race,
            d1: d1,
            t1: t1,
            vr: vr,
            unitsDist: units.distance,
            unitsSpeed: units.speed,
            unitsTime: units.time
        },
        correct_answers: {
            t: math.round(t_remaining, 3) // Round to 3 decimal places
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
console.log(generate());","<pl-solution-panel>
<pl-hint level=""1"" data-type=""text"">
The total distance of the race is {params.d} {params.unitsDist}, and the cyclist has already covered {params.d1} {params.unitsDist} in {params.t1} {params.unitsTime}.
</pl-hint>
<pl-hint level=""2"" data-type=""text"">
The remaining distance to be covered is {params.d} - {params.d1} {params.unitsDist}.
</pl-hint>
<pl-hint level=""3"" data-type=""text"">
The record speed is {params.vr} {params.unitsSpeed}. The time taken to cover a distance at a given speed is given by the formula \(t = \frac{d}{v}\).
</pl-hint>
<pl-hint level=""4"" data-type=""text"">
Therefore, the time needed to cover the remaining distance at the record speed is \(t = \frac{({params.d} - {params.d1})}{params.vr}\).
</pl-hint>
<pl-hint level=""5"" data-type=""text"">
The cyclist has already spent {params.t1} {params.unitsTime} on the first part of the race. To beat the record, the total time spent must be less than the record time. Therefore, the remaining time in which the cyclist needs to complete the race is \(t = \frac{({params.d} - {params.d1})}{params.vr} - {params.t1}\) {params.unitsTime}.
</pl-hint>
</pl-solution-panel>",,,"a bicycle race involves a track of {{params.d}} {{params.unitsdist}}. a cyclist travels the first {{params.d1}} {{params.unitsdist}} in {{params.t1}} {{params.unitstime}}. the average speed record for this race was {{params.vr}} {{params.unitsspeed}}.

the remaining time (in minutes) in which the cyclist needs to complete the race to beat this record is:",D41d8cd98f00b204e9800998ecf8427e,Bicycle race time calculation,A bicycle race involves a track of 25 km. a cyclist travels the first 15 km in 45 minutes. the average speed record for this race was 22 kmph. the remaining time (in minutes) in which the cyclist needs to complete the race to beat this record is:,Mathematics,"Bicycle race,Speed,Time calculation,Math problem",Basic understanding of speed and distance calculations,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,,Time and Motion Analysis
258,preclass_2.1.6_Truck Acceleration Problem,"{""uuid"": ""d7f7a3e6-8b3d-4e3b-9c3a-6f3d7a8b3d4e"", ""title"": ""Truck Acceleration Problem"", ""stem"": ""A truck traveling at 50 mph accelerates at a rate of 2ft/sÂ² for 5 seconds. What's the resulting speed of the truck in mph?"", ""topic"": ""Physics"", ""tags"": [""kinematics"", ""acceleration"", ""velocity"", ""motion""], ""prereqs"": [""Basic understanding of velocity and acceleration""], ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A truck traveling at {{params.v}} {{params.unitsSpeed}} accelerates at a rate of {{params.a}} {{params.unitsAcceleration}} for {{params.t}} {{params.unitsTime}}. </p>
  <p> What's the resulting speed of truck in {{params.unitsSpeed}}?</p>
</pl-question-panel>

<pl-number-input answers-name=""v"" comparison=""sigfig"" digits=""3"" label=""Resulting speed ({{params.unitsSpeed}})""></pl-number-input>","const math = require('mathjs');



/**
 * The SpeedConverter class provides static methods to convert speeds between
 * different units: feet per second (ft/s), meters per second (m/s),
 * miles per hour (mph), and kilometers per hour (km/h).
 */
class SpeedConverter {
    /**
     * Converts speed from feet per second to miles per hour.
     * 
     * @param {number} speedFts - The speed in feet per second.
     * @return {number} The speed in miles per hour.
     */
    static ftstoMPH(speedFts) {
        return speedFts * (3600 / 5280);
    }

    /**
     * Converts speed from meters per second to kilometers per hour.
     * 
     * @param {number} speedMs - The speed in meters per second.
     * @return {number} The speed in kilometers per hour.
     */
    static mstoKmH(speedMs) {
        return speedMs * (3600 / 1000);
    }

    /**
     * Converts speed from miles per hour to feet per second.
     * 
     * @param {number} speedMPH - The speed in miles per hour.
     * @return {number} The speed in feet per second.
     */
    static mphToFts(speedMPH) {
        return speedMPH * (5280 / 3600);
    }

    /**
     * Converts speed from kilometers per hour to meters per second.
     * 
     * @param {number} speedKMH - The speed in kilometers per hour.
     * @return {number} The speed in meters per second.
     */
    static kmHtoMs(speedKMH) {
        return speedKMH * (1000 / 3600);
    }
}

const generate = () => {
    const unitSystems = {
        si: {
            speed: 'km/h',
            distance: 'm',
            time: 's',
            acceleration: 'm/s^2'
        },
        uscs: {
            speed: 'mph',
            distance: 'ft',
            time: 's',
            acceleration: 'ft/s^2'
        }
    };

    //Dynamic Parameter Selection
    const selectedSystem = math.randomInt(0, 2) === 0 ? 'si' : 'uscs';
    const units = unitSystems[selectedSystem];

    // Value Generation
    const v0 = math.randomInt(10, 31); // Initial velocity 
    const a = math.randomInt(1, 11); // Acceleration 
    const t = math.randomInt(1, 11); // Time in seconds

    let v0_converted, vf_converted;

    // Converting Initial Velocity based on the selected system
    switch (selectedSystem) {
        case ""si"":
            v0_converted = SpeedConverter.kmHtoMs(v0); // Convert km/h to m/s for SI units
            break;
        case ""uscs"":
            v0_converted = SpeedConverter.mphToFts(v0); // Convert mph to ft/s for USC units
            break;
    }

    // 3. Calculating Final Velocity
    // Using the kinematic equation: Vf = V0 + a * t
    let vf = v0_converted + a * t;

    // 4. Converting Final Velocity back to the original unit system
    switch (selectedSystem) {
        case ""si"":
            vf_converted = SpeedConverter.mstoKmH(vf); // Convert m/s to km/h for SI units
            break;
        case ""uscs"":
            vf_converted = SpeedConverter.ftstoMPH(vf); // Convert ft/s to mph for USC units
            break;
    }

    // 5. Rounding off the final value
    vf_converted = math.round(vf_converted, 3); // rounding to 3 decimal places

    // Return the structured data
    return {
        params: {
            v: v0,
            a: a,
            t: t,
            unitsSpeed: units.speed,
            unitsTime: units.time,
            unitsAcceleration: units.acceleration
        },
        correct_answers: {
            v: vf_converted
        },
        nDigits: 3,
        sigfigs: 3
    };
};

module.exports = {
    generate
};

// Example usage:
const result = generate();
console.log(result);","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The final speed of the truck can be calculated using the formula: \( v_f = v_i + at \), where \( v_i \) is the initial speed, \( a \) is the acceleration, and \( t \) is the time.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        Substitute the given values into the formula: \( v_f = {params.v} + {params.a} \times {params.t} \). Before using formula ensure proper unit conversion
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        The resulting speed of the truck is \( v_f = {correct_answers.v} {params.unitsSpeed} \).
    </pl-hint>
</pl-solution-panel>",,,"a truck traveling at {{params.v}} {{params.unitsspeed}} accelerates at a rate of {{params.a}} {{params.unitsacceleration}} for {{params.t}} {{params.unitstime}}. what's the resulting speed of the truck in {{params.unitsspeed}}?

<pl-number-input answers-name=""v"" comparison=""sigfig"" digits=""3"" label=""resulting speed ({{params.unitsspeed}})""></pl-number-input>",D7f7a3e6-8b3d-4e3b-9c3a-6f3d7a8b3d4e,Truck acceleration problem,A truck traveling at 50 mph accelerates at a rate of 2ft/sâ² for 5 seconds. what's the resulting speed of the truck in mph?,Physics,"Kinematics,Acceleration,Velocity,Motion",Basic understanding of velocity and acceleration,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Kinematics, Newton's Second Law of Motion"
259,preclass_2.1.7_Vertical Ball Throw,"{
    ""uuid"": ""d6f8b8a7-3c3e-4e3d-9b3a-6f3c4d2e1a2b"",
    ""title"": ""Vertical Ball Throw"",
    ""stem"": ""A ball is thrown vertically upward and reaches a height of 80 ft."",
    ""topic"": ""Kinematics"",
    ""tags"": [
        ""physics"",
        ""kinematics"",
        ""vertical motion""
    ],
    ""prereqs"": ""Understanding of basic kinematics and equations of motion"",
    ""isAdaptive"": ""true"",
    ""createdBy"": ""lberm007@ucr.edu"",
    ""qType"": ""num"",
    ""nSteps"": 1,
    ""updatedBy"": """",
    ""dificulty"": 1,
    ""codelang"": ""javascript""
}","<pl-question-panel>
  <p> A ball is thrown vertically upward and reaches a height of {{params.H}} {{params.unitsDist}}. </p>
  <p> What is its initial velocity (in {{params.unitsSpeed}})? </p>
</pl-question-panel>

<pl-number-input answers-name=""u"" comparison=""sigfig"" digits=""3"" label=""velocity = (in {{params.unitsSpeed}})""></pl-number-input>","const math = require('mathjs');

const generate = () => {
    // Define unit systems and their corresponding units
    const units = {
        si: {
            dist: 'm',
            speed: 'm/s',
            acceleration: -9.81 // Acceleration due to gravity in m/s^2 (SI units)
        },
        uscs: {
            dist: 'ft',
            speed: 'ft/s',
            acceleration: -32.2 // Acceleration due to gravity in ft/s^2 (USCS units)
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(units);
    const selectedUnitSystem = units[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];

    // Generate a random height within a reasonable range
    const minHeight = 10; // Minimum height
    const maxHeight = 100; // Maximum height
    const H = math.randomInt(minHeight, maxHeight);

    // Calculate the initial velocity using the kinematic equation
    const v0 = math.sqrt(-2 * selectedUnitSystem.acceleration * H);

    // Return the generated data
    return {
        params: {
            H: H,
            unitsDist: selectedUnitSystem.dist,
            unitsSpeed: selectedUnitSystem.speed
        },
        correct_answers: {
            u: v0
        },
        nDigits: 3,  // Define the number of digits after the decimal place.
        sigfigs: 3   // Define the number of significant figures for the answer.
    };
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The initial velocity of the ball can be calculated using the kinematic equation: \( u = \sqrt{2gH} \), where \( g \) is the acceleration due to gravity and \( H \) is the height from which the ball is dropped.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        The acceleration due to gravity varies based on the unit system. For the SI unit system, it is {params.units.si.acceleration} m/sÂ², and for the USCS unit system, it is {params.units.uscs.acceleration} ft/sÂ².
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        Since the height {params.H} {params.unitsDist} is provided, we can calculate the initial velocity using the corresponding value of \( g \) for the selected unit system.
    </pl-hint>
    <pl-hint level=""4"" data-type=""text"">
        The initial velocity is calculated as \( u = \sqrt{-2 \times {params.units[selectedUnitSystem].acceleration} \times {params.H}} \), considering the direction of gravitational acceleration.
    </pl-hint>
    <pl-hint level=""5"" data-type=""text"">
        The calculated initial velocity of the ball is {correct_answers.u} {params.unitsSpeed}.
    </pl-hint>
</pl-solution-panel>
",,,"input: consider a ball thrown vertically upward and reaches a height of {{params.h}} {{params.unitsdist}}.
what is its initial velocity (in {{params.unitsspeed}})?

output: consider a ball thrown vertically upward and reaches a height of 20 meters.
what is its initial velocity (in meters per second)?",D6f8b8a7-3c3e-4e3d-9b3a-6f3c4d2e1a2b,Vertical ball throw,A ball is thrown vertically upward and reaches a height of 80 ft.,Kinematics,"Physics,Kinematics,Vertical motion",Understanding of basic kinematics and equations of motion,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,"Projectile Motion, Newton's Second Law of Motion"
260,preclass_2.1.8_Cannon Ball Velocity,"{""uuid"": ""a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p"", ""title"": ""Cannon Ball Velocity"", ""stem"": ""A cannon fires a cannon ball at an angle 30Â° at a muzzle velocity of 50 m/s."", ""topic"": ""Projectile Motion"", ""tags"": [""Physics"", ""Kinematics"", ""Projectile Motion""], ""prereqs"": ""Basic understanding of trigonometry and projectile motion equations"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A cannon fires a cannon ball at an angle of {{params.theta}} degrees at a muzzle velocity of {{params.v}} {{params.unitsSpeed}}. </p>
  <p> What's the horizontal component of the velocity (in {{params.unitsSpeed}})? </p>
</pl-question-panel>

<pl-number-input answers-name=""vx"" comparison=""sigfig"" digits=""3"" label=""$v_x = $ (in {{params.unitsSpeed}})""></pl-number-input>","const math = require('mathjs');

const generate = () => {
    // Define unit systems and their corresponding units
    const unitSystems = {
        si: {
            speed: ""m/s"",
            angle: ""degrees""
        },
        uscs: {
            speed: ""ft/s"",
            angle: ""degrees""
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(unitSystems);
    const selectedUnitSystem = unitSystems[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];

    // Generate random values for initial velocity and launch angle
    const v = math.randomInt(20, 100); // Random initial velocity between 20 and 100 units
    const theta = math.randomInt(15, 75); // Random angle between 15 and 75 degrees

    // Convert angle to radians for computation
    const thetaRadians = math.unit(theta, 'deg').toNumber('rad');

    // Calculate the horizontal component of the velocity
    const vx = v * math.cos(thetaRadians);

    // Return the generated data
    return {
        params: {
            v: v,
            theta: theta,
            unitsSpeed: selectedUnitSystem.speed
        },
        correct_answers: {
            vx: vx
        },
        nDigits: 3,  // Define the number of digits after the decimal place.
        sigfigs: 3   // Define the number of significant figures for the answer.
    };
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The horizontal component of the velocity can be calculated using the formula: \( v_x = v \cos(\theta) \), where \( v \) is the muzzle velocity and \( \theta \) is the angle of launch.
    </pl-hint>
</pl-solution-panel>",,,"a cannon fires a cannon ball at an angle of 45 degrees at a muzzle velocity of 30 meters per second.

what's the horizontal component of the velocity (in meters per second)?",A1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p,Cannon ball velocity,A cannon fires a cannon ball at an angle 30â° at a muzzle velocity of 50 m/s.,Projectile motion,"Physics,Kinematics,Projectile motion",Basic understanding of trigonometry and projectile motion equations,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,Projectile Motion
261,preclass_2.1.9_Maximum Height of Cannon Ball,"{""uuid"": ""a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p"", ""title"": ""Maximum Height of Cannon Ball"", ""stem"": ""A cannon fires a cannon ball at an angle 30Â° at a muzzle velocity of 50 m/s."", ""topic"": ""Projectile Motion"", ""tags"": [""Physics"", ""Kinematics"", ""Projectile Motion""], ""prereqs"": ""Understanding of basic kinematics and trigonometry"", ""isAdaptive"": ""true"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""javascript""}","<pl-question-panel>
  <p> A cannon fires a cannon ball at an angle {{params.theta}} degrees at a muzzle velocity of {{params.v0}} {{params.unitsSpeed}}. </p>
  <p> What's the maximum height (in {{params.unitsDist}}) that the cannon ball reaches? </p>
</pl-question-panel>

<pl-number-input answers-name=""H"" comparison=""sigfig"" digits=""3"" label=""H = (in {{params.unitsDist}})""></pl-number-input>","const math = require('mathjs');

const generate = () => {
    // Define unit systems and their corresponding units
    const unitSystems = {
        si: {
            speed: ""m/s"",
            dist: ""m"",
            angle: ""degrees"",
            gravity: 9.81 // m/s^2
        },
        uscs: {
            speed: ""ft/s"",
            dist: ""ft"",
            angle: ""degrees"",
            gravity: 32.2 // ft/s^2
        }
    };

    // Randomly select a unit system
    const unitSystemKeys = Object.keys(unitSystems);
    const selectedUnitSystem = unitSystems[unitSystemKeys[math.randomInt(0, unitSystemKeys.length)]];

    // Generate random values for the problem's parameters
    const v0 = math.randomInt(20, 100); // Initial velocity in m/s or ft/s
    const theta = math.randomInt(15, 75); // Angle in degrees

    // Calculate the vertical component of the initial velocity
    const v0y = v0 * Math.sin(math.unit(theta, selectedUnitSystem.angle).toNumber('rad'));

    // Calculate the maximum height using the formula
    const maxHeight = (v0y ** 2) / (2 * selectedUnitSystem.gravity);

    // Return the problem data
    return {
        params: {
            v0: v0,
            theta: theta,
            unitsSpeed: selectedUnitSystem.speed,
            unitsDist: selectedUnitSystem.dist
        },
        correct_answers: {
            H: maxHeight // Maximum height rounded to 3 decimal places
        },
        nDigits: 3, // Number of digits after the decimal place
        sigfigs: 3  // Number of significant figures for the answer
    };
};

module.exports = {
    generate
};","<pl-solution-panel>
    <pl-hint level=""1"" data-type=""text"">
        The maximum height reached by the cannon ball can be calculated using the formula: \( H = \frac{v^2 \sin^2(\theta)}{2g} \), where \( v \) is the initial velocity, \( \theta \) is the angle of projection, and \( g \) is the acceleration due to gravity.
    </pl-hint>
    <pl-hint level=""2"" data-type=""text"">
        First, convert the angle from degrees to radians by multiplying by \( \frac{\pi}{180} \). Then, substitute the given values into the formula to calculate the maximum height.
    </pl-hint>
    <pl-hint level=""3"" data-type=""text"">
        The maximum height reached by the cannon ball is \( H = \frac{{params.v}^2 \sin^2({params.theta} \times \frac{\pi}{180})}{2 \times 9.8} = {correct_answers.H} {params.unitsDist} \).
    </pl-hint>
</pl-solution-panel>",,,"a cannon fires a cannon ball at an angle {{params.theta}} degrees at a muzzle velocity of {{params.v0}} {{params.unitsspeed}}.
what's the maximum height (in {{params.unitsdist}}) that the cannon ball reaches?",A1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p,Maximum height of cannon ball,A cannon fires a cannon ball at an angle 30â° at a muzzle velocity of 50 m/s.,Projectile motion,"Physics,Kinematics,Projectile motion",Understanding of basic kinematics and trigonometry,True,lberm007@ucr.edu,Num,1,,,Javascript,,,1.0,ME 103,Projectile Motion
262,preclass_2.1_1_Sky Diving Physics,"{""uuid"": ""a1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7"", ""title"": ""Sky Diving Physics"", ""stem"": ""A sky diver jumps out of a plane. Which of the following is true?"", ""topic"": ""Physics"", ""tags"": [""sky diving"", ""air resistance"", ""acceleration"", ""speed""], ""prereqs"": ""Basic understanding of physics and forces"", ""isAdaptive"": ""false"", ""createdBy"": ""lberm007@ucr.edu"", ""qType"": ""num"", ""nSteps"": 1, ""updatedBy"": """", ""dificulty"": 1, ""codelang"": ""none""}","<pl-question-panel> 
  <p>
    A sky diver jumps out of a plane. Which of the following is true?
  </p>
</pl-question-panel>

<pl-multiple-choice answers-name=""skyDiver"" weight=""1"" inline=""true"">
  <pl-answer correct=""true""> The diver's speed increases but the acceleration remains constant if the air resistance is zero </pl-answer>
  <pl-answer correct=""false""> The diver's speed and its acceleration increases if the air resistance is zero. </pl-answer>
  <pl-answer correct=""false""> The diver's speed increases but its acceleration decreases if the air resistance is zero. </pl-answer>
  <pl-answer correct=""false""> The diver's speed and acceleration remain constant if the air resistance is zero </pl-answer>
  <pl-answer correct=""false""> The diver's speed remains constant but acceleration decreases if the air resistance is zero </pl-answer>
</pl-multiple-choice>",,,,,"A sky diver jumps out of a plane. Which of the following is true?
Options:
1. The diver's speed increases but the acceleration remains constant if the air resistance is zero
2. The diver's speed and its acceleration increases if the air resistance is zero.
3. The diver's speed increases but its acceleration decreases if the air resistance is zero.
4. The diver's speed and acceleration remain constant if the air resistance is zero
5. The diver's speed remains constant but acceleration decreases if the air resistance is zero",A1b9c8d7-e6f5-g4h3-i2j1k0l9m8n7,Sky diving physics,A sky diver jumps out of a plane. which of the following is true?,Physics,"Sky diving,Air resistance,Acceleration,Speed",Basic understanding of physics and forces,False,lberm007@ucr.edu,Num,1,,,,,,1.0,ME 103,"Newton's Second Law of Motion, Air Resistance"
